"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[1534],{"./src/react-extension/components/UserSetting/UploadUserProfileAvatar/UploadUserProfileAvatar.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Initial:()=>Initial,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_router_dom__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react-router/esm/react-router.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),prop_types__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_6__),_UploadUserProfileAvatar__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/react-extension/components/UserSetting/UploadUserProfileAvatar/UploadUserProfileAvatar.js"),_test_mock_MockPort__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/react-extension/test/mock/MockPort.js"),_shared_models_entity_role_role_test_data__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/shared/models/entity/role/role.test.data.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/UserSetting/UploadUserProfileAvatar",component:_UploadUserProfileAvatar__WEBPACK_IMPORTED_MODULE_2__.A},context={userSettings:{getTrustedDomain:()=>new URL(window.location.href).origin},loggedInUser:{id:"f848277c-5398-58f8-a82a-72397af2d450",role_id:_shared_models_entity_role_role_test_data__WEBPACK_IMPORTED_MODULE_3__.ol,role:{name:"admin"},username:"ada@passbolt.com",active:!0,deleted:!1,created:"2020-08-13T10:10:02+00:00",modified:"2020-09-13T10:10:02+00:00",profile:{id:"99522cc9-0acc-5ae2-b996-d03bded3c0a6",user_id:"f848277c-5398-58f8-a82a-72397af2d450",first_name:"Ada",last_name:"Lovelace",created:"2020-10-13T10:10:02+00:00",modified:"2020-10-13T10:10:02+00:00",avatar:{url:{medium:"img/avatar/user_medium.png",small:"img/avatar/user.png"}}},is_mfa_enabled:!1,last_logged_in:null},port:new _test_mock_MockPort__WEBPACK_IMPORTED_MODULE_4__.A,setContext:()=>{}},Template=({context,...args})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.A.Provider,{value:context},react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_5__.fS,{initialEntries:["/"]},react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_5__.qh,{component:routerProps=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_UploadUserProfileAvatar__WEBPACK_IMPORTED_MODULE_2__.A,{...args,...routerProps})})));Template.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_6___default().object};const Initial=Template.bind({});Initial.args={context,onClose:()=>{}};const __namedExportsOrder=["Initial"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:"({\n  context,\n  ...args\n}) => <AppContext.Provider value={context}>\n    <MemoryRouter initialEntries={['/']}>\n      <Route component={routerProps => <UploadUserProfileAvatar {...args} {...routerProps} />}></Route>\n    </MemoryRouter>\n  </AppContext.Provider>",...Initial.parameters?.docs?.source}}}},"./src/react-extension/test/mock/MockPort.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function delay(t,v){return new Promise((resolve=>{setTimeout((()=>resolve(v)),t)}))}__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=class MockPort{constructor(storage){this.storage=storage,this.onListeners={},this.requestListeners={},this.emitListener={},this.onConnectErrorHandler={}}async emit(name,eventObject){let result;return console.debug(`PORT EMIT: ${name}`),console.debug("Arguments",eventObject),this.emitListener[name]?(result=await this.emitListener[name](eventObject),console.debug("response: ",result)):console.debug(`The emit ${name} has not been mocked`),delay(0,result)}on(name,callback){console.debug(`PORT ON: ${name}`),console.debug("PORT ON PARAMETERS:",callback),this.addOnListener(name,callback)}async request(name){let result;if(console.debug(`PORT REQUEST: ${name}`),console.debug("PORT REQUEST PARAMETERS:",Array.prototype.slice.call(arguments)),this.requestListeners[name]){const listenerArguments=Array.prototype.slice.call(arguments,1,arguments.length);console.debug("listenerArguments",listenerArguments),listenerArguments.push(this.storage),console.debug("listenerArguments",listenerArguments),result=await this.requestListeners[name](...listenerArguments),console.debug("response: ",result)}else console.debug(`The request ${name} has not been mocked`);return delay(0,result)}addEmitListener(name){console.debug(`PORT EMIT: ${name}`),console.debug("PORT EMIT PARAMETERS:",Array.prototype.slice.call(arguments))}addOnListener(name,callback){this.emitListener[name]=callback}addRequestListener(name,callback){this.requestListeners[name]=callback}onConnectError(callback){this.onConnectErrorHandler.callback=callback}}}}]);