/*! For license information please see react-extension-components-Administration-DisplayUserDirectoryAdministration-DisplayUserDirectoryAdministration-test-stories.1de0242b.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[4515],{"./src/react-extension/components/Administration/DisplayUserDirectoryAdministration/DisplayUserDirectoryAdministration.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Initial:()=>Initial,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayUserDirectoryAdministration_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Icon=__webpack_require__("./src/shared/components/Icons/Icon.js"),AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),Select=__webpack_require__("./src/react-extension/components/Common/Select/Select.js"),DisplaySimulateSynchronizeUserDirectoryAdministration=__webpack_require__("./src/react-extension/components/Administration/DisplaySimulateSynchronizeUserDirectoryAdministration/DisplaySimulateSynchronizeUserDirectoryAdministration.js"),DisplaySynchronizeUserDirectoryAdministration=__webpack_require__("./src/react-extension/components/Administration/DisplaySynchronizeUserDirectoryAdministration/DisplaySynchronizeUserDirectoryAdministration.js"),lib=__webpack_require__("./node_modules/xregexp/lib/index.js"),lib_default=__webpack_require__.n(lib);class UserDirectoryFormService{constructor(context,translate){this.context=context,this.translate=translate}static getInstance(context,translate){return this.instance||(this.instance=new UserDirectoryFormService(context,translate)),this.instance}static killInstance(){this.instance=null}validate(){const validation={hostError:this.validateHostInput(),portError:this.validatePortInput(),domainError:this.validateDomainInput(),fieldsMappingAdUserUsernameError:this.validateFieldsMappingAdUserUsernameInput(),fieldsMappingOpenLdapGroupUsersError:this.validateOpenLdapFieldsMappingGroupUsersInput()};return this.context.setErrors(validation),0===Object.values(validation).filter((x=>null!==x)).length}validateHostInput(){const settings=this.context.getSettings(),host=settings.host?.trim();return host.length?null:this.translate("A host is required.")}validatePortInput(){let portError=null;const port=this.context.getSettings().port.trim();return port.length?lib_default()("^[0-9]+").test(port)||(portError=this.translate("Only numeric characters allowed.")):portError=this.translate("A port is required."),portError}validateFieldsMappingAdUserUsernameInput(){const value=this.context.getSettings().fieldsMapping.ad.user.username;let fieldsMappingAdUserUsernameError=null;return value&&""!==value.trim()?value.length>128&&(fieldsMappingAdUserUsernameError=this.translate("The user username field mapping cannot exceed 128 characters.")):fieldsMappingAdUserUsernameError=this.translate("The user username field mapping cannot be empty"),fieldsMappingAdUserUsernameError}validateOpenLdapFieldsMappingGroupUsersInput(){const value=this.context.getSettings().fieldsMapping.openldap.group.users;let fieldsMappingOpenLdapGroupUsersError=null;return value&&""!==value.trim()?value.length>128&&(fieldsMappingOpenLdapGroupUsersError=this.translate("The group users field mapping cannot exceed 128 characters.")):fieldsMappingOpenLdapGroupUsersError=this.translate("The group users field mapping cannot be empty"),fieldsMappingOpenLdapGroupUsersError}validateDomainInput(){let domainError=null;return this.context.getSettings().domain.trim().length||(domainError=this.translate("A domain name is required.")),domainError}}const userDirectory_UserDirectoryFormService=UserDirectoryFormService;var AdministrationUserDirectoryContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationUserDirectory/AdministrationUserDirectoryContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),DialogContext=__webpack_require__("./src/react-extension/contexts/DialogContext.js"),DisplayTestUserDirectoryAdministration=__webpack_require__("./src/react-extension/components/Administration/DisplayTestUserDirectoryAdministration/DisplayTestUserDirectoryAdministration.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js");class DisplayAdministrationUserDirectoryActions extends react.Component{constructor(props){super(props),this.bindCallbacks(),this.state=this.defaultState,this.userDirectoryFormService=userDirectory_UserDirectoryFormService.getInstance(this.props.adminUserDirectoryContext,this.props.t)}componentDidUpdate(){this.props.adminUserDirectoryContext.mustOpenSynchronizePopUp()&&(this.props.adminUserDirectoryContext.requestSynchronization(!1),this.handleSynchronizeClick())}async handleSaveClick(){this.props.adminUserDirectoryContext.getSettings().userDirectoryToggle?await this.props.adminUserDirectoryContext.save():await this.props.adminUserDirectoryContext.delete(),this.handleSaveSuccess()}async handleFormSubmit(action){try{if(this.userDirectoryFormService.validate())switch(action){case"save":await this.handleSaveClick();break;case"test":await this.handleTestClick()}}catch(error){this.handleSubmitError(error)}finally{this.props.adminUserDirectoryContext.setSubmitted(!0),this.props.adminUserDirectoryContext.setProcessing(!1)}}async handleTestClick(){const displayTestUserDirectoryDialogProps={userDirectoryTestResult:(await this.props.adminUserDirectoryContext.test()).body};this.props.context.setContext({displayTestUserDirectoryDialogProps}),this.props.dialogContext.open(DisplayTestUserDirectoryAdministration.A)}isSaveEnabled(){return!this.props.adminUserDirectoryContext.isProcessing()&&this.props.adminUserDirectoryContext.hasSettingsChanges()}isTestEnabled(){return!this.props.adminUserDirectoryContext.isProcessing()&&this.props.adminUserDirectoryContext.getSettings().userDirectoryToggle}isSynchronizeEnabled(){return!this.props.adminUserDirectoryContext.isProcessing()&&this.props.adminUserDirectoryContext.getSettings().userDirectoryToggle&&this.props.adminUserDirectoryContext.getCurrentSettings().userDirectoryToggle}bindCallbacks(){this.handleSaveClick=this.handleSaveClick.bind(this),this.handleTestClick=this.handleTestClick.bind(this),this.handleSimulateSynchronizeClick=this.handleSimulateSynchronizeClick.bind(this),this.handleSynchronizeClick=this.handleSynchronizeClick.bind(this)}handleSimulateSynchronizeClick(){this.props.dialogContext.open(DisplaySimulateSynchronizeUserDirectoryAdministration.A)}handleSynchronizeClick(){this.props.dialogContext.open(DisplaySynchronizeUserDirectoryAdministration.A)}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The user directory settings for the organization were updated."))}async handleSubmitError(error){"UserAbortsOperationError"!==error.name&&(console.error(error),await this.handleError(error))}async handleError(error){await this.props.actionFeedbackContext.displayError(error.message)}render(){return react.createElement("div",{className:"col2_3 actions-wrapper"},react.createElement("div",{className:"actions"},react.createElement("ul",null,react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isSaveEnabled(),onClick:()=>this.handleFormSubmit("save")},react.createElement(Icon.A,{name:"save"}),react.createElement("span",null,react.createElement(es.x6,null,"Save settings")))),react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isTestEnabled(),onClick:()=>this.handleFormSubmit("test")},react.createElement(Icon.A,{name:"plug"}),react.createElement("span",null,react.createElement(es.x6,null,"Test settings")))),react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isSynchronizeEnabled(),onClick:this.handleSimulateSynchronizeClick},react.createElement(Icon.A,{name:"magic-wand"}),react.createElement("span",null,react.createElement(es.x6,null,"Simulate synchronize")))),react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isSynchronizeEnabled(),onClick:this.handleSynchronizeClick},react.createElement(Icon.A,{name:"refresh"}),react.createElement("span",null,react.createElement(es.x6,null,"Synchronize")))))))}}DisplayAdministrationUserDirectoryActions.propTypes={context:prop_types_default().object,dialogContext:prop_types_default().object,adminUserDirectoryContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationUserDirectoryActions_DisplayAdministrationUserDirectoryActions=(0,AppContext.L)((0,ActionFeedbackContext.ot)((0,DialogContext.z9)((0,AdministrationUserDirectoryContext.e$)((0,es.CI)("common")(DisplayAdministrationUserDirectoryActions)))));DisplayAdministrationUserDirectoryActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"handleSaveClick",docblock:"Handle save settings",modifiers:["async"],params:[],returns:null,description:"Handle save settings"},{name:"handleFormSubmit",docblock:null,modifiers:["async"],params:[{name:"action",optional:!1,type:null}],returns:null},{name:"handleTestClick",docblock:"handle test settings",modifiers:["async"],params:[],returns:null,description:"handle test settings"},{name:"isSaveEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"isTestEnabled",docblock:"Is test button is enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is test button is enable"},{name:"isSynchronizeEnabled",docblock:"Is Synchronize button is enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is Synchronize button is enable"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleSimulateSynchronizeClick",docblock:"Handle simulate synchronize settings",modifiers:[],params:[],returns:null,description:"Handle simulate synchronize settings"},{name:"handleSynchronizeClick",docblock:"Handle synchronize settings",modifiers:[],params:[],returns:null,description:"Handle synchronize settings"},{name:"handleSaveSuccess",docblock:"Handle save operation success.",modifiers:["async"],params:[],returns:null,description:"Handle save operation success."},{name:"handleSubmitError",docblock:"Handle save operation error.\n@param {object} error The returned error",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:null,description:"Handle save operation error."},{name:"handleError",docblock:"handle error to display the error dialog\n@param error",modifiers:["async"],params:[{name:"error",optional:!1}],returns:null,description:"handle error to display the error dialog"}],displayName:"DisplayAdministrationUserDirectoryActions",props:{context:{description:"",type:{name:"object"},required:!1},dialogContext:{description:"",type:{name:"object"},required:!1},adminUserDirectoryContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};class DisplayUserDirectoryAdministration extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.userDirectoryFormService=userDirectory_UserDirectoryFormService.getInstance(this.props.adminUserDirectoryContext,this.props.t),this.bindCallbacks()}get defaultState(){return{hasFieldFocus:!1}}componentDidMount(){this.props.administrationWorkspaceContext.setDisplayAdministrationWorkspaceAction(DisplayAdministrationUserDirectoryActions_DisplayAdministrationUserDirectoryActions),this.props.adminUserDirectoryContext.findUserDirectorySettings()}componentWillUnmount(){this.props.administrationWorkspaceContext.resetDisplayAdministrationWorkspaceAction(),this.props.adminUserDirectoryContext.clearContext(),userDirectory_UserDirectoryFormService.killInstance(),this.userDirectoryFormService=null}bindCallbacks(){this.handleCredentialTitleClicked=this.handleCredentialTitleClicked.bind(this),this.handleDirectoryConfigurationTitleClicked=this.handleDirectoryConfigurationTitleClicked.bind(this),this.handleSynchronizationOptionsTitleClicked=this.handleSynchronizationOptionsTitleClicked.bind(this),this.handleFieldFocus=this.handleFieldFocus.bind(this),this.handleFieldBlur=this.handleFieldBlur.bind(this),this.handleInputChange=this.handleInputChange.bind(this),this.handleAdUserFieldsMappingInputChange=this.handleAdUserFieldsMappingInputChange.bind(this),this.handleOpenLdapGroupFieldsMappingInputChange=this.handleOpenLdapGroupFieldsMappingInputChange.bind(this),this.handleAdFallbackFieldInputChange=this.handleAdFallbackFieldInputChange.bind(this)}handleCredentialTitleClicked(){const settings=this.props.adminUserDirectoryContext.getSettings();this.props.adminUserDirectoryContext.setSettings("openCredentials",!settings.openCredentials)}handleDirectoryConfigurationTitleClicked(){const settings=this.props.adminUserDirectoryContext.getSettings();this.props.adminUserDirectoryContext.setSettings("openDirectoryConfiguration",!settings.openDirectoryConfiguration)}handleSynchronizationOptionsTitleClicked(){const settings=this.props.adminUserDirectoryContext.getSettings();this.props.adminUserDirectoryContext.setSettings("openSynchronizationOptions",!settings.openSynchronizationOptions)}handleInputChange(event){const target=event.target,value="checkbox"===target.type?target.checked:target.value,name=target.name;this.props.adminUserDirectoryContext.setSettings(name,value)}handleAdUserFieldsMappingInputChange(event){const{value,name}=event.target;this.props.adminUserDirectoryContext.setAdUserFieldsMappingSettings(name,value)}handleAdFallbackFieldInputChange(event){const{value,name}=event.target;this.props.adminUserDirectoryContext.setAdFallbackFieldsSettings(name,value)}handleOpenLdapGroupFieldsMappingInputChange(event){const target=event.target,value=target.value,name=target.name;this.props.adminUserDirectoryContext.setOpenLdapGroupFieldsMappingSettings(name,value)}handleFieldFocus(){this.setState({hasFieldFocus:!0})}handleFieldBlur(){this.setState({hasFieldFocus:!1})}hasAllInputDisabled(){const settings=this.props.adminUserDirectoryContext.getSettings();return settings.processing||settings.loading}isUserDirectoryChecked(){return this.props.adminUserDirectoryContext.getSettings().userDirectoryToggle}isActiveDirectoryChecked(){return"ad"===this.props.adminUserDirectoryContext.getSettings().directoryType}isOpenLdapChecked(){return"openldap"===this.props.adminUserDirectoryContext.getSettings().directoryType}isUseEmailPrefixChecked(){return this.props.adminUserDirectoryContext.getSettings().useEmailPrefix}getUsersAllowedToBeDefaultAdmin(){const users=this.props.adminUserDirectoryContext.getUsers();if(null!==users){const usersFiltered=users.filter((user=>!0===user.active&&"admin"===user.role.name));return usersFiltered&&usersFiltered.map((user=>({value:user.id,label:this.displayUser(user)})))}return[]}getUsersAllowedToBeDefaultGroupAdmin(){const users=this.props.adminUserDirectoryContext.getUsers();if(null!==users){const usersFiltered=users.filter((user=>!0===user.active));return usersFiltered&&usersFiltered.map((user=>({value:user.id,label:this.displayUser(user)})))}return[]}displayUser(user){return`${user.profile.first_name} ${user.profile.last_name} (${user.username})`}shouldShowSourceWarningMessage(){const context=this.props.adminUserDirectoryContext;return"file"===context?.getCurrentSettings()?.source&&context?.hasSettingsChanges()}get settingsSource(){return this.props.adminUserDirectoryContext?.getCurrentSettings()?.source}get configurationSource(){return{env:this.props.t("environment variables"),file:this.props.t("file"),db:this.props.t("database"),default:this.props.t("default")}[this.settingsSource]||this.props.t("unknown")}get connectionType(){return[{value:"plain",label:"ldap://"},{value:"ssl",label:"ldaps:// (ssl)"},{value:"tls",label:"ldaps:// (tls)"}]}get supportedAuthenticationMethod(){return[{value:"basic",label:this.props.t("Basic")},{value:"sasl",label:"SASL (EE)"}]}render(){const settings=this.props.adminUserDirectoryContext.getSettings(),errors=this.props.adminUserDirectoryContext.getErrors(),isSubmitted=this.props.adminUserDirectoryContext.isSubmitted(),hadDisabledSettings=this.props.adminUserDirectoryContext.hadDisabledSettings();return react.createElement("div",{className:"row"},react.createElement("div",{className:"ldap-settings col7 main-column"},react.createElement("h3",null,react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userDirectoryToggle",onChange:this.handleInputChange,checked:settings.userDirectoryToggle,disabled:this.hasAllInputDisabled(),id:"userDirectoryToggle"}),react.createElement("label",{htmlFor:"userDirectoryToggle"},react.createElement(es.x6,null,"Users Directory")))),!this.isUserDirectoryChecked()&&react.createElement(react.Fragment,null,hadDisabledSettings&&react.createElement("div",null,react.createElement("div",{className:"message warning"},react.createElement(es.x6,null,"The configuration has been disabled as it needs to be checked to make it correct before using it."))),!hadDisabledSettings&&react.createElement("p",{className:"description"},react.createElement(es.x6,null,"No Users Directory is configured. Enable it to synchronise your users and groups with passbolt."))),this.isUserDirectoryChecked()&&react.createElement(react.Fragment,null,this.shouldShowSourceWarningMessage()&&react.createElement("div",{className:"warning message"},react.createElement(es.x6,null,react.createElement("b",null,"Warning:")," These are the settings provided by a configuration file. If you save it, will ignore the settings on file and use the ones from the database.")),react.createElement("p",{className:"description"},react.createElement(es.x6,null,"A Users Directory is configured. The users and groups of passbolt will synchronize with it.")),react.createElement("div",{className:"accordion section-general "+(settings.openCredentials?"":"closed")},react.createElement("h4",{className:"accordion-header"},react.createElement("button",{type:"button",className:"link no-border",onClick:this.handleCredentialTitleClicked},settings.openCredentials&&react.createElement(Icon.A,{name:"caret-down"}),!settings.openCredentials&&react.createElement(Icon.A,{name:"caret-right"}),react.createElement(es.x6,null,"Credentials"))),react.createElement("div",{className:"accordion-content"},react.createElement("div",{className:"radiolist required"},react.createElement("label",null,react.createElement(es.x6,null,"Directory type")),react.createElement("div",{className:"input radio ad openldap form-element "},react.createElement("div",{className:"input radio"},react.createElement("input",{type:"radio",value:"ad",onChange:this.handleInputChange,name:"directoryType",checked:this.isActiveDirectoryChecked(),id:"directoryTypeAd",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"directoryTypeAd"},react.createElement(es.x6,null,"Active Directory"))),react.createElement("div",{className:"input radio"},react.createElement("input",{type:"radio",value:"openldap",onChange:this.handleInputChange,name:"directoryType",checked:this.isOpenLdapChecked(),id:"directoryTypeOpenLdap",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"directoryTypeOpenLdap"},react.createElement(es.x6,null,"Open Ldap"))))),react.createElement("div",{className:"input text required ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Server url")),react.createElement("div",{className:`input text singleline connection_info ad openldap ${this.hasAllInputDisabled()?"disabled":""} ${this.state.hasFieldFocus?"no-focus":""}`},react.createElement("input",{id:"server-input",type:"text","aria-required":!0,className:"required host ad openldap form-element",name:"host",value:settings.host,onChange:this.handleInputChange,placeholder:this.props.t("host"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"protocol",onBlur:this.handleFieldBlur,onFocus:this.handleFieldFocus},react.createElement(Select.A,{className:"inline",name:"connectionType",items:this.connectionType,value:settings.connectionType,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled()})),react.createElement("div",{className:"port ad openldap"},react.createElement("input",{id:"port-input",type:"number","aria-required":!0,className:"required in-field form-element",name:"port",value:settings.port,onChange:this.handleInputChange,onBlur:this.handleFieldBlur,onFocus:this.handleFieldFocus,disabled:this.hasAllInputDisabled()}))),errors.hostError&&isSubmitted&&react.createElement("div",{id:"server-input-feedback",className:"error-message"},errors.hostError),errors.portError&&isSubmitted&&react.createElement("div",{id:"port-input-feedback",className:"error-message"},errors.portError)),react.createElement("div",{className:"select-wrapper input required ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Authentication method")),react.createElement(Select.A,{items:this.supportedAuthenticationMethod,id:"authentication-type-select",name:"authenticationType",value:settings.authenticationType,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled()})),"basic"===settings.authenticationType&&react.createElement("div",{className:"singleline clearfix"},react.createElement("div",{className:"input text first-field ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Username")),react.createElement("input",{id:"username-input",type:"text",className:"fluid form-element",name:"username",value:settings.username,onChange:this.handleInputChange,placeholder:this.props.t("Username"),disabled:this.hasAllInputDisabled()})),react.createElement("div",{className:"input text last-field ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Password")),react.createElement("input",{id:"password-input",className:"fluid form-element",name:"password",value:settings.password,onChange:this.handleInputChange,placeholder:this.props.t("Password"),type:"password",disabled:this.hasAllInputDisabled()}))),react.createElement("div",{className:"input text required ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Domain")),react.createElement("input",{id:"domain-name-input","aria-required":!0,type:"text",name:"domain",value:settings.domain,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:"domain.ext",disabled:this.hasAllInputDisabled()}),errors.domainError&&isSubmitted&&react.createElement("div",{id:"domain-name-input-feedback",className:"error-message"},errors.domainError)),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Base DN")),react.createElement("input",{id:"base-dn-input",type:"text",name:"baseDn",value:settings.baseDn,onChange:this.handleInputChange,className:"fluid form-element",placeholder:"OU=OrgUsers,DC=mydomain,DC=local",disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"The base DN (default naming context) for the domain.")," ",react.createElement(es.x6,null,"If this is empty then it will be queried from the RootDSE."))))),react.createElement("div",{className:"accordion section-directory-configuration "+(settings.openDirectoryConfiguration?"":"closed")},react.createElement("h4",{className:"accordion-header"},react.createElement("button",{type:"button",className:"link no-border",onClick:this.handleDirectoryConfigurationTitleClicked},settings.openDirectoryConfiguration&&react.createElement(Icon.A,{name:"caret-down"}),!settings.openDirectoryConfiguration&&react.createElement(Icon.A,{name:"caret-right"}),react.createElement(es.x6,null,"Directory configuration"))),react.createElement("div",{className:"accordion-content"},react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Group path")),react.createElement("input",{id:"group-path-input",type:"text","aria-required":!0,name:"groupPath",value:settings.groupPath,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:this.props.t("Group path"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Group path is used in addition to the base DN while searching groups.")," ",react.createElement(es.x6,null,"Leave empty if users and groups are in the same DN."))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"User path")),react.createElement("input",{id:"user-path-input",type:"text","aria-required":!0,name:"userPath",value:settings.userPath,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:this.props.t("User path"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"User path is used in addition to base DN while searching users."))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Group custom filters")),react.createElement("input",{id:"group-custom-filters-input",type:"text",name:"groupCustomFilters",value:settings.groupCustomFilters,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:this.props.t("Group custom filters"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Group custom filters are used in addition to the base DN and group path while searching groups.")," ",react.createElement(es.x6,null,"Leave empty if no additional filter is required."))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"User custom filters")),react.createElement("input",{id:"user-custom-filters-input",type:"text",name:"userCustomFilters",value:settings.userCustomFilters,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:this.props.t("User custom filters"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"User custom filters are used in addition to the base DN and user path while searching users.")," ",react.createElement(es.x6,null,"Leave empty if no additional filter is required."))),this.isOpenLdapChecked()&&react.createElement("div",null,react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Group object class")),react.createElement("input",{id:"group-object-class-input",type:"text","aria-required":!0,name:"groupObjectClass",value:settings.groupObjectClass,onChange:this.handleInputChange,className:"required fluid",placeholder:"GroupObjectClass",disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"For Openldap only. Defines which group object to use.")," (",react.createElement(es.x6,null,"Default"),": groupOfUniqueNames)")),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"User object class")),react.createElement("input",{id:"user-object-class-input",type:"text","aria-required":!0,name:"userObjectClass",value:settings.userObjectClass,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:"UserObjectClass",disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"For Openldap only. Defines which user object to use.")," (",react.createElement(es.x6,null,"Default"),": inetOrgPerson)")),react.createElement("div",{className:"input text openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Use email prefix / suffix?")),react.createElement("div",{className:"input toggle-switch openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"useEmailPrefix",value:settings.useEmailPrefix,onChange:this.handleInputChange,id:"use-email-prefix-suffix-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"use-email-prefix-suffix-toggle-button"},react.createElement(es.x6,null,"Build email based on a prefix and suffix?"))),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Use this option when user entries do not include an email address by default"))),this.isUseEmailPrefixChecked()&&react.createElement("div",{className:"singleline clearfix",id:"use-email-prefix-suffix-options"},react.createElement("div",{className:"input text first-field openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Email prefix")),react.createElement("input",{id:"email-prefix-input",type:"text","aria-required":!0,name:"emailPrefix",checked:settings.emailPrefix,onChange:this.handleInputChange,className:"required fluid form-element",placeholder:this.props.t("Username"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"The attribute you would like to use for the first part of the email (usually username)."))),react.createElement("div",{className:"input text last-field openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Email suffix")),react.createElement("input",{id:"email-suffix-input",type:"text","aria-required":!0,name:"emailSuffix",value:settings.emailSuffix,onChange:this.handleInputChange,className:"required form-element",placeholder:this.props.t("@your-domain.com"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"The domain name part of the email (@your-domain-name).")))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Group users field mapping")),react.createElement("input",{id:"field-mapping-openldap-group-users-input",type:"text","aria-required":!0,name:"users",value:settings.fieldsMapping.openldap.group.users,onChange:this.handleOpenLdapGroupFieldsMappingInputChange,className:"fluid form-element",placeholder:this.props.t("Group users field mapping"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Directory group's users field to map to Passbolt group's field.")),errors.fieldsMappingOpenLdapGroupUsersError&&isSubmitted&&react.createElement("div",{id:"field-mapping-openldap-group-users-input-feedback",className:"error-message"},errors.fieldsMappingOpenLdapGroupUsersError))),this.isActiveDirectoryChecked()&&react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"User username field mapping")),react.createElement("input",{id:"field-mapping-ad-user-username-input",type:"text","aria-required":!0,name:"username",value:settings.fieldsMapping.ad.user.username,onChange:this.handleAdUserFieldsMappingInputChange,className:"fluid form-element",placeholder:this.props.t("User username field mapping"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Directory user's username field to map to Passbolt user's username field.")),errors.fieldsMappingAdUserUsernameError&&isSubmitted&&react.createElement("div",{id:"field-mapping-ad-user-username-input-feedback",className:"error-message"},errors.fieldsMappingAdUserUsernameError)))),react.createElement("div",{className:"accordion section-sync-options "+(settings.openSynchronizationOptions?"":"closed")},react.createElement("h4",{className:"accordion-header"},react.createElement("button",{type:"button",className:"link no-border",onClick:this.handleSynchronizationOptionsTitleClicked},settings.openSynchronizationOptions&&react.createElement(Icon.A,{name:"caret-down"}),!settings.openSynchronizationOptions&&react.createElement(Icon.A,{name:"caret-right"}),react.createElement(es.x6,null,"Synchronization options"))),react.createElement("div",{className:"accordion-content"},react.createElement("div",{className:"select-wrapper input required ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Default admin")),react.createElement(Select.A,{items:this.getUsersAllowedToBeDefaultAdmin(),id:"default-user-select",name:"defaultAdmin",value:settings.defaultAdmin,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled(),search:!0}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"The default admin user is the user that will perform the operations for the the directory."))),react.createElement("div",{className:"select-wrapper input required ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Default group admin")),react.createElement(Select.A,{items:this.getUsersAllowedToBeDefaultGroupAdmin(),id:"default-group-admin-user-select",name:"defaultGroupAdmin",value:settings.defaultGroupAdmin,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled(),search:!0}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"The default group manager is the user that will be the group manager of newly created groups."))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Groups parent group")),react.createElement("input",{id:"groups-parent-group-input",type:"text",name:"groupsParentGroup",value:settings.groupsParentGroup,onChange:this.handleInputChange,className:"fluid form-element",placeholder:this.props.t("Groups parent group"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Synchronize only the groups which are members of this group."))),react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Users parent group")),react.createElement("input",{id:"users-parent-group-input",type:"text",name:"usersParentGroup",value:settings.usersParentGroup,onChange:this.handleInputChange,className:"fluid form-element",placeholder:this.props.t("Users parent group"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Synchronize only the users which are members of this group."))),this.isActiveDirectoryChecked&&react.createElement("div",{className:"input text ad openldap "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"User username fallback field")),react.createElement("input",{id:"fallback-fields-ad-username-fallback-input",type:"text","aria-required":!0,name:"username",value:settings.fallbackFields.ad.username,onChange:this.handleAdFallbackFieldInputChange,className:"fluid form-element",placeholder:this.props.t("User username fallback field"),disabled:this.hasAllInputDisabled()}),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Directory user's username fallback field to use when user username field cannot be found.")),errors.fallbackFieldsAdUsernameError&&isSubmitted&&react.createElement("div",{id:"fallback-fields-ad-username-fallback-input-feedback",className:"error-message"},errors.fallbackFieldsAdUsernameError)),this.isActiveDirectoryChecked()&&react.createElement("div",{className:"input text clearfix ad "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",null,react.createElement(es.x6,null,"Enabled users only")),react.createElement("div",{className:"input toggle-switch ad form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"enabledUsersOnly",checked:settings.enabledUsersOnly,onChange:this.handleInputChange,id:"enabled-users-only-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"enabled-users-only-toggle-button"},react.createElement(es.x6,null,"Only synchronize enabled users (AD)")))),react.createElement("div",{className:"input text clearfix ad openldap"},react.createElement("label",null,react.createElement(es.x6,null,"Sync operations")),react.createElement("div",{className:"col6"},react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"createUsers",checked:settings.createUsers,onChange:this.handleInputChange,id:"sync-users-create-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-users-create-toggle-button"},react.createElement(es.x6,null,"Create users"))),react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"deleteUsers",checked:settings.deleteUsers,onChange:this.handleInputChange,id:"sync-users-delete-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-users-delete-toggle-button"},react.createElement(es.x6,null,"Delete users"))),react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"updateUsers",checked:settings.updateUsers,onChange:this.handleInputChange,id:"sync-users-update-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-users-update-toggle-button"},react.createElement(es.x6,null,"Update users")))),react.createElement("div",{className:"col6 last"},react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"createGroups",checked:settings.createGroups,onChange:this.handleInputChange,id:"sync-groups-create-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-groups-create-toggle-button"},react.createElement(es.x6,null,"Create groups"))),react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"deleteGroups",checked:settings.deleteGroups,onChange:this.handleInputChange,id:"sync-groups-delete-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-groups-delete-toggle-button"},react.createElement(es.x6,null,"Delete groups"))),react.createElement("div",{className:"input toggle-switch ad openldap form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"updateGroups",checked:settings.updateGroups,onChange:this.handleInputChange,id:"sync-groups-update-toggle-button",disabled:this.hasAllInputDisabled()}),react.createElement("label",{className:"text",htmlFor:"sync-groups-update-toggle-button"},react.createElement(es.x6,null,"Update groups"))))),react.createElement("div",{className:"input text clearfix ad openldap"},react.createElement("label",null,react.createElement(es.x6,null,"Delete or suspend users")),react.createElement("div",{className:"help-message"},react.createElement(es.x6,null,"Define the behaviour when existing synchronized users are removed from the users directory"),":"),react.createElement("div",{className:"radiolist-alt"},react.createElement("div",{className:"input radio "+("delete"===settings.deleteUserBehavior?"checked":"")},react.createElement("input",{type:"radio",value:"delete",onChange:this.handleInputChange,name:"deleteUserBehavior",checked:"delete"===settings.deleteUserBehavior,id:"deleteUserBehaviorDelete",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"deleteUserBehaviorDelete"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Delete users")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Delete the users and all the data associated with them.")," ",react.createElement(es.x6,null,"The data will be permanently deleted, this action cannot be undone.")))),react.createElement("div",{className:"input radio "+("disable"===settings.deleteUserBehavior?"checked":"")},react.createElement("input",{type:"radio",value:"disable",onChange:this.handleInputChange,name:"deleteUserBehavior",checked:"disable"===settings.deleteUserBehavior,id:"deleteUserBehaviorSuspended",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"deleteUserBehaviorSuspended"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Suspend users")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Suspend the users, preventing them from signing in to Passbolt and from receiving email notifications.")," ",react.createElement(es.x6,null,"Other users can still share resources with them and add them to groups.")))))))))),react.createElement("div",{className:"col4 last"},react.createElement("div",{className:"sidebar-help",id:"user-directory-settings-source"},react.createElement("h3",null,react.createElement(es.x6,null,"Configuration source")),react.createElement("p",null,react.createElement(es.x6,null,"This current configuration source is: "),this.configurationSource,".")),react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"Need help?")),react.createElement("p",null,react.createElement(es.x6,null,"Check out our ldap configuration guide.")),react.createElement("a",{className:"button",href:"https://passbolt.com/docs/admin/user-provisioning/users-directory/",target:"_blank",rel:"noopener noreferrer"},react.createElement(Icon.A,{name:"document"}),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))))}}DisplayUserDirectoryAdministration.propTypes={adminUserDirectoryContext:prop_types_default().object,administrationWorkspaceContext:prop_types_default().object,t:prop_types_default().func};const DisplayUserDirectoryAdministration_DisplayUserDirectoryAdministration=(0,AdministrationUserDirectoryContext.e$)((0,AdministrationWorkspaceContext.Kk)((0,es.CI)("common")(DisplayUserDirectoryAdministration)));DisplayUserDirectoryAdministration.__docgenInfo={description:"This component allows to display the MFA for the administration",methods:[{name:"defaultState",docblock:"Get default state\n@returns {*}",modifiers:["get"],params:[],returns:{type:{name:"mixed"}},description:"Get default state"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleCredentialTitleClicked",docblock:"Handle the click on the credential title\n@param {UserDirectory} userDirectory state",modifiers:[],params:[],returns:null,description:"Handle the click on the credential title"},{name:"handleDirectoryConfigurationTitleClicked",docblock:"Handle the click on the credential title\n@param {UserDirectory} userDirectory state",modifiers:[],params:[],returns:null,description:"Handle the click on the credential title"},{name:"handleSynchronizationOptionsTitleClicked",docblock:"Handle the click on the credential title\n@param {UserDirectory} userDirectory state",modifiers:[],params:[],returns:null,description:"Handle the click on the credential title"},{name:"handleInputChange",docblock:"Handle form input changes.\n@param {ReactEvent} event the react event\n@returns {void}",modifiers:[],params:[{name:"event",description:"the react event",type:{name:"ReactEvent"},optional:!1}],returns:{type:{name:"void"}},description:"Handle form input changes."},{name:"handleAdUserFieldsMappingInputChange",docblock:"Handle specific Active Directory fields mapping input changes.\n@param {ReactEvent} event the react event\n@returns {void}",modifiers:[],params:[{name:"event",description:"the react event",type:{name:"ReactEvent"},optional:!1}],returns:{type:{name:"void"}},description:"Handle specific Active Directory fields mapping input changes."},{name:"handleAdFallbackFieldInputChange",docblock:"Handle specific Active Directory fields mapping input changes.\n@param {ReactEvent} event the react event\n@returns {void}",modifiers:[],params:[{name:"event",description:"the react event",type:{name:"ReactEvent"},optional:!1}],returns:{type:{name:"void"}},description:"Handle specific Active Directory fields mapping input changes."},{name:"handleOpenLdapGroupFieldsMappingInputChange",docblock:"Handle specific Openldap fields mapping input changes.\n@param {ReactEvent} event the react event\n@returns {void}",modifiers:[],params:[{name:"event",description:"the react event",type:{name:"ReactEvent"},optional:!1}],returns:{type:{name:"void"}},description:"Handle specific Openldap fields mapping input changes."},{name:"handleFieldFocus",docblock:"Handle field focus",modifiers:[],params:[],returns:null,description:"Handle field focus"},{name:"handleFieldBlur",docblock:"Handle field blur",modifiers:[],params:[],returns:null,description:"Handle field blur"},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"},{name:"isUserDirectoryChecked",docblock:"If user directory is checked\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"If user directory is checked"},{name:"isActiveDirectoryChecked",docblock:"If active directory is checked",modifiers:[],params:[],returns:null,description:"If active directory is checked"},{name:"isOpenLdapChecked",docblock:"If open ldap is checked",modifiers:[],params:[],returns:null,description:"If open ldap is checked"},{name:"isUseEmailPrefixChecked",docblock:"If use email prefix is checked",modifiers:[],params:[],returns:null,description:"If use email prefix is checked"},{name:"getUsersAllowedToBeDefaultAdmin",docblock:"Get users allowed to be default admin",modifiers:[],params:[],returns:null,description:"Get users allowed to be default admin"},{name:"getUsersAllowedToBeDefaultGroupAdmin",docblock:"Get users allowed to be default group admin",modifiers:[],params:[],returns:null,description:"Get users allowed to be default group admin"},{name:"displayUser",docblock:"display user firstname, lastname and username\n@param user\n@returns {string}",modifiers:[],params:[{name:"user",optional:!1}],returns:{type:{name:"string"}},description:"display user firstname, lastname and username"},{name:"shouldShowSourceWarningMessage",docblock:"Returns true if the source of the settings is from a config file instead of DB and the user has modified a field.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the source of the settings is from a config file instead of DB and the user has modified a field."},{name:"settingsSource",docblock:"Returns the source of the current settings\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current settings"},{name:"configurationSource",docblock:"Returns the source of the current configuration\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current configuration"},{name:"connectionType",docblock:"get the connection type",modifiers:["get"],params:[],returns:null,description:"get the connection type"},{name:"supportedAuthenticationMethod",docblock:"get the supported authentication method",modifiers:["get"],params:[],returns:null,description:"get the supported authentication method"}],displayName:"DisplayUserDirectoryAdministration",props:{adminUserDirectoryContext:{description:"",type:{name:"object"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var DisplayUserDirectoryAdministration_test_data=__webpack_require__("./src/react-extension/components/Administration/DisplayUserDirectoryAdministration/DisplayUserDirectoryAdministration.test.data.js"),mockApiResponse=__webpack_require__("./test/mocks/mockApiResponse.js"),MockFetch=__webpack_require__("./src/react-extension/test/mock/MockFetch.js");const DisplayUserDirectoryAdministration_test_stories={title:"Components/Administration/DisplayUserDirectoryAdministration",component:DisplayUserDirectoryAdministration_DisplayUserDirectoryAdministration},mockFetch=new MockFetch.A;mockFetch.addGetFetchRequest(/directorysync\/settings.json/,(async()=>(0,mockApiResponse._)(DisplayUserDirectoryAdministration_test_data.Yw))),mockFetch.addGetFetchRequest(/users*/,(async()=>(0,mockApiResponse._)(DisplayUserDirectoryAdministration_test_data.rB)));const Template=args=>react.createElement(AdministrationUserDirectoryContext.uA,args,react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(DisplayUserDirectoryAdministration_DisplayUserDirectoryAdministration,args))));Template.propTypes={context:prop_types_default().object};const Initial=Template.bind({});Initial.args=(0,DisplayUserDirectoryAdministration_test_data.Gs)(null,DisplayUserDirectoryAdministration_test_data.rB[4].id),Initial.parameters={css:"api_main"};const __namedExportsOrder=["Initial"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:'args => <AdminUserDirectoryContextProvider {...args}>\n    <div className="panel middle">\n      <div className="grid grid-responsive-12">\n        <DisplayUserDirectoryAdministration {...args} />\n      </div>\n    </div>\n  </AdminUserDirectoryContextProvider>',...Initial.parameters?.docs?.source}}}},"./node_modules/validator/es/lib/util/assertString.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function assertString(input){if(!("string"==typeof input||input instanceof String)){var invalidType=_typeof(input);throw null===input?invalidType="null":"object"===invalidType&&(invalidType=input.constructor.name),new TypeError("Expected a string but received a ".concat(invalidType))}}__webpack_require__.d(__webpack_exports__,{A:()=>assertString})}}]);