/*! For license information please see react-extension-components-AuthenticationLogin-Login-Login-test-stories.7c0fc4dd.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[9186],{"./src/react-extension/components/AuthenticationLogin/Login/Login.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CompleteRecovery:()=>CompleteRecovery,Initial:()=>Initial,LoginWithSsoEnabled:()=>LoginWithSsoEnabled,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Login_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),Login=__webpack_require__("./src/react-extension/components/AuthenticationLogin/Login/Login.js"),UserSettings=__webpack_require__("./src/shared/lib/Settings/UserSettings.js"),ExtAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ExtAppContext.test.data.js");function defaultProps(props={}){const userSettings=new UserSettings.A({"user.settings.securityToken.code":"TST","user.settings.securityToken.color":"#f44336","user.settings.securityToken.textColor":"#ffffff","user.settings.trustedDomain":new URL(window.location.href).origin,"user.id":"d57c10f5-639d-5160-9c81-8a0c6c4ec856","user.username":"admin@passbolt.com","user.firstname":"Admin","user.lastname":"User","user.settings.locale":"fr-FR"}),defaultProps1={displayAs:Login.c.SIGN_IN,context:(0,ExtAppContext_test_data.st)({userSettings}),userSettings,onSignIn:jest.fn((()=>Promise.resolve())),onCheckPassphrase:jest.fn((()=>Promise.resolve())),onSecondaryActionClick:jest.fn((()=>Promise.resolve()))};return Object.assign(defaultProps1,props)}function defaultPropsWithAccount(data={}){const defaultData=defaultProps({userSettings:null,account:{domain:new URL(window.location.href).origin,user_id:"d57c10f5-639d-5160-9c81-8a0c6c4ec856",username:"admin@passbolt.com",first_name:"Admin",last_name:"User",locale:"fr-FR",security_token:{code:"HGA",color:"#8bc34a",textcolor:"#000000"}}});return Object.assign(defaultData,data)}const Login_test_stories={title:"Components/AuthenticationLogin/Login",component:Login.A},Template=args=>react.createElement("div",{id:"container",className:"container page login"},react.createElement("div",{className:"content"},react.createElement("div",{className:"login-form"},react.createElement(react_router.fS,{initialEntries:["/"]},react.createElement(react_router.qh,{component:routerProps=>react.createElement(Login.A,{...args,...routerProps})}))))),defaultParameters={css:"ext_authentication"},Initial=Template.bind({});Initial.args=defaultProps({displayAs:Login.c.SIGN_IN,onSignIn:async()=>{console.log("onSignIn called")}}),Initial.parameters=defaultParameters;const CompleteRecovery=Template.bind({});CompleteRecovery.args=defaultPropsWithAccount({displayAs:Login.c.ACCOUNT_RECOVERY,onSignIn:async()=>{console.log("onSignIn called")}}),CompleteRecovery.parameters=defaultParameters;const passwordError=new Error("Wrong passphrase");passwordError.name="InvalidMasterPasswordError";const LoginWithSsoEnabled=Template.bind({});LoginWithSsoEnabled.args=defaultPropsWithAccount({displayAs:Login.c.SIGN_IN,isSsoAvailable:!0,onCheckPassphrase:()=>{throw passwordError},onSignIn:async()=>{console.log("onSignIn called")}}),LoginWithSsoEnabled.parameters=defaultParameters;const __namedExportsOrder=["Initial","CompleteRecovery","LoginWithSsoEnabled"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:'args => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <MemoryRouter initialEntries={[\'/\']}>\n          <Route component={routerProps => <Login {...args} {...routerProps} />} />\n        </MemoryRouter>\n      </div>\n    </div>\n  </div>',...Initial.parameters?.docs?.source}}},CompleteRecovery.parameters={...CompleteRecovery.parameters,docs:{...CompleteRecovery.parameters?.docs,source:{originalSource:'args => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <MemoryRouter initialEntries={[\'/\']}>\n          <Route component={routerProps => <Login {...args} {...routerProps} />} />\n        </MemoryRouter>\n      </div>\n    </div>\n  </div>',...CompleteRecovery.parameters?.docs?.source}}},LoginWithSsoEnabled.parameters={...LoginWithSsoEnabled.parameters,docs:{...LoginWithSsoEnabled.parameters?.docs,source:{originalSource:'args => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <MemoryRouter initialEntries={[\'/\']}>\n          <Route component={routerProps => <Login {...args} {...routerProps} />} />\n        </MemoryRouter>\n      </div>\n    </div>\n  </div>',...LoginWithSsoEnabled.parameters?.docs?.source}}}},"./node_modules/validator/es/lib/util/assertString.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function assertString(input){if(!("string"==typeof input||input instanceof String)){var invalidType=_typeof(input);throw null===input?invalidType="null":"object"===invalidType&&(invalidType=input.constructor.name),new TypeError("Expected a string but received a ".concat(invalidType))}}__webpack_require__.d(__webpack_exports__,{A:()=>assertString})}}]);