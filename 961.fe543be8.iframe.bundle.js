/*! For license information please see 961.fe543be8.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[961],{"./src/img/svg/healthcheck_error.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgHealthcheckError(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:18,height:18,fill:"none",viewBox:"0 0 18 18"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m13.5 4.5-9 9M4.5 4.5l9 9"})))}},"./src/img/svg/healthcheck_info.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _g,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgHealthcheckInfo(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:18,height:18,fill:"none",viewBox:"0 0 18 18"},props),_g||(_g=react__WEBPACK_IMPORTED_MODULE_0__.createElement("g",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,clipPath:"url(#healthcheck_info_svg__clip0_2267_647012)"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M9 16.5a7.5 7.5 0 1 0 0-15 7.5 7.5 0 0 0 0 15"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M6.818 6.75a2.25 2.25 0 0 1 4.372.75c0 1.5-2.25 2.25-2.25 2.25M9 12.75h.008"}))))}},"./src/img/svg/healthcheck_success.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgHealthcheckSuccess(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:14,height:11,fill:"none",viewBox:"0 0 14 11"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M13 1.5 4.75 9.75 1 6"})))}},"./src/img/svg/triangle_alert.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgTriangleAlert(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:18,height:18,fill:"none",viewBox:"0 0 18 18"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m16.298 13.5-6-10.5a1.5 1.5 0 0 0-2.61 0l-6 10.5A1.5 1.5 0 0 0 3 15.75h12a1.5 1.5 0 0 0 1.297-2.25M9 6.75v3M9 12.75h.008"})))}},"./src/react-extension/components/Administration/DisplayHealthcheckAdministration/DisplayHealthcheckAdministration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>DisplayHealthcheckAdministration_DisplayHealthcheckAdministration});var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),react=__webpack_require__("./node_modules/react/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),apiClient=__webpack_require__("./src/shared/lib/apiClient/apiClient.js");const healthcheck_HealthcheckService=class HealthcheckService{constructor(apiClientOptions){this.apiClientOptions=apiClientOptions,this.initClient()}async fetchHealthcheck(){this.initClient();const result=await this.apiClient.findAll();return result?.body}initClient(){this.apiClientOptions.setResourceName("healthcheck"),this.apiClient=new apiClient.O(this.apiClientOptions)}};var healthcheckEntity=__webpack_require__("./src/shared/models/entity/healthcheck/healthcheckEntity.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js");const AdministrationHealthcheckContext=react.createContext({healthcheckData:null,endpointEnabled:!0,setProcessing:()=>{},isProcessing:()=>{},loadHealthcheckData:()=>{},clearContext:()=>{},isHealthcheckEndpointEnabled:()=>{}});class AdministrationHealthcheckContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState;const apiClientOptions=props.context.getApiClientOptions();this.healthcheckService=new healthcheck_HealthcheckService(apiClientOptions)}get defaultState(){return{healthcheckData:null,endpointEnabled:!0,processing:!1,isProcessing:this.isProcessing.bind(this),loadHealthcheckData:this.fetchHealthcheckData.bind(this),clearContext:this.clearContext.bind(this),isHealthcheckEndpointEnabled:this.isHealthcheckEndpointEnabled.bind(this)}}isHealthcheckEndpointEnabled(){return this.state.endpointEnabled}async fetchHealthcheckData(){if(this.isHealthcheckEndpointEnabled()){this.setProcessing(!0);try{const result=await this.healthcheckService.fetchHealthcheck();if(result){const healthData=new healthcheckEntity.A(result);this.setState({healthcheckData:healthData})}else this.props.actionFeedbackContext.displayError("No data received from the server")}catch(error){console.error(error),this.setState({endpointEnabled:!1}),this.props.actionFeedbackContext.displayError(error.message)}finally{this.setProcessing(!1)}}}clearContext(){this.setState(this.defaultState)}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}render(){return react.createElement(AdministrationHealthcheckContext.Provider,{value:this.state},this.props.children)}}AdministrationHealthcheckContextProvider.propTypes={context:prop_types_default().any,actionFeedbackContext:prop_types_default().any,children:prop_types_default().any};(0,AppContext.L)((0,ActionFeedbackContext.ot)(AdministrationHealthcheckContextProvider));function withAdministrationHealthcheck(WrappedComponent){return class WithAdministrationHealthcheck extends react.Component{render(){return react.createElement(AdministrationHealthcheckContext.Consumer,null,(adminHealthcheckContext=>react.createElement(WrappedComponent,{adminHealthcheckContext,...this.props})))}}}AdministrationHealthcheckContextProvider.__docgenInfo={description:"The Healthcheck context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"isHealthcheckEndpointEnabled",docblock:"Returns true if the healthcheck API endpoint is enabled.\nIt is true by default as it requires a first call to the endpoint to know if it crashes or not.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the healthcheck API endpoint is enabled.\nIt is true by default as it requires a first call to the endpoint to know if it crashes or not."},{name:"fetchHealthcheckData",docblock:"Fetches the healthcheck data and updates the state.\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Fetches the healthcheck data and updates the state."},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."}],displayName:"AdministrationHealthcheckContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},actionFeedbackContext:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}};var AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),Icon=__webpack_require__("./src/shared/components/Icons/Icon.js");class DisplayAdministrationHealthcheckActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleRefresh=this.handleRefresh.bind(this)}isRefreshEnabled(){return this.props.adminHealthcheckContext.isHealthcheckEndpointEnabled()&&!this.props.adminHealthcheckContext.isProcessing()}async handleRefresh(){await this.props.adminHealthcheckContext.loadHealthcheckData(),this.handleRefreshSuccess()}async handleRefreshSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The healthcheck has been successfully refreshed"))}render(){return react.createElement("div",{className:"col2_3 actions-wrapper"},react.createElement("div",{className:"actions"},react.createElement("div",null,react.createElement("ul",null,react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isRefreshEnabled(),id:"save-settings",onClick:this.handleRefresh},react.createElement(Icon.A,{name:"refresh"}),react.createElement("span",null,react.createElement(es.x6,null,"Refresh"))))))))}}DisplayAdministrationHealthcheckActions.propTypes={adminHealthcheckContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationHealthcheckActions_DisplayAdministrationHealthcheckActions=withAdministrationHealthcheck((0,ActionFeedbackContext.ot)((0,es.CI)("common")(DisplayAdministrationHealthcheckActions)));DisplayAdministrationHealthcheckActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"isRefreshEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"handleRefresh",docblock:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user"},{name:"handleRefreshSuccess",docblock:"Handle save operation success.",modifiers:["async"],params:[],returns:null,description:"Handle save operation success."}],displayName:"DisplayAdministrationHealthcheckActions",props:{adminHealthcheckContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var Tooltip=__webpack_require__("./src/react-extension/components/Common/Tooltip/Tooltip.js"),spinner=__webpack_require__("./src/img/svg/spinner.svg"),portals=__webpack_require__("./src/shared/utils/portals.js"),healthcheck_success=__webpack_require__("./src/img/svg/healthcheck_success.svg"),healthcheck_error=__webpack_require__("./src/img/svg/healthcheck_error.svg"),healthcheck_info=__webpack_require__("./src/img/svg/healthcheck_info.svg"),triangle_alert=__webpack_require__("./src/img/svg/triangle_alert.svg"),file_text=__webpack_require__("./src/img/svg/file_text.svg"),info=__webpack_require__("./src/img/svg/info.svg");class DisplayHealthcheckAdministration extends react.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{data:null}}async componentDidMount(){this.props.administrationWorkspaceContext.setDisplayAdministrationWorkspaceAction(DisplayAdministrationHealthcheckActions_DisplayAdministrationHealthcheckActions),await this.props.adminHealthcheckContext.loadHealthcheckData()}componentWillUnmount(){this.props.administrationWorkspaceContext.resetDisplayAdministrationWorkspaceAction(),this.props.adminHealthcheckContext.clearContext()}get healthCheckData(){return this.props.adminHealthcheckContext.healthcheckData}canIUse(featureFlag){return Boolean(this.props.context.siteSettings?.canIUse(featureFlag))}get isUserDirectoryEnabled(){return this.canIUse("directorySync")}get canIUseSso(){return this.canIUse("sso")}render(){const healthcheckData=this.healthCheckData,isDefaultContentPresent=()=>!0===healthcheckData.database.connect&&!0===healthcheckData.database.defaultContent?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Some default content is present")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"No default content found"),react.createElement(Tooltip.A,{message:this.props.t("Run the install script to set the dafault content such as roles and permission types")},react.createElement(info.A,{className:"baseline svg-icon"}))),isCacheWorking=()=>!0===healthcheckData.core.cache?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Cache is working")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Cache is not working"),react.createElement(Tooltip.A,{message:this.props.t("Check the settings in config/app.php")},react.createElement(info.A,{className:"baseline svg-icon"}))),isSaltUnique=()=>!0===healthcheckData.core.salt?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Unique value set for security.salt")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Default value found for security.salt"),react.createElement(Tooltip.A,{message:this.props.t("Edit the security.salt in config/app.php")},react.createElement(info.A,{className:"baseline svg-icon"}))),isAppConfigFilePresent=()=>!0===healthcheckData.configFile.app?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The application config file is present")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The application config file is missing"),react.createElement(Tooltip.A,{message:this.props.t("Copy config/app.default.php to config/app.php")},react.createElement(info.A,{className:"baseline svg-icon"}))),isApiConfigFilePresent=()=>!0===healthcheckData.configFile.passbolt?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The passbolt config file is present")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The passbolt config file is missing"),react.createElement(Tooltip.A,{message:this.props.t("Copy config/passbolt.default.php to config/passbolt.php")},react.createElement(info.A,{className:"baseline svg-icon"}))),isPCREcompiled=()=>!0===healthcheckData.environment.pcre?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"PCRE compiled with unicode support")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"PCRE has not been compiled with Unicode support"),react.createElement(Tooltip.A,{message:this.props.t("Recompile PCRE with Unicode support by adding --enable-unicode-properties when configuring.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isTmpWrittable=()=>!0===healthcheckData.environment.tmpWritable?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The temporary directory and its content are writable and not executable")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The temporary directory and its content are not writable, or are executable"),react.createElement(Tooltip.A,{message:this.props.t("Ensure the temporary directory and its content are writable by the webserver user.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isLogWrittable=()=>!0===healthcheckData.environment.logWritable?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The logs directory and its content are writable")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The logs directory and its content are not writable"),react.createElement(Tooltip.A,{message:this.props.t("Ensure the temporary directory and its content are writable by the webserver user.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isGpgEnvSet=()=>{const gpgHomeDirectory=healthcheckData.gpg.info.gpgHome.toString();return!0===healthcheckData.gpg.gpgHome&&healthcheckData.gpg.info.gpgHome?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The environment variable GNUPGHOME is set to ",gpgHomeDirectory)):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The environment variable GNUPGHOME is set to ",gpgHomeDirectory," but the directory does not exist"),react.createElement(Tooltip.A,{message:this.props.t("Ensure the keyring location exists and is accessible by the webserver user.")},react.createElement(info.A,{className:"baseline svg-icon"})))},isKeyringWrittableByWebServer=()=>{const gpgHomeDirectory=healthcheckData.gpg.info.gpgHome.toString();return!0===healthcheckData.gpg.gpgHomeWritable&&healthcheckData.gpg.info.gpgHome?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The directory ",gpgHomeDirectory," containing the keyring is writable by the webserver user")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The directory ",gpgHomeDirectory," containing the keyring is not writable by the webserver user"),react.createElement(Tooltip.A,{message:this.props.t("Ensure the keyring location exists and is accessible by the webserver user.")},react.createElement(info.A,{className:"baseline svg-icon"})))},isServerFingerprintMatchingConfigFile=()=>{const configurationFilePath=healthcheckData.application.configPath.toString();return!0===healthcheckData.gpg.gpgKeyPrivateFingerprint&&!0===healthcheckData.gpg.gpgKeyPublicFingerprint?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The server key fingerprint matches the one defined in ",configurationFilePath)):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The server key fingerprint doesn't matches the one defined in ",configurationFilePath),react.createElement(Tooltip.A,{message:this.props.t("Double check the key fingerprint")},react.createElement(info.A,{className:"baseline svg-icon"})))},isServerPublicKeyDefined=()=>{const configurationFilePath=healthcheckData.application.configPath.toString();return!0===healthcheckData.gpg.gpgKeyPublicInKeyring?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The server public key defined in the ",configurationFilePath," (or environment variables) is in the keyring")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The server public key defined in the ",configurationFilePath," (or environment variables) is not in the keyring"),react.createElement(Tooltip.A,{message:this.props.t("Import the private server key in the keyring of the webserver user.")},react.createElement(info.A,{className:"baseline svg-icon"})))},doesServerKeyHasValidEmail=()=>!0===healthcheckData.gpg.gpgKeyPublicEmail?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"There is a valid email id defined for the server key")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The server key does not have a valid email id"),react.createElement(Tooltip.A,{message:this.props.t("Edit or generate another key with a valid email id.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isSelfRegistrationPluginEnabled=()=>!0===healthcheckData.application.registrationClosed.isSelfRegistrationPluginEnabled?react.createElement("span",{className:"healthcheck-info"},react.createElement(healthcheck_info.A,null),react.createElement(es.x6,null,"The Self Registration plugin is enabled")):react.createElement("span",{className:"healthcheck-info"},react.createElement(healthcheck_info.A,null),react.createElement(es.x6,null,"The Self Registration plugin is disabled"),react.createElement(Tooltip.A,{message:this.props.t("Enable the plugin in order to define self registration settings.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isRegistrationPublicRemovedFromPassbolt=()=>{const configurationFilePath=healthcheckData.application.configPath.toString();return!0===healthcheckData.application.registrationClosed.isRegistrationPublicRemovedFromPassbolt?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The deprecated self registration public settings was not found in ",configurationFilePath)):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The deprecated self registration public settings was found in ",configurationFilePath),react.createElement(Tooltip.A,{message:this.props.t("You may remove the passbolt.registration.public setting")},react.createElement(info.A,{className:"baseline svg-icon"})))},isHostAvailabilityCheckEnabled=()=>!0===healthcheckData.application.hostAvailabilityCheckEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Host availability will be checked")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"Host availability checking is disabled"),react.createElement(Tooltip.A,{message:this.props.t("Make sure the instance is not publicly available on the internet.")},react.createElement(info.A,{className:"baseline svg-icon"}))),whatIsSmtpSettingsSource=()=>{if(healthcheckData.smtpSettings.source){const smtpSettingsSource=healthcheckData.smtpSettings.source.toString();return!0===healthcheckData.smtpSettings.isInDb?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The SMTP Settings source is: ",{smtpSettingsSource})):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The SMTP Settings source is: ",{smtpSettingsSource}),react.createElement(Tooltip.A,{message:this.props.t("It is recommended to set the SMTP Settings in the database through the administration section.")},react.createElement(info.A,{className:"baseline svg-icon"})))}},isSmtpEndpointsDisabled=()=>!0===healthcheckData.smtpSettings.areEndpointsDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The SMTP Settings plugin endpoints are disabled")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The SMTP Settings plugin endpoints are enabled"),react.createElement(Tooltip.A,{message:this.props.t("It is recommended to disable the plugin endpoints.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isDirectorySyncEndpointsDisabled=()=>!0===healthcheckData.directorySync.endpointsDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The endpoints for updating the users directory configurations are disabled.")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The endpoints for updating the users directory configurations are enabled."),react.createElement(Tooltip.A,{message:this.props.t("It is recommended to disable endpoints for updating the users directory configurations.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isSSlCertificationValidationEnabled=()=>!0===healthcheckData.sso.sslHostVerification?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"SSL certification validation for SSO instance is enabled.")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"SSL certification validation for SSO instance is disabled."),react.createElement(Tooltip.A,{message:this.props.t("Disabling the ssl verify check can lead to security attacks.")},react.createElement(info.A,{className:"baseline svg-icon"}))),isEndpointEnabled=this.props.adminHealthcheckContext.isHealthcheckEndpointEnabled();return react.createElement("div",{className:"row"},react.createElement("div",{className:"healthcheck-settings main-column"},react.createElement("div",{className:"main-content"},react.createElement("h3",null,react.createElement(es.x6,null,"Passbolt API Status")),isEndpointEnabled?(()=>!healthcheckData||this.props.adminHealthcheckContext.isProcessing()?react.createElement(spinner.A,null):react.createElement(react.Fragment,null,react.createElement("h4",{className:"no-border"},react.createElement(es.x6,null,"Environment")),react.createElement("div",{className:"healthcheck-environment-section"},react.createElement("div",null,(()=>{if(healthcheckData.environment.info.phpVersion&&!0===healthcheckData.environment.phpVersion){const phpVersion=healthcheckData.environment.info.phpVersion.toString();return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"PHP version ",{phpVersion}))}return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"PHP version is too low, passbolt need PHP 7.4 or higher"))})()),react.createElement("div",null,isPCREcompiled()),react.createElement("div",null,isTmpWrittable()),react.createElement("div",null,isLogWrittable()),react.createElement("div",null,!0===healthcheckData.environment.image?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"GD or Imagick extension is installed")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"You must enable the gd or imagick extensions to use Passbolt"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.image.php",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))),react.createElement("div",null,!0===healthcheckData.environment.intl?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Intl extension is installed")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"You must enable the intl extension to use Passbolt"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.intl.php",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))),react.createElement("div",null,!0===healthcheckData.environment.mbstring?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Mbstring extension is installed")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"You must enable the mbstring extension to use Passbolt"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.mbstring.php",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"}))))),react.createElement("h4",null,react.createElement(es.x6,null,"Config files")),react.createElement("div",{className:"healthcheck-configFiles-section"},react.createElement("div",null,isAppConfigFilePresent()),react.createElement("div",null,isApiConfigFilePresent())),react.createElement("h4",null,react.createElement(es.x6,null,"Core config")),react.createElement("div",{className:"healthcheck-core-section"},react.createElement("div",null,(()=>{if(!1===healthcheckData.core.debugDisabled){const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Debug mode is on"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Set debug = false; in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,isCacheWorking()),react.createElement("div",null,isSaltUnique()),react.createElement("div",null,(()=>{if(!0===healthcheckData.core.fullBaseUrl){const fullBaseUrl=healthcheckData.core.info.fullBaseUrl.toString();return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Full base url is set to ",fullBaseUrl))}{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Full base url is not set"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Edit App.fullBaseUrl in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.core.validFullBaseUrl)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"App.fullBaseUrl validation OK"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"App.fullBaseUrl does not validate"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Edit App.fullBaseUrl in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.core.fullBaseUrlReachable)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"/healthcheck/status is reachable"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Could not reach the /healthcheck/status with the url specified in App.fullBaseUrl"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Check that the domain name is correct in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})())),react.createElement("h4",null,react.createElement(es.x6,null,"SSL Certificate")),react.createElement("div",{className:"healthcheck-ssl-section"},react.createElement("div",null,!0===healthcheckData.ssl.peerValid?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"SSL peer certificate validates")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"SSL peer certificate does not validate"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"Check ",react.createElement("a",{href:"https://help.passbolt.com/faq/hosting/troubleshoot-ssl",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))),react.createElement("div",null,!0===healthcheckData.ssl.hostValid?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Hostname is matching SSL certificate")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Hostname does not match when validating certificates"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"Check ",react.createElement("a",{href:"https://help.passbolt.com/faq/hosting/troubleshoot-ssl",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))),react.createElement("div",null,!0===healthcheckData.ssl.notSelfSigned?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Not using a self-signed certificate")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"Using a self-signed certificate")))),react.createElement("h4",null,react.createElement(es.x6,null,"Database")),react.createElement("div",{className:"healthcheck-database-section"},react.createElement("div",null,(()=>{if(!0===healthcheckData.database.connect)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The application is able to connect to the database"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The application is not able to connect to the database"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Double check the host, database name, username and password in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.database.connect&&healthcheckData.database.tablesCount){const count=healthcheckData.database.info.tablesCount.toString();return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,{count},{count}," tables found"))}})()),react.createElement("div",null,isDefaultContentPresent())),react.createElement("h4",null,react.createElement(es.x6,null,"GPG Configuration")),react.createElement("div",{className:"healthcheck-gpg-section"},react.createElement("div",null,!0===healthcheckData.gpg.lib?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"PHP GPG Module is installed and loaded")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"PHP GPG Module is not installed or loaded"),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"Install php-gnupg, see ",react.createElement("a",{href:"http://php.net/manual/en/gnupg.installation.php",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))),react.createElement("div",null,isGpgEnvSet()),react.createElement("div",null,isKeyringWrittableByWebServer()),react.createElement("div",null,(()=>{const configurationFilePath=healthcheckData.application.configPath.toString();return!0===healthcheckData.gpg.gpgKeyPublic&&!0===healthcheckData.gpg.gpgKeyPublicReadable&&healthcheckData.gpg.gpgKeyPublicBlock?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The public key file is defined in ",configurationFilePath," and readable.")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The public key file is not defined in ",configurationFilePath," or not readable."),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Ensure the public key file is defined by the variable passbolt.gpg.serverKey.public in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))})()),react.createElement("div",null,(()=>{const configurationFilePath=healthcheckData.application.configPath.toString();return!0===healthcheckData.gpg.gpgKeyPrivate&&!0===healthcheckData.gpg.gpgKeyPrivateReadable&&healthcheckData.gpg.gpgKeyPrivateBlock?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The private key file is defined in ",configurationFilePath," and readable.")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The private key file is not defined in ",configurationFilePath," or not readable."),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Ensure the private key file is defined by the variable passbolt.gpg.serverKey.private in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))})()),react.createElement("div",null,isServerFingerprintMatchingConfigFile()),react.createElement("div",null,isServerPublicKeyDefined()),react.createElement("div",null,doesServerKeyHasValidEmail()),react.createElement("div",null,!0===healthcheckData.gpg.canEncrypt?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The public key can be used to encrypt a message")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The public key cannot be used to encrypt a message"))),react.createElement("div",null,!0===healthcheckData.gpg.canSign?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The public key can be used to sign a message")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The public key cannot be used to sign a message"))),react.createElement("div",null,!0===healthcheckData.gpg.canEncryptSign?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The public and private keys can be used to encrypt and sign a message")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The public and private keys cannot be used to encrypt and sign a message"))),react.createElement("div",null,!0===healthcheckData.gpg.canDecryptVerify?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The private key can be used to decrypt and verify a message")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The private key cannot be used to decrypt and verify a message"))),react.createElement("div",null,!0===healthcheckData.gpg.canVerify?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The public key can be used to verify a signature")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The public key cannot be used to verify a signature"))),react.createElement("div",null,!0===healthcheckData.gpg.isPublicServerKeyGopengpgCompatible?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The server public key format is Gopengpg compatible")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The server public key format is not Gopengpg compatible"))),react.createElement("div",null,!0===healthcheckData.gpg.isPrivateServerKeyGopengpgCompatible?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The server private key format is Gopengpg compatible")):react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The server private key format is not Gopengpg compatible")))),react.createElement("h4",null,react.createElement(es.x6,null,"Application configuration")),react.createElement("div",{className:"healthcheck-app-section"},react.createElement("div",null,(()=>{if(!0===healthcheckData.application.latestVersion&&healthcheckData.application.info.remoteVersion){const version=healthcheckData.application.info.remoteVersion.toString();return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Using latest passbolt version (",{version},")"))}if(!1===healthcheckData.application.latestVersion&&healthcheckData.application.info.remoteVersion){const currentVersion=healthcheckData.application.info.currentVersion.toString(),latestAvailableVersion=healthcheckData.application.info.remoteVersion.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"The installation is not up to date. Currently using ",{currentVersion}," and it should be ",{latestAvailableVersion}),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"See ",react.createElement("a",{href:"https://help.passbolt.com/hosting/update",target:"_blank",rel:"noopener noreferrer"},"this guide")))},react.createElement(info.A,{className:"baseline svg-icon"})))}if(null===healthcheckData.application.latestVersion&&"undefined"===healthcheckData.application.info.remoteVersion)return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"It seems that the server is not able to reach internet."),react.createElement(Tooltip.A,{message:react.createElement("span",null,react.createElement(es.x6,null,"To confirm that you are running the latest version, check ",react.createElement("a",{href:"https://help.passbolt.com/releases/",target:"_blank",rel:"noopener noreferrer"},"all the releases notes")))},react.createElement(info.A,{className:"baseline svg-icon"})))})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.application.sslForce)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Passbolt is configured to force SSL use"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Passbolt is not configured to force SSL use"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Set passbolt.ssl.force to true in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.application.sslFullBaseUrl)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"App.fullBaseUrl is set to HTTPS"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"App.fullBaseUrl is not set to HTTPS"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Check App.fullBaseUrl url scheme in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.application.seleniumDisabled)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Selenium API endpoints are disabled"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Selenium API endpoints are active. This setting should be used for testing only"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Set passbolt.selenium.active to false in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,(()=>{if(!0===healthcheckData.application.robotsIndexDisabled)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Search engine robots are told not to index content"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"Search engine robots are not told not to index content"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Set passbolt.meta.robots to false in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,isSelfRegistrationPluginEnabled()),react.createElement("div",null,(()=>{if(null===healthcheckData.application.registrationClosed.selfRegistrationProvider)return react.createElement("span",{className:"healthcheck-info"},react.createElement(healthcheck_info.A,null),react.createElement(es.x6,null,"Registration is closed, only administrators can add users"));{const selfRegistrationProvider=healthcheckData.application.registrationClosed.selfRegistrationProvider.toString();return react.createElement("span",{className:"healthcheck-info"},react.createElement(healthcheck_info.A,null),react.createElement(es.x6,null,"The Self Registration provider is: ",{selfRegistrationProvider}))}})()),react.createElement("div",null,isRegistrationPublicRemovedFromPassbolt()),react.createElement("div",null,isHostAvailabilityCheckEnabled()),react.createElement("div",null,(()=>{if(!0===healthcheckData.application.jsProd)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"Serving the compiled version of the javascript app"));{const configurationFilePath=healthcheckData.application.configPath.toString();return react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"Using non-compiled Javascript. Passbolt will be slower"),react.createElement(Tooltip.A,{message:react.createElement(es.x6,null,"Set passbolt.js.build in ",configurationFilePath)},react.createElement(info.A,{className:"baseline svg-icon"})))}})()),react.createElement("div",null,!0===healthcheckData.application.emailNotificationEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"All email notifications will be sent")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"Some email notifications are disabled by the administrators")))),react.createElement("h4",null,react.createElement(es.x6,null,"SMTP Settings")),react.createElement("div",{className:"healthcheck-smtp-section"},react.createElement("div",null,!0===healthcheckData.smtpSettings.isEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"The SMTP Settings plugin is enabled")):react.createElement("span",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null),react.createElement(es.x6,null,"The SMTP Settings plugin is disabled"))),react.createElement("div",null,(()=>{if(!1===healthcheckData.smtpSettings.errorMessage)return react.createElement("span",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null),react.createElement(es.x6,null,"SMTP Settings coherent. You may send a test email to validate them"));{const errorMessage=healthcheckData.smtpSettings.errorMessage.toString();return react.createElement("span",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null),react.createElement(es.x6,null,"SMTP Settings errors: ",{errorMessage}))}})()),react.createElement("div",null,whatIsSmtpSettingsSource()),react.createElement("div",null,isSmtpEndpointsDisabled())),this.isUserDirectoryEnabled&&react.createElement(react.Fragment,null,react.createElement("h4",null,react.createElement(es.x6,null,"Directory Sync")),react.createElement("div",{className:"healthcheck-directorySync-section"},react.createElement("div",null,isDirectorySyncEndpointsDisabled()))),this.canIUseSso&&react.createElement(react.Fragment,null,react.createElement("h4",null,react.createElement(es.x6,null,"SSO")),react.createElement("div",{className:"healthcheck-sso-section"},react.createElement("div",null,isSSlCertificationValidationEnabled())))))():react.createElement("div",null,react.createElement(es.x6,null,"The health check API endpoint has been disabled in the server configuration."))),(0,portals.m)(react.createElement(react.Fragment,null,react.createElement("div",{className:"sidebar-help-section"},react.createElement("h3",null,react.createElement(es.x6,null,"What is this page?")),react.createElement("p",null,react.createElement(es.x6,null,"This page is available to help administrators diagnose if something is wrong with a passbolt installation and help keeping it secure.")),react.createElement("p",null,react.createElement(es.x6,null,"The color is really important here so it's easier for you to spot what's not running as expected")),react.createElement("div",{className:"healthcheck-color-legends"},react.createElement("div",{className:"healthcheck-success"},react.createElement(healthcheck_success.A,null)," ",react.createElement(es.x6,null,"Everything is running as expected.")),react.createElement("div",{className:"healthcheck-warning"},react.createElement(triangle_alert.A,null)," ",react.createElement(es.x6,null,"Something inside your configuration is not what we recommend, but you can skip it if it has been done on purpose.")),react.createElement("div",{className:"healthcheck-fail"},react.createElement(healthcheck_error.A,null)," ",react.createElement(es.x6,null,"There is an error with the current configuration, you might want to resolve it.")),react.createElement("div",{className:"healthcheck-info"},react.createElement(healthcheck_info.A,null)," ",react.createElement(es.x6,null,"This is just an information shared, no action is required.")))),react.createElement("div",{className:"sidebar-help-section"},react.createElement("h3",null,react.createElement(es.x6,null,"Something wrong?")),react.createElement("p",null,react.createElement(es.x6,null,"Hang in there! Depending your installation, you might need to check the documentation in order to run the healthcheck from the CLI")),react.createElement("a",{className:"button",href:"https://www.passbolt.com/docs/admin/server-maintenance/passbolt-api-status/",target:"_blank",rel:"noopener noreferrer"},react.createElement(file_text.A,null),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))),document.getElementById("administration-help-panel"))))}}DisplayHealthcheckAdministration.propTypes={context:prop_types_default().object,adminHealthcheckContext:prop_types_default().any,children:prop_types_default().any,administrationWorkspaceContext:prop_types_default().object,t:prop_types_default().func};const DisplayHealthcheckAdministration_DisplayHealthcheckAdministration=(0,AppContext.L)((0,AdministrationWorkspaceContext.Kk)(withAdministrationHealthcheck((0,es.CI)("common")(DisplayHealthcheckAdministration))));DisplayHealthcheckAdministration.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:null,modifiers:["get"],params:[],returns:null},{name:"healthCheckData",docblock:null,modifiers:["get"],params:[],returns:null},{name:"canIUse",docblock:"Returns true if the given feature flag exists and is enabled\n@param {string} featureFlag\n@returns {boolean}",modifiers:[],params:[{name:"featureFlag",type:{name:"string"},optional:!1}],returns:{type:{name:"boolean"}},description:"Returns true if the given feature flag exists and is enabled"},{name:"isUserDirectoryEnabled",docblock:"Returns true if the user has the user directory capability\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the user has the user directory capability"},{name:"canIUseSso",docblock:"Can I use the sso plugin\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Can I use the sso plugin"}],displayName:"DisplayHealthcheckAdministration",props:{context:{description:"",type:{name:"object"},required:!1},adminHealthcheckContext:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}},"./src/shared/models/entity/healthcheck/healthcheckEntity.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>healthcheckEntity});var entity=__webpack_require__("./src/shared/models/entity/abstract/entity.js"),entitySchema=__webpack_require__("./src/shared/models/entity/abstract/entitySchema.js");class SslEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SslEntity.ENTITY_NAME,dto,SslEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["peerValid","hostValid","notSelfSigned"],properties:{peerValid:{type:"boolean"},hostValid:{type:"boolean"},notSelfSigned:{type:"boolean"},info:{type:"string"}}}}get peerValid(){return this._props.peerValid}get hostValid(){return this._props.hostValid}get notSelfSigned(){return this._props.notSelfSigned}get info(){return this._props.info}static get ENTITY_NAME(){return"ssl"}}const sslEntity=SslEntity;class DatabaseEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(DatabaseEntity.ENTITY_NAME,dto,DatabaseEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["tablesCount","info","connect","supportedBackend","defaultContent"],properties:{tablesCount:{type:"boolean"},info:{type:"object",required:["tablesCount"],properties:{tablesCount:{type:"number"}}},connect:{type:"boolean"},supportedBackend:{type:"boolean"},defaultContent:{type:"boolean"}}}}get tablesCount(){return this._props.tablesCount}get info(){return this._props.info}get connect(){return this._props.connect}get supportedBackend(){return this._props.supportedBackend}get defaultContent(){return this._props.defaultContent}static get ENTITY_NAME(){return"database"}}const databaseEntity=DatabaseEntity;class ApplicationEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(ApplicationEntity.ENTITY_NAME,dto,ApplicationEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["info","latestVersion","schema","robotsIndexDisabled","sslForce","sslFullBaseUrl","seleniumDisabled","registrationClosed","configPath","hostAvailabilityCheckEnabled","jsProd","emailNotificationEnabled"],properties:{info:{type:"object",required:["remoteVersion","currentVersion"],properties:{remoteVersion:{type:"string",nullable:!0},currentVersion:{type:"string"}}},latestVersion:{type:"boolean",nullable:!0},schema:{type:"boolean"},robotsIndexDisabled:{type:"boolean"},sslForce:{type:"boolean"},sslFullBaseUrl:{type:"boolean"},seleniumDisabled:{type:"boolean"},configPath:{type:"string"},registrationClosed:{type:"object",required:["isSelfRegistrationPluginEnabled","selfRegistrationProvider","isRegistrationPublicRemovedFromPassbolt"],properties:{isSelfRegistrationPluginEnabled:{type:"boolean"},selfRegistrationProvider:{type:"string",nullable:!0},isRegistrationPublicRemovedFromPassbolt:{type:"boolean"}}},hostAvailabilityCheckEnabled:{type:"boolean"},jsProd:{type:"boolean"},emailNotificationEnabled:{type:"boolean"}}}}get info(){return this._props.info}get latestVersion(){return this._props.latestVersion}getSchema(){return this._props.getSchema}get robotsIndexDisabled(){return this._props.robotsIndexDisabled}get sslForce(){return this._props.sslForce}get sslFullBaseUrl(){return this._props.sslFullBaseUrl}get schema(){return this._props.schema}get currentVersion(){return this._props.currentVersion}get configPath(){return this._props.configPath}get seleniumDisabled(){return this._props.seleniumDisabled}get registrationClosed(){return this._props.registrationClosed}get hostAvailabilityCheckEnabled(){return this._props.hostAvailabilityCheckEnabled}get jsProd(){return this._props.jsProd}get emailNotificationEnabled(){return this._props.emailNotificationEnabled}static get ENTITY_NAME(){return"application"}}const applicationEntity=ApplicationEntity;class GpgEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(GpgEntity.ENTITY_NAME,dto,GpgEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["canDecryptVerify","canVerify","gpgKeyPublicInKeyring","canEncrypt","canDecrypt","canEncryptSign","canSign","gpgHome","gpgKeyPrivateFingerprint","gpgKeyPublicFingerprint","gpgKeyPublicEmail","gpgKeyPublicReadable","gpgKeyPrivateReadable","gpgKey","lib","gpgKeyNotDefault","info","gpgHomeWritable","gpgKeyPublic","gpgKeyPublicBlock","gpgKeyPrivate","gpgKeyPrivateBlock","isPublicServerKeyGopengpgCompatible","isPrivateServerKeyGopengpgCompatible"],properties:{canDecryptVerify:{type:"boolean"},canVerify:{type:"boolean"},gpgKeyPublicInKeyring:{type:"boolean"},canEncrypt:{type:"boolean"},canDecrypt:{type:"boolean"},canEncryptSign:{type:"boolean"},canSign:{type:"boolean"},gpgHome:{type:"boolean"},gpgKeyPrivateFingerprint:{type:"boolean"},gpgKeyPublicFingerprint:{type:"boolean"},gpgKeyPublicEmail:{type:"boolean"},gpgKeyPublicReadable:{type:"boolean"},gpgKeyPrivateReadable:{type:"boolean"},gpgKey:{type:"boolean"},lib:{type:"boolean"},gpgKeyNotDefault:{type:"boolean"},gpgHomeWritable:{type:"boolean"},gpgKeyPublic:{type:"boolean"},gpgKeyPublicBlock:{type:"boolean"},gpgKeyPrivate:{type:"boolean"},gpgKeyPrivateBlock:{type:"boolean"},isPublicServerKeyGopengpgCompatible:{type:"boolean"},isPrivateServerKeyGopengpgCompatible:{type:"boolean"},info:{type:"object",required:["gpgHome","gpgKeyPrivate"],properties:{gpgHome:{type:"string"},gpgKeyPrivate:{type:"string"}}}}}}get canDecryptVerify(){return this._props.canDecryptVerify}get canVerify(){return this._props.canVerify}get gpgKeyPublicInKeyring(){return this._props.gpgKeyPublicInKeyring}get canEncrypt(){return this._props.canEncrypt}get canDecrypt(){return this._props.canDecrypt}get canEncryptSign(){return this._props.canEncryptSign}get canSign(){return this._props.canSign}get gpgHome(){return this._props.gpgHome}get gpgKeyPrivateFingerprint(){return this._props.gpgKeyPrivateFingerprint}get gpgKeyPublicFingerprint(){return this._props.gpgKeyPublicFingerprint}get gpgKeyPublicEmail(){return this._props.gpgKeyPublicEmail}get gpgKeyPublicReadable(){return this._props.gpgKeyPublicReadable}get gpgKeyPrivateReadable(){return this._props.gpgKeyPrivateReadable}get gpgKey(){return this._props.gpgKey}get lib(){return this._props.lib}get gpgKeyNotDefault(){return this._props.gpgKeyNotDefault}get info(){return this._props.info}get gpgHomeWritable(){return this._props.gpgHomeWritable}get gpgKeyPublic(){return this._props.gpgKeyPublic}get gpgKeyPublicBlock(){return this._props.gpgKeyPublicBlock}get gpgKeyPrivate(){return this._props.gpgKeyPrivate}get gpgKeyPrivateBlock(){return this._props.gpgKeyPrivateBlock}get isPublicServerKeyGopengpgCompatible(){return this._props.isPublicServerKeyGopengpgCompatible}get isPrivateServerKeyGopengpgCompatible(){return this._props.isPrivateServerKeyGopengpgCompatible}static get ENTITY_NAME(){return"gpg"}}const gpgEntity=GpgEntity;class EnvironmentEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(EnvironmentEntity.ENTITY_NAME,dto,EnvironmentEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["phpVersion","nextMinPhpVersion","pcre","mbstring","gnupg","intl","image","tmpWritable","logWritable"],properties:{phpVersion:{type:"boolean"},nextMinPhpVersion:{type:"boolean"},pcre:{type:"boolean"},mbstring:{type:"boolean"},gnupg:{type:"boolean"},intl:{type:"boolean"},image:{type:"boolean"},tmpWritable:{type:"boolean"},logWritable:{type:"boolean"},info:{type:"object",required:["phpVersion"],properties:{serverPhpVersion:{"type:":"string"}}}}}}get phpVersion(){return this._props.phpVersion}get nextMinPhpVersion(){return this._props.nextMinPhpVersion}get pcre(){return this._props.pcre}get mbstring(){return this._props.mbstring}get gnupg(){return this._props.gnupg}get intl(){return this._props.intl}get image(){return this._props.image}get tmpWritable(){return this._props.tmpWritable}get logWritable(){return this._props.logWritable}get info(){return this._props.info}get serverPhpVersion(){return this._props.phpVersion}static get ENTITY_NAME(){return"environment"}}const environmentEntity=EnvironmentEntity;class ConfigFileEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(ConfigFileEntity.ENTITY_NAME,dto,ConfigFileEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["app","passbolt"],properties:{app:{type:"boolean"},passbolt:{type:"boolean"}}}}get app(){return this._props.app}get passbolt(){return this._props.passbolt}static get ENTITY_NAME(){return"configFile"}}const configFileEntity=ConfigFileEntity;class CoreEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(CoreEntity.ENTITY_NAME,dto,CoreEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["cache","debugDisabled","salt","fullBaseUrl","validFullBaseUrl","info","fullBaseUrlReachable"],properties:{cache:{type:"boolean"},debugDisabled:{type:"boolean"},salt:{type:"boolean"},fullBaseUrl:{type:"boolean"},validFullBaseUrl:{type:"boolean"},info:{type:"object",required:["fullBaseUrl"],properties:{fullBaseUrl:{type:"string",format:"uri"}}},fullBaseUrlReachable:{type:"boolean"}}}}get cache(){return this._props.cache}get debugDisabled(){return this._props.debugDisabled}get salt(){return this._props.salt}get fullBaseUrl(){return this._props.fullBaseUrl}get validFullBaseUrl(){return this._props.validFullBaseUrl}get info(){return this._props.info}get fullBaseUrlReachable(){return this._props.fullBaseUrlReachable}static get ENTITY_NAME(){return"core"}}const coreEntity=CoreEntity;class SmtpSettingsEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SmtpSettingsEntity.ENTITY_NAME,dto,SmtpSettingsEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["isEnabled","areEndpointsDisabled","errorMessage","source","isInDb"],properties:{isEnabled:{type:"boolean"},areEndpointsDisabled:{type:"boolean"},errorMessage:{anyOf:[{type:"boolean"},{type:"string"}]},source:{type:"string"},isInDb:{type:"boolean"}}}}get isEnabled(){return this._props.isEnabled}get areEndpointsDisabled(){return this._props.areEndpointsDisabled}get errorMessage(){return this._props.errorMessage}get source(){return this._props.source}get isInDb(){return this._props.isInDb}static get ENTITY_NAME(){return"smtpSettings"}}const smtpSettingsEntity=SmtpSettingsEntity;class DirectorySyncEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(DirectorySyncEntity.ENTITY_NAME,dto,DirectorySyncEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["endpointsDisabled"],properties:{endpointsDisabled:{type:"boolean"}}}}get endpointsDisabled(){return this._props.endpointsDisabled}static get ENTITY_NAME(){return"directorySync"}}const directorySyncEntity=DirectorySyncEntity;class SsoEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SsoEntity.ENTITY_NAME,dto,SsoEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["sslHostVerification"],properties:{sslHostVerification:{type:"boolean"}}}}get sslHostVerification(){return this._props.sslHostVerification}static get ENTITY_NAME(){return"sso"}}const ssoEntity=SsoEntity;class HealthcheckEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(HealthcheckEntity.ENTITY_NAME,dto,HealthcheckEntity.getSchema()),options),this._props.ssl&&(this._ssl=new sslEntity(this._props.ssl,{clone:!1})),delete this._props.ssl,this._props.database&&(this._database=new databaseEntity(this._props.database,{clone:!1})),delete this._props.database,this._props.application&&(this._application=new applicationEntity(this._props.application,{clone:!1})),delete this._props.application,this._props.gpg&&(this._gpg=new gpgEntity(this._props.gpg,{clone:!1})),delete this._props.gpg,this._props.environment&&(this._environment=new environmentEntity(this._props.environment,{clone:!1})),delete this._props.environment,this._props.configFile&&(this._configFile=new configFileEntity(this._props.configFile,{clone:!1})),delete this._props.configFile,this._props.core&&(this._core=new coreEntity(this._props.core,{clone:!1})),delete this._props.core,this._props.smtpSettings&&(this._smtpSettings=new smtpSettingsEntity(this._props.smtpSettings,{clone:!1})),delete this._props.smtpSettings,this._props.directorySync&&(this._directorySync=new directorySyncEntity(this._props.directorySync,{clone:!1})),delete this._props.directorySync,this._props.sso&&(this._sso=new ssoEntity(this._props.sso,{clone:!1})),delete this._props.sso}static getSchema(){return{type:"object",required:["database","ssl","application","gpg","configFile","core","smtpSettings"],properties:{database:databaseEntity.getSchema(),ssl:sslEntity.getSchema(),application:applicationEntity.getSchema(),gpg:gpgEntity.getSchema(),environment:environmentEntity.getSchema(),configFile:configFileEntity.getSchema(),core:coreEntity.getSchema(),smtpSettings:smtpSettingsEntity.getSchema(),directorySync:directorySyncEntity.getSchema(),sso:ssoEntity.getSchema()}}}isSSLValid(){const ssl=this._props.ssl;return ssl.peerValid&&ssl.hostValid&&!ssl.notSelfSigned}static get ENTITY_NAME(){return"healthcheck"}get ssl(){return this._ssl||null}get database(){return this._database||null}get application(){return this._application||null}get gpg(){return this._gpg||null}get environment(){return this._environment||null}get configFile(){return this._configFile||null}get core(){return this._core||null}get smtpSettings(){return this._smtpSettings||null}get directorySync(){return this._directorySync||null}get sso(){return this._sso||null}}const healthcheckEntity=HealthcheckEntity}}]);