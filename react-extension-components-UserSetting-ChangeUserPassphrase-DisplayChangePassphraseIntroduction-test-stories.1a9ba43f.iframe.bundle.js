/*! For license information please see react-extension-components-UserSetting-ChangeUserPassphrase-DisplayChangePassphraseIntroduction-test-stories.1a9ba43f.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[1731],{"./src/react-extension/components/UserSetting/ChangeUserPassphrase/DisplayChangePassphraseIntroduction.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Initial:()=>Initial,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayChangePassphraseIntroduction_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),UserSettings=__webpack_require__("./src/shared/lib/Settings/UserSettings.js"),userSettings=__webpack_require__("./src/react-extension/test/fixture/Settings/userSettings.js");var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),UserSettingsContext=__webpack_require__("./src/react-extension/contexts/UserSettingsContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js");class DisplayChangePassphraseIntroduction extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.bindCallbacks()}get defaultState(){return{processing:!1,understandPassphrase:!1,understandPassphraseError:null}}bindCallbacks(){this.handleInputChange=this.handleInputChange.bind(this),this.handleSubmit=this.handleSubmit.bind(this)}async toggleProcessing(){await this.setState({processing:!this.state.processing})}handleInputChange(event){const target=event.target,value="checkbox"===target.type?target.checked:target.value,name=target.name;this.setState({[name]:value})}handleSubmit(event){event.preventDefault(),this.startUpdatePassphrase()}async startUpdatePassphrase(){if(!this.state.processing){if(await this.toggleProcessing(),await this.validateUnderstandPassphrase(),this.hasValidationError())return void await this.toggleProcessing();this.props.userSettingsContext.onProvidePassphraseRequested()}}async validateUnderstandPassphrase(){const understandPassphraseError=!this.state.understandPassphrase;return this.setState({understandPassphraseError})}hasValidationError(){return this.state.understandPassphraseError}hasAllInputDisabled(){return this.state.processing}render(){return react.createElement("div",{className:"grid grid-responsive-12 profile-passphrase"},react.createElement("div",{className:"row"},react.createElement("div",{className:"col7 main-column"},react.createElement("form",{onSubmit:this.handleSubmit},react.createElement("h3",null,react.createElement(es.x6,null,"Before getting started...")),react.createElement("div",{className:"password-management-bg"}),react.createElement("p",null,react.createElement(es.x6,null,"The passphrase is stored on your device and never sent server side.")," ",react.createElement(es.x6,null,"Changing your passphrase will only change it locally.")," ",react.createElement(es.x6,null,"If you have multiple browsers configured, the passphrase will need to be changed in all places individually.")),react.createElement("div",{className:"input checkbox "+(this.state.understandPassphraseError?"error":"")},react.createElement("input",{id:"passphrase-update-understand",type:"checkbox",checked:this.state.understandPassphrase,disabled:this.hasAllInputDisabled(),name:"understandPassphrase",onChange:this.handleInputChange}),react.createElement("label",{htmlFor:"passphrase-update-understand"}," ",react.createElement(es.x6,null,"Ok, I understand what I need to do."))),react.createElement("div",{className:"submit-wrapper"},react.createElement("button",{className:"button primary submit",type:"submit",disabled:this.hasAllInputDisabled()},react.createElement(es.x6,null,"Start"))))),react.createElement("div",{className:"col4 last"},react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"What is the role of the passphrase?")),react.createElement("p",null,react.createElement(es.x6,null,"The passphrase is used to encrypt your secret key, which is required to decrypt your secrets, such as the passwords.")),react.createElement("p",null,react.createElement(es.x6,null,"Without the private key and the passphrase it is not possible to decrypt!")),react.createElement("a",{className:"button",href:"https://help.passbolt.com/tech/auth.html",target:"_blank",rel:"noopener noreferrer"},react.createElement("span",null,react.createElement(es.x6,null,"Learn more")))))))}}DisplayChangePassphraseIntroduction.propTypes={userSettingsContext:prop_types_default().object};const ChangeUserPassphrase_DisplayChangePassphraseIntroduction=(0,UserSettingsContext.tX)((0,es.CI)("common")(DisplayChangePassphraseIntroduction));DisplayChangePassphraseIntroduction.__docgenInfo={description:"This component displays the user profile information",methods:[{name:"defaultState",docblock:"Returns the component default state",modifiers:["get"],params:[],returns:null,description:"Returns the component default state"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"toggleProcessing",docblock:"Toggle the processing mode",modifiers:["async"],params:[],returns:null,description:"Toggle the processing mode"},{name:"handleInputChange",docblock:"Handle form input changes.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle form input changes."},{name:"handleSubmit",docblock:"Whenever the user submits the passphrase\n@param event A form submit event",modifiers:[],params:[{name:"event",description:"A form submit event",optional:!1}],returns:null,description:"Whenever the user submits the passphrase"},{name:"startUpdatePassphrase",docblock:"Start update passphrase process",modifiers:["async"],params:[],returns:null,description:"Start update passphrase process"},{name:"validateUnderstandPassphrase",docblock:"Validate the understand passphrase checkbox.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Validate the understand passphrase checkbox."},{name:"hasValidationError",docblock:"Return true if the form has some validation error\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Return true if the form has some validation error"},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"}],displayName:"DisplayChangePassphraseIntroduction",props:{userSettingsContext:{description:"",type:{name:"object"},required:!1}}};const DisplayChangePassphraseIntroduction_test_stories={title:"Components/UserSetting/DisplayChangePassphraseIntroduction",component:ChangeUserPassphrase_DisplayChangePassphraseIntroduction},Initial=(args=>react.createElement(react_router.fS,{initialEntries:["/"]},react.createElement("div",{className:"page settings"},react.createElement("div",{className:"panel"},react.createElement(react_router.qh,{component:routerProps=>react.createElement(ChangeUserPassphrase_DisplayChangePassphraseIntroduction,{...args,...routerProps})}))))).bind({});Initial.args=Object.assign(function defaultProps(){return{userSettingsContext:{onProvidePassphraseRequested:jest.fn()}}}(),function defaultAppContext(appContext){const defaultAppContext={userSettings:new UserSettings.A(userSettings.A)};return Object.assign(defaultAppContext,appContext||{})}());const __namedExportsOrder=["Initial"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:'args => <MemoryRouter initialEntries={[\'/\']}>\n    <div className="page settings">\n      <div className="panel">\n        <Route component={routerProps => <DisplayChangePassphraseIntroduction {...args} {...routerProps} />}></Route>\n      </div>\n    </div>\n  </MemoryRouter>',...Initial.parameters?.docs?.source}}}},"./src/react-extension/contexts/UserSettingsContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{tX:()=>withUserSettings});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const UserSettingsContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({state:null,oldPassphrase:null,onIntroductionPassphraseRequested:()=>{},onProvidePassphraseRequested:()=>{},onCheckProvidePassphraseRequested:()=>{},onUpdatePassphraseRequested:()=>{},onGoToIntroductionPassphraseRequested:()=>{},onDownloadRecoveryKitRequested:()=>{},onUpdateSecurityTokenRequested:()=>{},onUpdateUserLocaleRequested:()=>{}});class UserSettingsContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{state:UserSettingsContextState.INITIAL_STATE,oldPassphrase:null,onIntroductionPassphraseRequested:this.onIntroductionPassphraseRequested.bind(this),onProvidePassphraseRequested:this.onProvidePassphraseRequested.bind(this),onCheckProvidePassphraseRequested:this.onCheckProvidePassphraseRequested.bind(this),onUpdatePassphraseRequested:this.onUpdatePassphraseRequested.bind(this),onGoToIntroductionPassphraseRequested:this.onGoToIntroductionPassphraseRequested.bind(this),onDownloadRecoveryKitRequested:this.onDownloadRecoveryKitRequested.bind(this),onUpdateSecurityTokenRequested:this.onUpdateSecurityTokenRequested.bind(this),onUpdateLocaleUserRequested:this.handleUpdateLocaleUserRequested.bind(this)}}async onIntroductionPassphraseRequested(){await this.setState({state:UserSettingsContextState.PASSPHRASE_INTRODUCTION})}async onProvidePassphraseRequested(){await this.setState({state:UserSettingsContextState.PASSPHRASE_TO_PROVIDE_REQUESTED})}async onCheckProvidePassphraseRequested(passphrase){await this.props.context.port.request("passbolt.auth.verify-passphrase",passphrase),await this.setState({state:UserSettingsContextState.PASSPHRASE_TO_PROVIDE_CHECKED,oldPassphrase:passphrase})}async onGoToIntroductionPassphraseRequested(){await this.setState({state:UserSettingsContextState.PASSPHRASE_INTRODUCTION,oldPassphrase:null})}async onUpdatePassphraseRequested(passphrase){await this.props.context.port.request("passbolt.user.update-private-key",this.state.oldPassphrase,passphrase),await this.setState({state:UserSettingsContextState.PASSPHRASE_UPDATED,oldPassphrase:null})}async onDownloadRecoveryKitRequested(){await this.props.context.port.request("passbolt.keyring.download-my-private-key")}async onUpdateSecurityTokenRequested(securityTokenDto){await this.props.context.port.request("passbolt.users.update-security-token",securityTokenDto)}async handleUpdateLocaleUserRequested(localeDto){await this.props.context.port.request("passbolt.locale.update-user-locale",localeDto)}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(UserSettingsContext.Provider,{value:this.state},this.props.children)}}UserSettingsContextProvider.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any,children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};(0,_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.L)(UserSettingsContextProvider);function withUserSettings(WrappedComponent){return class withUserSettings extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(UserSettingsContext.Consumer,null,(userSettingsContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{userSettingsContext,...this.props})))}}}const UserSettingsContextState={INITIAL_STATE:"Initial State",PASSPHRASE_INTRODUCTION:"Passphrase Introduction",PASSPHRASE_TO_PROVIDE_REQUESTED:"Passphrase To Provide Requested",PASSPHRASE_TO_PROVIDE_CHECKED:"Passphrase To Provide Checked",PASSPHRASE_UPDATED:"Passphrase Updated"};UserSettingsContextProvider.__docgenInfo={description:"The related context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"onIntroductionPassphraseRequested",docblock:"Whenever the introduction passphrase is requested",modifiers:["async"],params:[],returns:null,description:"Whenever the introduction passphrase is requested"},{name:"onProvidePassphraseRequested",docblock:"Whenever the provide passphrase is requested",modifiers:["async"],params:[],returns:null,description:"Whenever the provide passphrase is requested"},{name:"onCheckProvidePassphraseRequested",docblock:"Whenever the check provide passphrase is requested\n@param passphrase A passphrase",modifiers:["async"],params:[{name:"passphrase",description:"A passphrase",optional:!1}],returns:null,description:"Whenever the check provide passphrase is requested"},{name:"onGoToIntroductionPassphraseRequested",docblock:"Whenever the user wants to go back to the passphrase introduction",modifiers:["async"],params:[],returns:null,description:"Whenever the user wants to go back to the passphrase introduction"},{name:"onUpdatePassphraseRequested",docblock:"Whenever the update passphrase is requested\n@param {string} passphrase The new passphrase",modifiers:["async"],params:[{name:"passphrase",description:"The new passphrase",type:{name:"string"},optional:!1}],returns:null,description:"Whenever the update passphrase is requested"},{name:"onDownloadRecoveryKitRequested",docblock:"Whenever the download of the recovery kit is requested",modifiers:["async"],params:[],returns:null,description:"Whenever the download of the recovery kit is requested"},{name:"onUpdateSecurityTokenRequested",docblock:"Whenever the update security token is requested\n@param securityTokenDto The security token DTO",modifiers:["async"],params:[{name:"securityTokenDto",description:"The security token DTO",optional:!1}],returns:null,description:"Whenever the update security token is requested"},{name:"handleUpdateLocaleUserRequested",docblock:"Whenever the update of the locale is requested\n@param localeDto The locale DTO",modifiers:["async"],params:[{name:"localeDto",description:"The locale DTO",optional:!1}],returns:null,description:"Whenever the update of the locale is requested"}],displayName:"UserSettingsContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}}},"./src/react-extension/test/fixture/Settings/userSettings.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={"user.settings.trustedDomain":new URL(window.location.href).origin,"user.firstname":"Ada","user.id":"f848277c-5398-58f8-a82a-72397af2d450","user.lastname":"Lovelace","user.settings.securityToken.code":"TST","user.settings.securityToken.color":"#000000","user.settings.securityToken.textColor":"#FFFFFF","user.username":"ada@passbolt.com","user.settings.locale":"en-UK","user.settings.theme":"default"}},"./src/shared/lib/Settings/UserSettings.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>UserSettings});class UserSettings{constructor(settings){this.settings=settings}get id(){return this.settings["user.id"]}get fullName(){return`${this.settings["user.firstname"]} ${this.settings["user.lastname"]}`}get username(){return this.settings["user.username"]}getTheme(){return this.settings["user.settings.theme"]}getTrustedDomain(){return this.settings["user.settings.trustedDomain"]}getSecurityToken(){return{code:this.settings["user.settings.securityToken.code"],backgroundColor:this.settings["user.settings.securityToken.color"],textColor:this.settings["user.settings.securityToken.textColor"]}}get locale(){return this.settings["user.settings.locale"]}}}}]);