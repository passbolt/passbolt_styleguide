/*! For license information please see react-extension-components-Desktop-GetStarted-GetStartedDesktop-test-stories.5ce1591e.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[715],{"./src/react-extension/components/Desktop/GetStarted/GetStartedDesktop.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>GetStartedDesktop_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),ImportAccountKitContext=__webpack_require__("./src/react-extension/contexts/Desktop/ImportAccountKitContext.js");class GetStartedDesktop extends react.Component{constructor(props){super(props),this.bindEventHandlers()}bindEventHandlers(){this.handleStart=this.handleStart.bind(this)}handleStart(){this.props.importAccountKitContext.navigate(ImportAccountKitContext.S3.IMPORT_ACCOUNT_KIT)}render(){return react.createElement("div",{className:"get-started-desktop"},react.createElement("h1",null,react.createElement(es.x6,null,"Get started !")),react.createElement("p",{className:"get-started-description"},react.createElement(es.x6,null,"You need to upload an account kit to start using the desktop app. ")," ",react.createElement("br",null),react.createElement(es.x6,null,"Please follow these instructions:")),react.createElement("p",null,react.createElement("span",{className:"step"},"1"),"Authenticate on your browser extension"),react.createElement("p",null,react.createElement("span",{className:"step"},"2"),"Go to your profile"),react.createElement("p",null,react.createElement("span",{className:"step"},"3"),"Go to the Desktop app setup section"),react.createElement("p",null,react.createElement("span",{className:"step"},"4"),"Download the account kit"),react.createElement("div",{className:"form-actions"},react.createElement("button",{type:"button",onClick:this.handleStart,className:"button primary form"},react.createElement(es.x6,null,"Start"))))}}GetStartedDesktop.propTypes={t:prop_types_default().func,importAccountKitContext:prop_types_default().any.isRequired};const GetStarted_GetStartedDesktop=(0,ImportAccountKitContext.a0)((0,es.CI)("common")(GetStartedDesktop));GetStartedDesktop.__docgenInfo={description:"",methods:[{name:"bindEventHandlers",docblock:"Bind event handlers\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Bind event handlers"},{name:"handleStart",docblock:"Handle start button click.\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Handle start button click."}],displayName:"GetStartedDesktop",props:{t:{description:"",type:{name:"func"},required:!1},importAccountKitContext:{description:"",type:{name:"any"},required:!0}}};const GetStartedDesktop_test_stories={title:"Components/Desktop/GetStartedDesktop",component:GetStarted_GetStartedDesktop},Default=(()=>react.createElement("div",{id:"container",className:"container page login"},react.createElement("div",{className:"content"},react.createElement("div",{className:"login-form"},react.createElement(GetStarted_GetStartedDesktop,null))))).bind({});Default.parameters={css:"ext_authentication"};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form"><GetStartedDesktop />\n      </div>\n    </div>\n  </div>',...Default.parameters?.docs?.source}}}},"./src/react-extension/contexts/Desktop/ImportAccountKitContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S3:()=>ImportAccountKitWorkflowStates,a0:()=>withImportAccountKitContext,iM:()=>ImportAccountKitContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const ImportAccountKitWorkflowStates={GET_STARTED:"Get started",IMPORT_ACCOUNT_KIT:"Import account kit",VERIFY_PASSPHRASE:"Verify user passphrase",IMPORTING_ACCOUNT:"Importing account",SIGNING_IN:"Sign in",UNEXPECTED_ERROR_STATE:"Unexpected error state"},ImportAccountKitContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({accountKit:null,state:null,unexpectedError:null,navigate:()=>{},isProcessing:()=>{},setProcessing:()=>{},verifyAccountKit:()=>{},importAccountAndConnect:()=>{},flushAccountKit:()=>{}});class ImportAccountKitContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{accountKit:null,state:ImportAccountKitWorkflowStates.GET_STARTED,processing:!1,unexpectedError:null,isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),navigate:this.navigate.bind(this),verifyAccountKit:this.verifyAccountKit.bind(this),verifyPassphrase:this.verifyPassphrase.bind(this),flushAccountKit:this.flushAccountKit.bind(this)}}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}flushAccountKit(){this.setState({accountKit:null})}navigate(state){this.setState({state})}async verifyAccountKit(accountKit){try{this.setProcessing(!0);const accountKitValidated=await this.props.context.port.request("passbolt.background.verify-account-kit",accountKit);return this.setState({state:ImportAccountKitWorkflowStates.VERIFY_PASSPHRASE,accountKit:accountKitValidated})}catch(error){return console.error(error),this.setState({unexpectedError:error,state:ImportAccountKitWorkflowStates.UNEXPECTED_ERROR_STATE})}finally{this.setProcessing(!1)}}async verifyPassphrase(passphrase){try{await this.props.context.port.request("passbolt.auth-import.verify-passphrase",passphrase),this.navigate(ImportAccountKitWorkflowStates.IMPORTING_ACCOUNT),await this.importAccountAndConnect(passphrase)}catch(error){throw console.error(error),error}finally{this.setProcessing(!1)}}async importAccountAndConnect(passphrase){try{this.flushAccountKit(),await this.props.context.port.request("passbolt.auth-import.import-account"),this.navigate(ImportAccountKitWorkflowStates.SIGNING_IN),await this.props.context.port.request("passbolt.auth.login",passphrase)}catch(error){return console.error(error),this.setState({unexpectedError:error,state:ImportAccountKitWorkflowStates.UNEXPECTED_ERROR_STATE})}}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ImportAccountKitContext.Provider,{value:this.state},this.props.children)}}ImportAccountKitContextProvider.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any,children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};(0,_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.L)(ImportAccountKitContextProvider);function withImportAccountKitContext(WrappedComponent){return class WithImportAccountKitContext extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ImportAccountKitContext.Consumer,null,(importAccountKitContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{importAccountKitContext,...this.props})))}}}ImportAccountKitContextProvider.__docgenInfo={description:"The account kit context provider.\nHandle the business logic of the account kit importation and the manage the workflow.",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"flushAccountKit",docblock:"Flush the account kit\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Flush the account kit"},{name:"navigate",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"state",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"verifyAccountKit",docblock:"When the user upload its account we request to the Background webview to verify it.\n@param   {object} the account kit to upload.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"accountKit",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user upload its account we request to the Background webview to verify it."},{name:"verifyPassphrase",docblock:"When the user request to verify passphrase to the Background webview to verify it.\n@param   {string} passphrase the passphrase to verify.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"passphrase",description:"the passphrase to verify.",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user request to verify passphrase to the Background webview to verify it."},{name:"importAccountAndConnect",docblock:"When the user has validated the passphrase we request to import and sign the user\n@param   {string} passphrase the user's private key passphrase.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"passphrase",description:"the user's private key passphrase.",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user has validated the passphrase we request to import and sign the user"}],displayName:"ImportAccountKitContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}}}}]);