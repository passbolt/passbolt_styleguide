"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[7360],{"./src/react-quickaccess/components/Search/Search.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Initial:()=>Initial,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Search_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),search=__webpack_require__("./src/img/svg/search.svg");class Search extends react.Component{constructor(props){super(props),this.bindCallbacks(),this.createReferences()}componentDidMount(){this.focus()}bindCallbacks(){this.handleInputChange=this.handleInputChange.bind(this)}createReferences(){this.searchInputRef=react.createRef()}get translate(){return this.props.t}focus(){(document.activeElement===document.body||null===document.activeElement)&&this.searchInputRef.current.focus()}handleInputChange(event){this.props.context.updateSearch(event.target.value)}render(){return react.createElement("div",{className:"search-wrapper"},react.createElement("div",{className:"input search required"},react.createElement("label",{className:"visually-hidden"},react.createElement(es.x6,null,"Search")),react.createElement("input",{name:"search",maxLength:"50",type:"search",placeholder:this.translate("Search"),autoComplete:"off",ref:this.searchInputRef,onChange:this.handleInputChange,value:this.props.context.search}),react.createElement("div",{className:"search-button-wrapper"},react.createElement("button",{className:"button button-transparent",value:this.translate("Search"),type:"submit"},react.createElement(search.A,null),react.createElement("span",{className:"visuallyhidden"},react.createElement(es.x6,null,"Search"))))))}}Search.propTypes={context:prop_types_default().any,t:prop_types_default().func};const Search_Search=(0,AppContext.L)((0,es.CI)("common",{withRef:!0})(Search));Search.__docgenInfo={description:"",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"createReferences",docblock:"Create elements references",modifiers:[],params:[],returns:null,description:"Create elements references"},{name:"translate",docblock:"Get the translate function\n@returns {function(...[*]=)}",modifiers:["get"],params:[],returns:{},description:"Get the translate function"},{name:"focus",docblock:null,modifiers:[],params:[],returns:null},{name:"handleInputChange",docblock:null,modifiers:[],params:[{name:"event",optional:!1,type:null}],returns:null}],displayName:"Search",props:{context:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var MockPort=__webpack_require__("./src/react-extension/test/mock/MockPort.js");const Search_test_stories={title:"Components/QuickAccess/Search",component:Search_Search},Template=({context,...args})=>react.createElement(AppContext.A.Provider,{value:context},react.createElement(react_router.MemoryRouter,{initialEntries:["/"]},react.createElement(react_router.Route,{component:routerProps=>react.createElement("div",{className:"container quickaccess"},react.createElement(Search_Search,{...args,...routerProps}))})));Template.propTypes={context:prop_types_default().object};const Initial=Template.bind({});Initial.args={context:function defaultAppContext(appContext){const defaultAppContext={port:new MockPort.A,updateSearch:()=>{},search:""};return Object.assign(defaultAppContext,appContext||{})}()},Initial.parameters={css:"ext_quickaccess"};const __namedExportsOrder=["Initial"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:"({\n  context,\n  ...args\n}) => <AppContext.Provider value={context}>\n    <MemoryRouter initialEntries={['/']}>\n      <Route component={routerProps => <div className=\"container quickaccess\"><Search {...args} {...routerProps} /></div>} />\n    </MemoryRouter>\n  </AppContext.Provider>",...Initial.parameters?.docs?.source}}}},"./src/img/svg/search.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgSearch(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({width:25,height:24,fill:"none",viewBox:"0 0 25 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M11.597 19a8 8 0 1 0 0-16 8 8 0 0 0 0 16M21.597 21l-4.35-4.35"})))}},"./src/react-extension/test/mock/MockPort.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function delay(t,v){return new Promise((resolve=>{setTimeout((()=>resolve(v)),t)}))}__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=class MockPort{constructor(storage){this.storage=storage,this.onListeners={},this.requestListeners={},this.emitListener={},this.onConnectErrorHandler={}}async emit(name,eventObject){let result;return console.debug(`PORT EMIT: ${name}`),console.debug("Arguments",eventObject),this.emitListener[name]?(result=await this.emitListener[name](eventObject),console.debug("response: ",result)):console.debug(`The emit ${name} has not been mocked`),delay(0,result)}on(name,callback){console.debug(`PORT ON: ${name}`),console.debug("PORT ON PARAMETERS:",callback),this.addOnListener(name,callback)}async request(name){let result;if(console.debug(`PORT REQUEST: ${name}`),console.debug("PORT REQUEST PARAMETERS:",Array.prototype.slice.call(arguments)),this.requestListeners[name]){const listenerArguments=Array.prototype.slice.call(arguments,1,arguments.length);console.debug("listenerArguments",listenerArguments),listenerArguments.push(this.storage),console.debug("listenerArguments",listenerArguments),result=await this.requestListeners[name](...listenerArguments),console.debug("response: ",result)}else console.debug(`The request ${name} has not been mocked`);return delay(0,result)}addEmitListener(name){console.debug(`PORT EMIT: ${name}`),console.debug("PORT EMIT PARAMETERS:",Array.prototype.slice.call(arguments))}addOnListener(name,callback){this.emitListener[name]=callback}addRequestListener(name,callback){this.requestListeners[name]=callback}onConnectError(callback){this.onConnectErrorHandler.callback=callback}}}}]);