/*! For license information please see 242.57318868.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[242],{"./src/shared/models/entity/abstract/entity.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class Entity{constructor(dto,options={}){(options?.clone??!0)&&(dto=JSON.parse(JSON.stringify(dto))),this._props=dto}toDto(){return JSON.parse(JSON.stringify(this))}toJSON(){return this._props}_hasProp(propName){if(!propName.includes(".")){const normalizedPropName=Entity._normalizePropName(propName);return Object.prototype.hasOwnProperty.call(this._props,normalizedPropName)}try{return this._getPropByPath(propName),!0}catch(error){return!1}}_getPropByPath(path){return Entity._normalizePropName(path).split(".").reduce(((obj,i)=>{if(Object.prototype.hasOwnProperty.call(obj,i))return obj[i];throw new Error}),this._props)}static _normalizePropName(name){return name.replace(/([A-Z])/g,((x,y)=>`_${y.toLowerCase()}`)).replace(/\._/,".").replace(/^_/,"").replace(/^\./,"")}}const __WEBPACK_DEFAULT_EXPORT__=Entity},"./src/shared/models/entity/abstract/entityCollection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _entityCollectionError__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/models/entity/abstract/entityCollectionError.js"),_entityValidationError__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/models/entity/abstract/entityValidationError.js");class EntityCollection{constructor(dtos=[],options={}){const clone=options?.clone??!0;this._items=[],clone&&(dtos=JSON.parse(JSON.stringify(dtos))),this._props=dtos}toDto(){return JSON.parse(JSON.stringify(this._items))}toJSON(){return this.toDto()}get items(){return this._items}get length(){return this._items.length}[Symbol.iterator](){let i=0;return{next:()=>i<this._items.length?{value:this._items[i++],done:!1}:{done:!0}}}getAll(propName,search){if("string"!=typeof propName)throw new TypeError("EntityCollection excludeAll expects propName to be string.");if("string"!=typeof search)throw new TypeError("EntityCollection excludeAll expects search to be string.");return this._items.filter((item=>Object.prototype.hasOwnProperty.call(item._props,propName)&&item._props[propName]===search))}getFirst(propName,search){if("string"!=typeof propName||"string"!=typeof search)throw new TypeError("EntityCollection getFirst by expect propName and search to be strings");const found=this.getAll(propName,search);if(found&&found.length)return found[0]}extract(propName){if("string"!=typeof propName)throw new TypeError("EntityCollection extract expects propName to be a string.");return this._items.reduce(((accumulator,item)=>(void 0!==item._props[propName]&&accumulator.push(item._props[propName]),accumulator)),[])}push(item){return this._items.push(item),this._items.length}unshift(item){return this._items.unshift(item),this._items.length}filterByPropertyValueIn(propName,needles,excludeUndefined=!0){if("string"!=typeof propName)throw new TypeError("EntityCollection filterByPropertyValueIn expects propName to be a string.");if(!Array.isArray(needles))throw new TypeError("EntityCollection filterByPropertyValueIn expects needles to be an array.");this.filterByCallback((item=>{const isPropertyDefined=Object.prototype.hasOwnProperty.call(item._props,propName);return!(excludeUndefined&&!isPropertyDefined||isPropertyDefined&&!needles.includes(item._props[propName]))}))}filterByCallback(callback){if("function"!=typeof callback)throw new TypeError("EntityCollection filterByCallback expects callback to be a function.");for(let currentIndex=this._items.length-1;currentIndex>=0;currentIndex--)callback(this._items[currentIndex])||this._items.splice(currentIndex,1)}assertUniqueByProperty(propName,message){const ruleId=`unique_${propName}`,propValues=this.extract(propName),uniqueElements=new Set;message=message||`The collection should only contain items with unique values for the property: ${propName}.`,propValues.forEach(((propValue,index)=>{if(uniqueElements.add(propValue),index!==uniqueElements.size-1)throw new _entityCollectionError__WEBPACK_IMPORTED_MODULE_0__.A(index,ruleId,message)}))}assertNotExist(propName,propValue,options={}){if(void 0===propValue)return;let haystackSet=options?.haystackSet;if(!haystackSet){const propValues=this.extract(propName);haystackSet=new Set(propValues)}if(haystackSet.has(propValue)){const error=new _entityValidationError__WEBPACK_IMPORTED_MODULE_1__.A,message=options?.message||`The collection already includes an element that has a property (${propName}) with an identical value.`;throw error.addError(propName,"unique",message),error}}}const __WEBPACK_DEFAULT_EXPORT__=EntityCollection},"./src/shared/models/entity/abstract/entityCollectionError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class EntityCollectionError extends Error{constructor(position,rule,message){if(super(message=message||"Entity collection error."),"number"!=typeof position)throw new TypeError("EntityCollectionError requires a valid position");if(!rule||"string"!=typeof rule)throw new TypeError("EntityCollectionError requires a valid rule");if(!message||"string"!=typeof message)throw new TypeError("EntityCollectionError requires a valid message");this.position=position,this.rule=rule}}const __WEBPACK_DEFAULT_EXPORT__=EntityCollectionError},"./src/shared/models/entity/abstract/entityV2.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>entityV2});var entitySchema=__webpack_require__("./src/shared/models/entity/abstract/entitySchema.js"),entity=__webpack_require__("./src/shared/models/entity/abstract/entity.js"),assertString=__webpack_require__("./node_modules/validator/es/lib/util/assertString.js"),entityValidationError=__webpack_require__("./src/shared/models/entity/abstract/entityValidationError.js");const snakeCaseToCamelCase=text=>text?.replace(/_([a-z])/g,((match,letter)=>letter.toUpperCase()));var entityCollection=__webpack_require__("./src/shared/models/entity/abstract/entityCollection.js");const SCALAR_PROPERTY_TYPES=["string","number","integer","boolean"];class EntityV2 extends entity.A{static _cachedSchema={};constructor(dtos={},options={}){const validate=options?.validate??!0;super(dtos,options),this.marshall(),validate&&this.validateSchema({schema:options?.schema,skipSchemaAssociationValidation:options?.skipSchemaAssociationValidation}),this.createAssociations(options),validate&&this.validateBuildRules(options?.validateBuildRules)}marshall(){}validate(options={}){try{this.validateSchema({schema:options?.schema,skipSchemaAssociationValidation:options?.skipSchemaAssociationValidation}),this.validateBuildRules(options?.validateBuildRules),this.validateAssociations(options)}catch(error){if(!(error instanceof entityValidationError.A))throw error;return error}return null}validateSchema(option=null){let schema=option?.schema??this.cachedSchema;if(option?.skipSchemaAssociationValidation){schema={...schema};const requiredAssociations=Object.keys(this.constructor.associations),required=schema.required.filter((requiredSchema=>!requiredAssociations.includes(requiredSchema)));schema.required=required}this._props=entitySchema.A.validate(this.constructor.name,this._props,schema)}get cachedSchema(){return this.constructor._cachedSchema[this.constructor.name]||(this.constructor._cachedSchema[this.constructor.name]=this.constructor.getSchema()),this.constructor._cachedSchema[this.constructor.name]}static getSchema(){throw new Error("The entity class should declare its schema.")}validateBuildRules(options={}){}createAssociations(options={}){if(Object.keys(this.constructor.associations).length>0){const validationErrors=new entityValidationError.A;for(const[associationProp,associationEntityClass]of Object.entries(this.constructor.associations))try{if(this._props[associationProp]){this[`_${snakeCaseToCamelCase(associationProp)}`]=new associationEntityClass(this._props[associationProp],{...options,clone:!1}),delete this._props[associationProp]}}catch(error){if(!(error instanceof entityValidationError.A))throw error;validationErrors.addAssociationError(associationProp,error)}if(validationErrors.hasErrors())throw validationErrors}}static get associations(){return{}}get(propName){(0,assertString.A)(propName);const schemaProperties=this.constructor.getSchema().properties[propName];if(!schemaProperties)throw new Error(`The property "${propName}" has no schema definition.`);if(!SCALAR_PROPERTY_TYPES.includes(schemaProperties?.type))throw new Error('The property "associated_entity" should reference scalar properties only.');return this._props[propName]}set(propName,value,options={}){(0,assertString.A)(propName);const validate=options?.validate??!0;if(this.isAssociation(propName))this.setAssociation(propName,value,options);else{const basePropName=propName.split(".")[0],schemaProperties=this.constructor.getSchema().properties[basePropName];if(!schemaProperties)throw new Error(`The property "${basePropName}" has no schema definition.`);if("array"===schemaProperties?.type)this.setArrayProp(propName,value,options);else{if(schemaProperties?.type&&!SCALAR_PROPERTY_TYPES.includes(schemaProperties?.type))throw new Error('The property "associated_entity" should reference scalar properties only.');if(schemaProperties?.anyOf?.some((property=>!SCALAR_PROPERTY_TYPES.includes(property.type))))throw new Error('The property "associated_entity" should reference scalar properties only.');validate&&entitySchema.A.validateProp(basePropName,value,schemaProperties),this._props[basePropName]=value}}}setArrayProp(propName,value,options){(0,assertString.A)(propName);const propNameSplit=propName.split("."),basePropName=propNameSplit[0];let index=null;const schemaProperties=this.constructor.getSchema().properties[basePropName],validate=options?.validate??!0;if(2!==propNameSplit.length)throw new Error(`The property "${propNameSplit[0]}" has no index passed.`);{const arrayIndexMatch=propNameSplit[1].match(/^(\d+)$/);if(!arrayIndexMatch)throw new Error(`The property "${propNameSplit[0]}" has an invalid index format. Expected format: digits.`);index=parseInt(arrayIndexMatch[1],10)}if(!SCALAR_PROPERTY_TYPES.includes(schemaProperties.items.type))throw new Error('The property "associated_entity" with array type should reference scalar properties only.');validate&&entitySchema.A.validateProp(basePropName,value,schemaProperties.items),this._props[basePropName]||(this._props[basePropName]=[]),null!=value?this._props[basePropName][index]=value:this._props[basePropName].splice(index,1)}setCollection(propName,value,options){(0,assertString.A)(propName);const propNameSplit=propName.split("."),collectionPropName=propNameSplit[0];let index=null;if(1===propNameSplit.length)value instanceof this.constructor.associations[propName]?this[`_${collectionPropName}`]=value:this[`_${collectionPropName}`]=new this.constructor.associations[propName](value,options);else{if(!(propNameSplit.length>1))throw new Error(`The property "${propNameSplit[0]}" has no index passed.`);{const arrayIndexMatch=propNameSplit[1].match(/^(\d+)$/);if(!arrayIndexMatch)throw new Error(`The property "${propNameSplit[0]}" has an invalid index format. Expected format: digits.`);index=parseInt(arrayIndexMatch[1],10)}}if(!this[`_${collectionPropName}`])throw new Error(`The collection "${propNameSplit[0]}" has no item".`);if(null!=value)if(propNameSplit.length>2){if(!this[`_${collectionPropName}`]._items[index])throw new Error(`The collection "${propNameSplit[0]}" has no item at the index "${propNameSplit[1]}".`);const concatenatedPropName=propNameSplit.slice(2).join(".");this[`_${collectionPropName}`]._items[index].set(concatenatedPropName,value,options)}else this[`_${collectionPropName}`].push(value,options,options);else this[`_${collectionPropName}`].items.splice(index,1)}setAssociation(propName,value,options={}){if((0,assertString.A)(propName),this.isAssociation(propName)){const propNameSplit=propName.split("."),associationPropName=snakeCaseToCamelCase(propNameSplit[0]);if(propNameSplit.length>1)if(this[`_${associationPropName}`]||(this[`_${associationPropName}`]=new this.constructor.associations[propNameSplit[0]]({},{validate:!1})),this[`_${associationPropName}`]instanceof entityCollection.A){const collectionPropName=propNameSplit.toSpliced(0,1,associationPropName).join(".");this.setCollection(collectionPropName,value,options)}else{const concatenatedPropName=propNameSplit.slice(1).join(".");this[`_${associationPropName}`].set(concatenatedPropName,value,options)}else value instanceof this.constructor.associations[propName]?this[`_${associationPropName}`]=value:this[`_${associationPropName}`]=new this.constructor.associations[propName](value,options)}}validateAssociations(options={}){const validationErrors=new entityValidationError.A;if(Object.keys(this.constructor.associations).length>0&&Object.keys(this.constructor.associations).forEach((propsName=>{const propsNameToCamelCase=snakeCaseToCamelCase(propsName);if(this[`_${propsNameToCamelCase}`]){const errors=this[propsNameToCamelCase].validate(options);errors&&validationErrors.addAssociationError(propsName,errors)}})),validationErrors.hasErrors())throw validationErrors}diffProps(compareEntity){if(!(compareEntity instanceof EntityV2))throw new TypeError('The property "compareEntity" should be of "EntityV2" type.');const diff={},schema=this.constructor.getSchema(),propertiesNamesToCompare=Object.keys(schema.properties).filter((propertyName=>SCALAR_PROPERTY_TYPES.includes(schema.properties[propertyName].type)));for(const propertyName of propertiesNamesToCompare){const propValue=this.get(propertyName),comparedPropValue=compareEntity.get(propertyName);propValue!==comparedPropValue&&(diff[propertyName]=comparedPropValue)}return diff}hasDiffProps(compareEntity){const diff=this.diffProps(compareEntity);return Object.keys(diff).length>0}isAssociation(propName){const mainPropName=propName.split(".")[0];return Boolean(this.constructor.associations?.[mainPropName])}}const entityV2=EntityV2}}]);