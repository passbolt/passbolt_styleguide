/*! For license information please see react-extension-components-Administration-DisplayHealthcheckAdministration-DisplayHealthcheckAdministration-test-stories.7fac5fc9.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[2255],{"./src/react-extension/components/Administration/DisplayHealthcheckAdministration/DisplayHealthcheckAdministration.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Initial:()=>Initial,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayHealthcheckAdministration_test_stories});var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),react=__webpack_require__("./node_modules/react/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),apiClient=__webpack_require__("./src/shared/lib/apiClient/apiClient.js");const healthcheck_HealthcheckService=class HealthcheckService{constructor(apiClientOptions){this.apiClientOptions=apiClientOptions,this.initClient()}async fetchHealthcheck(){this.initClient();const result=await this.apiClient.findAll();return result?.body}initClient(){this.apiClientOptions.setResourceName("healthcheck"),this.apiClient=new apiClient.O(this.apiClientOptions)}};var entity=__webpack_require__("./src/shared/models/entity/abstract/entity.js"),entitySchema=__webpack_require__("./src/shared/models/entity/abstract/entitySchema.js");class SslEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SslEntity.ENTITY_NAME,dto,SslEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["peerValid","hostValid","notSelfSigned"],properties:{peerValid:{type:"boolean"},hostValid:{type:"boolean"},notSelfSigned:{type:"boolean"},info:{type:"string"}}}}get peerValid(){return this._props.peerValid}get hostValid(){return this._props.hostValid}get notSelfSigned(){return this._props.notSelfSigned}get info(){return this._props.info}static get ENTITY_NAME(){return"ssl"}}const sslEntity=SslEntity;class DatabaseEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(DatabaseEntity.ENTITY_NAME,dto,DatabaseEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["tablesCount","info","connect","supportedBackend","defaultContent"],properties:{tablesCount:{type:"boolean"},info:{type:"object",required:["tablesCount"],properties:{tablesCount:{type:"number"}}},connect:{type:"boolean"},supportedBackend:{type:"boolean"},defaultContent:{type:"boolean"}}}}get tablesCount(){return this._props.tablesCount}get info(){return this._props.info}get connect(){return this._props.connect}get supportedBackend(){return this._props.supportedBackend}get defaultContent(){return this._props.defaultContent}static get ENTITY_NAME(){return"database"}}const databaseEntity=DatabaseEntity;class ApplicationEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(ApplicationEntity.ENTITY_NAME,dto,ApplicationEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["info","latestVersion","schema","robotsIndexDisabled","sslForce","sslFullBaseUrl","seleniumDisabled","registrationClosed","configPath","hostAvailabilityCheckEnabled","jsProd","emailNotificationEnabled"],properties:{info:{type:"object",required:["remoteVersion","currentVersion"],properties:{remoteVersion:{type:"string",nullable:!0},currentVersion:{type:"string"}}},latestVersion:{type:"boolean",nullable:!0},schema:{type:"boolean"},robotsIndexDisabled:{type:"boolean"},sslForce:{type:"boolean"},sslFullBaseUrl:{type:"boolean"},seleniumDisabled:{type:"boolean"},configPath:{type:"string"},registrationClosed:{type:"object",required:["isSelfRegistrationPluginEnabled","selfRegistrationProvider","isRegistrationPublicRemovedFromPassbolt"],properties:{isSelfRegistrationPluginEnabled:{type:"boolean"},selfRegistrationProvider:{type:"string",nullable:!0},isRegistrationPublicRemovedFromPassbolt:{type:"boolean"}}},hostAvailabilityCheckEnabled:{type:"boolean"},jsProd:{type:"boolean"},emailNotificationEnabled:{type:"boolean"}}}}get info(){return this._props.info}get latestVersion(){return this._props.latestVersion}getSchema(){return this._props.getSchema}get robotsIndexDisabled(){return this._props.robotsIndexDisabled}get sslForce(){return this._props.sslForce}get sslFullBaseUrl(){return this._props.sslFullBaseUrl}get schema(){return this._props.schema}get currentVersion(){return this._props.currentVersion}get configPath(){return this._props.configPath}get seleniumDisabled(){return this._props.seleniumDisabled}get registrationClosed(){return this._props.registrationClosed}get hostAvailabilityCheckEnabled(){return this._props.hostAvailabilityCheckEnabled}get jsProd(){return this._props.jsProd}get emailNotificationEnabled(){return this._props.emailNotificationEnabled}static get ENTITY_NAME(){return"application"}}const applicationEntity=ApplicationEntity;class GpgEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(GpgEntity.ENTITY_NAME,dto,GpgEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["canDecryptVerify","canVerify","gpgKeyPublicInKeyring","canEncrypt","canDecrypt","canEncryptSign","canSign","gpgHome","gpgKeyPrivateFingerprint","gpgKeyPublicFingerprint","gpgKeyPublicEmail","gpgKeyPublicReadable","gpgKeyPrivateReadable","gpgKey","lib","gpgKeyNotDefault","info","gpgHomeWritable","gpgKeyPublic","gpgKeyPublicBlock","gpgKeyPrivate","gpgKeyPrivateBlock","isPublicServerKeyGopengpgCompatible","isPrivateServerKeyGopengpgCompatible"],properties:{canDecryptVerify:{type:"boolean"},canVerify:{type:"boolean"},gpgKeyPublicInKeyring:{type:"boolean"},canEncrypt:{type:"boolean"},canDecrypt:{type:"boolean"},canEncryptSign:{type:"boolean"},canSign:{type:"boolean"},gpgHome:{type:"boolean"},gpgKeyPrivateFingerprint:{type:"boolean"},gpgKeyPublicFingerprint:{type:"boolean"},gpgKeyPublicEmail:{type:"boolean"},gpgKeyPublicReadable:{type:"boolean"},gpgKeyPrivateReadable:{type:"boolean"},gpgKey:{type:"boolean"},lib:{type:"boolean"},gpgKeyNotDefault:{type:"boolean"},gpgHomeWritable:{type:"boolean"},gpgKeyPublic:{type:"boolean"},gpgKeyPublicBlock:{type:"boolean"},gpgKeyPrivate:{type:"boolean"},gpgKeyPrivateBlock:{type:"boolean"},isPublicServerKeyGopengpgCompatible:{type:"boolean"},isPrivateServerKeyGopengpgCompatible:{type:"boolean"},info:{type:"object",required:["gpgHome","gpgKeyPrivate"],properties:{gpgHome:{type:"string"},gpgKeyPrivate:{type:"string"}}}}}}get canDecryptVerify(){return this._props.canDecryptVerify}get canVerify(){return this._props.canVerify}get gpgKeyPublicInKeyring(){return this._props.gpgKeyPublicInKeyring}get canEncrypt(){return this._props.canEncrypt}get canDecrypt(){return this._props.canDecrypt}get canEncryptSign(){return this._props.canEncryptSign}get canSign(){return this._props.canSign}get gpgHome(){return this._props.gpgHome}get gpgKeyPrivateFingerprint(){return this._props.gpgKeyPrivateFingerprint}get gpgKeyPublicFingerprint(){return this._props.gpgKeyPublicFingerprint}get gpgKeyPublicEmail(){return this._props.gpgKeyPublicEmail}get gpgKeyPublicReadable(){return this._props.gpgKeyPublicReadable}get gpgKeyPrivateReadable(){return this._props.gpgKeyPrivateReadable}get gpgKey(){return this._props.gpgKey}get lib(){return this._props.lib}get gpgKeyNotDefault(){return this._props.gpgKeyNotDefault}get info(){return this._props.info}get gpgHomeWritable(){return this._props.gpgHomeWritable}get gpgKeyPublic(){return this._props.gpgKeyPublic}get gpgKeyPublicBlock(){return this._props.gpgKeyPublicBlock}get gpgKeyPrivate(){return this._props.gpgKeyPrivate}get gpgKeyPrivateBlock(){return this._props.gpgKeyPrivateBlock}get isPublicServerKeyGopengpgCompatible(){return this._props.isPublicServerKeyGopengpgCompatible}get isPrivateServerKeyGopengpgCompatible(){return this._props.isPrivateServerKeyGopengpgCompatible}static get ENTITY_NAME(){return"gpg"}}const gpgEntity=GpgEntity;class EnvironmentEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(EnvironmentEntity.ENTITY_NAME,dto,EnvironmentEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["phpVersion","nextMinPhpVersion","pcre","mbstring","gnupg","intl","image","tmpWritable","logWritable"],properties:{phpVersion:{type:"boolean"},nextMinPhpVersion:{type:"boolean"},pcre:{type:"boolean"},mbstring:{type:"boolean"},gnupg:{type:"boolean"},intl:{type:"boolean"},image:{type:"boolean"},tmpWritable:{type:"boolean"},logWritable:{type:"boolean"},info:{type:"object",required:["phpVersion"],properties:{serverPhpVersion:{"type:":"string"}}}}}}get phpVersion(){return this._props.phpVersion}get nextMinPhpVersion(){return this._props.nextMinPhpVersion}get pcre(){return this._props.pcre}get mbstring(){return this._props.mbstring}get gnupg(){return this._props.gnupg}get intl(){return this._props.intl}get image(){return this._props.image}get tmpWritable(){return this._props.tmpWritable}get logWritable(){return this._props.logWritable}get info(){return this._props.info}get serverPhpVersion(){return this._props.phpVersion}static get ENTITY_NAME(){return"environment"}}const environmentEntity=EnvironmentEntity;class ConfigFileEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(ConfigFileEntity.ENTITY_NAME,dto,ConfigFileEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["app","passbolt"],properties:{app:{type:"boolean"},passbolt:{type:"boolean"}}}}get app(){return this._props.app}get passbolt(){return this._props.passbolt}static get ENTITY_NAME(){return"configFile"}}const configFileEntity=ConfigFileEntity;class CoreEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(CoreEntity.ENTITY_NAME,dto,CoreEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["cache","debugDisabled","salt","fullBaseUrl","validFullBaseUrl","info","fullBaseUrlReachable"],properties:{cache:{type:"boolean"},debugDisabled:{type:"boolean"},salt:{type:"boolean"},fullBaseUrl:{type:"boolean"},validFullBaseUrl:{type:"boolean"},info:{type:"object",required:["fullBaseUrl"],properties:{fullBaseUrl:{type:"string",format:"uri"}}},fullBaseUrlReachable:{type:"boolean"}}}}get cache(){return this._props.cache}get debugDisabled(){return this._props.debugDisabled}get salt(){return this._props.salt}get fullBaseUrl(){return this._props.fullBaseUrl}get validFullBaseUrl(){return this._props.validFullBaseUrl}get info(){return this._props.info}get fullBaseUrlReachable(){return this._props.fullBaseUrlReachable}static get ENTITY_NAME(){return"core"}}const coreEntity=CoreEntity;class SmtpSettingsEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SmtpSettingsEntity.ENTITY_NAME,dto,SmtpSettingsEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["isEnabled","areEndpointsDisabled","errorMessage","source","isInDb"],properties:{isEnabled:{type:"boolean"},areEndpointsDisabled:{type:"boolean"},errorMessage:{anyOf:[{type:"boolean"},{type:"string"}]},source:{type:"string"},isInDb:{type:"boolean"}}}}get isEnabled(){return this._props.isEnabled}get areEndpointsDisabled(){return this._props.areEndpointsDisabled}get errorMessage(){return this._props.errorMessage}get source(){return this._props.source}get isInDb(){return this._props.isInDb}static get ENTITY_NAME(){return"smtpSettings"}}const smtpSettingsEntity=SmtpSettingsEntity;class DirectorySyncEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(DirectorySyncEntity.ENTITY_NAME,dto,DirectorySyncEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["endpointsDisabled"],properties:{endpointsDisabled:{type:"boolean"}}}}get endpointsDisabled(){return this._props.endpointsDisabled}static get ENTITY_NAME(){return"directorySync"}}const directorySyncEntity=DirectorySyncEntity;class SsoEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(SsoEntity.ENTITY_NAME,dto,SsoEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["sslHostVerification"],properties:{sslHostVerification:{type:"boolean"}}}}get sslHostVerification(){return this._props.sslHostVerification}static get ENTITY_NAME(){return"sso"}}const ssoEntity=SsoEntity;class HealthcheckEntity extends entity.A{constructor(dto,options={}){super(entitySchema.A.validate(HealthcheckEntity.ENTITY_NAME,dto,HealthcheckEntity.getSchema()),options),this._props.ssl&&(this._ssl=new sslEntity(this._props.ssl,{clone:!1})),delete this._props.ssl,this._props.database&&(this._database=new databaseEntity(this._props.database,{clone:!1})),delete this._props.database,this._props.application&&(this._application=new applicationEntity(this._props.application,{clone:!1})),delete this._props.application,this._props.gpg&&(this._gpg=new gpgEntity(this._props.gpg,{clone:!1})),delete this._props.gpg,this._props.environment&&(this._environment=new environmentEntity(this._props.environment,{clone:!1})),delete this._props.environment,this._props.configFile&&(this._configFile=new configFileEntity(this._props.configFile,{clone:!1})),delete this._props.configFile,this._props.core&&(this._core=new coreEntity(this._props.core,{clone:!1})),delete this._props.core,this._props.smtpSettings&&(this._smtpSettings=new smtpSettingsEntity(this._props.smtpSettings,{clone:!1})),delete this._props.smtpSettings,this._props.directorySync&&(this._directorySync=new directorySyncEntity(this._props.directorySync,{clone:!1})),delete this._props.directorySync,this._props.sso&&(this._sso=new ssoEntity(this._props.sso,{clone:!1})),delete this._props.sso}static getSchema(){return{type:"object",required:["database","ssl","application","gpg","configFile","core","smtpSettings"],properties:{database:databaseEntity.getSchema(),ssl:sslEntity.getSchema(),application:applicationEntity.getSchema(),gpg:gpgEntity.getSchema(),environment:environmentEntity.getSchema(),configFile:configFileEntity.getSchema(),core:coreEntity.getSchema(),smtpSettings:smtpSettingsEntity.getSchema(),directorySync:directorySyncEntity.getSchema(),sso:ssoEntity.getSchema()}}}isSSLValid(){const ssl=this._props.ssl;return ssl.peerValid&&ssl.hostValid&&!ssl.notSelfSigned}static get ENTITY_NAME(){return"healthcheck"}get ssl(){return this._ssl||null}get database(){return this._database||null}get application(){return this._application||null}get gpg(){return this._gpg||null}get environment(){return this._environment||null}get configFile(){return this._configFile||null}get core(){return this._core||null}get smtpSettings(){return this._smtpSettings||null}get directorySync(){return this._directorySync||null}get sso(){return this._sso||null}}const healthcheckEntity=HealthcheckEntity;var ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js");const AdministrationHealthcheckContext=react.createContext({healthcheckData:null,endpointEnabled:!0,setProcessing:()=>{},isProcessing:()=>{},loadHealthcheckData:()=>{},clearContext:()=>{},isHealthcheckEndpointEnabled:()=>{}});class AdministrationHealthcheckContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState;const apiClientOptions=props.context.getApiClientOptions();this.healthcheckService=new healthcheck_HealthcheckService(apiClientOptions)}get defaultState(){return{healthcheckData:null,endpointEnabled:!0,processing:!1,isProcessing:this.isProcessing.bind(this),loadHealthcheckData:this.fetchHealthcheckData.bind(this),clearContext:this.clearContext.bind(this),isHealthcheckEndpointEnabled:this.isHealthcheckEndpointEnabled.bind(this)}}isHealthcheckEndpointEnabled(){return this.state.endpointEnabled}async fetchHealthcheckData(){if(this.isHealthcheckEndpointEnabled()){this.setProcessing(!0);try{const result=await this.healthcheckService.fetchHealthcheck();if(result){const healthData=new healthcheckEntity(result);this.setState({healthcheckData:healthData})}else this.props.actionFeedbackContext.displayError("No data received from the server")}catch(error){console.error(error),this.setState({endpointEnabled:!1}),this.props.actionFeedbackContext.displayError(error.message)}finally{this.setProcessing(!1)}}}clearContext(){this.setState(this.defaultState)}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}render(){return react.createElement(AdministrationHealthcheckContext.Provider,{value:this.state},this.props.children)}}AdministrationHealthcheckContextProvider.propTypes={context:prop_types_default().any,actionFeedbackContext:prop_types_default().any,children:prop_types_default().any};(0,AppContext.L)((0,ActionFeedbackContext.ot)(AdministrationHealthcheckContextProvider));function withAdministrationHealthcheck(WrappedComponent){return class WithAdministrationHealthcheck extends react.Component{render(){return react.createElement(AdministrationHealthcheckContext.Consumer,null,(adminHealthcheckContext=>react.createElement(WrappedComponent,{adminHealthcheckContext,...this.props})))}}}AdministrationHealthcheckContextProvider.__docgenInfo={description:"The Healthcheck context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"isHealthcheckEndpointEnabled",docblock:"Returns true if the healthcheck API endpoint is enabled.\nIt is true by default as it requires a first call to the endpoint to know if it crashes or not.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the healthcheck API endpoint is enabled.\nIt is true by default as it requires a first call to the endpoint to know if it crashes or not."},{name:"fetchHealthcheckData",docblock:"Fetches the healthcheck data and updates the state.\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Fetches the healthcheck data and updates the state."},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."}],displayName:"AdministrationHealthcheckContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},actionFeedbackContext:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}};var AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),Icon=__webpack_require__("./src/shared/components/Icons/Icon.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js");class DisplayAdministrationHealthcheckActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleRefresh=this.handleRefresh.bind(this)}isRefreshEnabled(){return this.props.adminHealthcheckContext.isHealthcheckEndpointEnabled()&&!this.props.adminHealthcheckContext.isProcessing()}async handleRefresh(){await this.props.adminHealthcheckContext.loadHealthcheckData(),this.handleRefreshSuccess()}async handleRefreshSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The healthcheck has been successfully refreshed"))}render(){return react.createElement("div",{className:"col2_3 actions-wrapper"},react.createElement("div",{className:"actions"},react.createElement("div",null,react.createElement("ul",null,react.createElement("li",null,react.createElement("button",{type:"button",disabled:!this.isRefreshEnabled(),id:"save-settings",onClick:this.handleRefresh},react.createElement(Icon.A,{name:"refresh"}),react.createElement("span",null,react.createElement(es.x6,null,"Refresh"))))))))}}DisplayAdministrationHealthcheckActions.propTypes={adminHealthcheckContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationHealthcheckActions_DisplayAdministrationHealthcheckActions=withAdministrationHealthcheck((0,ActionFeedbackContext.ot)((0,es.CI)("common")(DisplayAdministrationHealthcheckActions)));DisplayAdministrationHealthcheckActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"isRefreshEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"handleRefresh",docblock:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user"},{name:"handleRefreshSuccess",docblock:"Handle save operation success.",modifiers:["async"],params:[],returns:null,description:"Handle save operation success."}],displayName:"DisplayAdministrationHealthcheckActions",props:{adminHealthcheckContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var Tooltip=__webpack_require__("./src/react-extension/components/Common/Tooltip/Tooltip.js");class DisplayHealthcheckAdministration extends react.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{data:null}}async componentDidMount(){this.props.administrationWorkspaceContext.setDisplayAdministrationWorkspaceAction(DisplayAdministrationHealthcheckActions_DisplayAdministrationHealthcheckActions),await this.props.adminHealthcheckContext.loadHealthcheckData()}componentWillUnmount(){this.props.administrationWorkspaceContext.resetDisplayAdministrationWorkspaceAction(),this.props.adminHealthcheckContext.clearContext()}get healthCheckData(){return this.props.adminHealthcheckContext.healthcheckData}canIUse(featureFlag){return Boolean(this.props.context.siteSettings?.canIUse(featureFlag))}get isUserDirectoryEnabled(){return this.canIUse("directorySync")}get canIUseSso(){return this.canIUse("sso")}render(){const healthcheckData=this.healthCheckData,isEndpointEnabled=this.props.adminHealthcheckContext.isHealthcheckEndpointEnabled();return react.createElement("div",{className:"row"},react.createElement("div",{className:"healthcheck-settings col8 main-column"},react.createElement("h3",null,"Passbolt API Status"),isEndpointEnabled?(()=>!healthcheckData||this.props.adminHealthcheckContext.isProcessing()?react.createElement(Icon.A,{name:"spinner"}):react.createElement(react.Fragment,null,react.createElement("h4",{className:"no-border"},"Environment"),react.createElement("div",{className:"healthcheck-environment-section"},react.createElement("div",null,healthcheckData.environment.info.phpVersion&&!0===healthcheckData.environment.phpVersion?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"PHP version ",healthcheckData.environment.info.phpVersion.toString()):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"PHP version is too low, passbolt need PHP 7.4 or higher")),react.createElement("div",null,!0===healthcheckData.environment.pcre?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"PCRE compiled with unicode support"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"PCRE has not been compiled with Unicode support",react.createElement(Tooltip.A,{message:"Recompile PCRE with Unicode support by adding --enable-unicode-properties when configuring."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.environment.tmpWritable?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The temporary directory and its content are writable and not executable"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The temporary directory and its content are not writable, or are executable",react.createElement(Tooltip.A,{message:"Ensure the temporary directory and its content are writable by the webserver user."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.environment.logWritable?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The logs directory and its content are writable"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The logs directory and its content are not writable",react.createElement(Tooltip.A,{message:"Ensure the temporary directory and its content are writable by the webserver user."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.environment.image?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"GD or Imagick extension is installed"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"You must enable the gd or imagick extensions to use Passbolt",react.createElement(Tooltip.A,{message:react.createElement("span",null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.image.php",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.environment.intl?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Intl extension is installed"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"You must enable the intl extension to use Passbolt",react.createElement(Tooltip.A,{message:react.createElement("span",null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.intl.php",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.environment.mbstring?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Mbstring extension is installed"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"You must enable the mbstring extension to use Passbolt",react.createElement(Tooltip.A,{message:react.createElement("span",null,"See ",react.createElement("a",{href:"https://secure.php.net/manual/en/book.mbstring.php",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"}))))),react.createElement("h4",null,"Config files"),react.createElement("div",{className:"healthcheck-configFiles-section"},react.createElement("div",null,!0===healthcheckData.configFile.app?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The application config file is present"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The application config file is missing",react.createElement(Tooltip.A,{message:"Copy config/app.default.php to config/app.php"},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.configFile.passbolt?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The passbolt config file is present"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The passbolt config file is missing",react.createElement(Tooltip.A,{message:"Copy config/passbolt.default.php to config/passbolt.php"},react.createElement(Icon.A,{name:"info-circle"}))))),react.createElement("h4",null,"Core config"),react.createElement("div",{className:"healthcheck-core-section"},(()=>{if(!1===healthcheckData.core.debugDisabled)return react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Debug mode is on",react.createElement(Tooltip.A,{message:`Set debug = false; in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))})(),react.createElement("div",null,!0===healthcheckData.core.cache?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Cache is working"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Cache is not working",react.createElement(Tooltip.A,{message:"Check the settings in config/app.php"},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.core.salt?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Unique value set for security.salt"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Default value found for security.salt",react.createElement(Tooltip.A,{message:"Edit the security.salt in config/app.php"},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.core.fullBaseUrl?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Full base url is set to ",healthcheckData.core.info.fullBaseUrl.toString()):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Full base url is not set",react.createElement(Tooltip.A,{message:`Edit App.fullBaseUrl in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.core.validFullBaseUrl?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"App.fullBaseUrl validation OK"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"App.fullBaseUrl does not validate",react.createElement(Tooltip.A,{message:`Edit App.fullBaseUrl in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.core.fullBaseUrlReachable?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"/healthcheck/status is reachable"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Could not reach the /healthcheck/status with the url specified in App.fullBaseUrl",react.createElement(Tooltip.A,{message:`Check that the domain name is correct in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"}))))),react.createElement("h4",null,"SSL Certificate"),react.createElement("div",{className:"healthcheck-ssl-section"},react.createElement("div",null,!0===healthcheckData.ssl.peerValid?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"SSL peer certificate validates"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"SSL peer certificate does not validate",react.createElement(Tooltip.A,{message:react.createElement("span",null,"Check ",react.createElement("a",{href:"https://help.passbolt.com/faq/hosting/troubleshoot-ssl",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.ssl.hostValid?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Hostname is matching SSL certificate"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Hostname does not match when validating certificates",react.createElement(Tooltip.A,{message:react.createElement("span",null,"Check ",react.createElement("a",{href:"https://help.passbolt.com/faq/hosting/troubleshoot-ssl",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.ssl.notSelfSigned?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Not using a self-signed certificate"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"Using a self-signed certificate"))),react.createElement("h4",null,"Database"),react.createElement("div",{className:"healthcheck-database-section"},react.createElement("div",null,!0===healthcheckData.database.connect?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The application is able to connect to the database"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The application is not able to connect to the database",react.createElement(Tooltip.A,{message:`Double check the host, database name, username and password in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,(()=>{if(!0===healthcheckData.database.connect&&healthcheckData.database.tablesCount)return react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),healthcheckData.database.info.tablesCount.toString()," tables found")})()),react.createElement("div",null,!0===healthcheckData.database.connect&&!0===healthcheckData.database.defaultContent?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Some default content is present"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"No default content found",react.createElement(Tooltip.A,{message:"Run the install script to set the dafault content such as roles and permission types"},react.createElement(Icon.A,{name:"info-circle"}))))),react.createElement("h4",null,"GPG Configuration"),react.createElement("div",{className:"healthcheck-gpg-section"},react.createElement("div",null,!0===healthcheckData.gpg.lib?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"PHP GPG Module is installed and loaded"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"PHP GPG Module is not installed or loaded",react.createElement(Tooltip.A,{message:react.createElement("span",null,"Install php-gnupg, see ",react.createElement("a",{href:"http://php.net/manual/en/gnupg.installation.php",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgHome&&healthcheckData.gpg.info.gpgHome?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The environment variable GNUPGHOME is set to ",healthcheckData.gpg.info.gpgHome.toString()):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The environment variable GNUPGHOME is set to ",healthcheckData.gpg.info.gpgHome.toString(),", but the directory does not exist",react.createElement(Tooltip.A,{message:"Ensure the keyring location exists and is accessible by the webserver user."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgHomeWritable&&healthcheckData.gpg.info.gpgHome?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The directory ",healthcheckData.gpg.info.gpgHome.toString()," containing the keyring is writable by the webserver user"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The directory ",healthcheckData.gpg.info.gpgHome.toString()," containing the keyring is not writable by the webserver user",react.createElement(Tooltip.A,{message:"Ensure the keyring location exists and is accessible by the webserver user."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgKeyPublic&&!0===healthcheckData.gpg.gpgKeyPublicReadable&&healthcheckData.gpg.gpgKeyPublicBlock?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The public key file is defined in ",healthcheckData.application.configPath.toString()," and readable."):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The public key file is not defined in ",healthcheckData.application.configPath.toString()," or not readable.",react.createElement(Tooltip.A,{message:`Ensure the public key file is defined by the variable passbolt.gpg.serverKey.public in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgKeyPrivate&&!0===healthcheckData.gpg.gpgKeyPrivateReadable&&healthcheckData.gpg.gpgKeyPrivateBlock?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The private key file is defined in ",healthcheckData.application.configPath.toString()," and readable."):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The private key file is not defined in ",healthcheckData.application.configPath.toString()," or not readable.",react.createElement(Tooltip.A,{message:`Ensure the private key file is defined by the variable passbolt.gpg.serverKey.private in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgKeyPrivateFingerprint&&!0===healthcheckData.gpg.gpgKeyPublicFingerprint?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The server key fingerprint matches the one defined in ",healthcheckData.application.configPath.toString()):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The server key fingerprint doesn't matches the one defined in ",healthcheckData.application.configPath.toString(),react.createElement(Tooltip.A,{message:"Double check the key fingerprint"},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgKeyPublicInKeyring?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The server public key defined in the ",healthcheckData.application.configPath.toString()," (or environment variables) is in the keyring"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The server public key defined in the ",healthcheckData.application.configPath.toString()," (or environment variables) is not in the keyring",react.createElement(Tooltip.A,{message:"Import the private server key in the keyring of the webserver user."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.gpgKeyPublicEmail?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"There is a valid email id defined for the server key"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The server key does not have a valid email id",react.createElement(Tooltip.A,{message:"Edit or generate another key with a valid email id."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.gpg.canEncrypt?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The public key can be used to encrypt a message"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The public key cannot be used to encrypt a message")),react.createElement("div",null,!0===healthcheckData.gpg.canSign?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The public key can be used to sign a message"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The public key cannot be used to sign a message")),react.createElement("div",null,!0===healthcheckData.gpg.canEncryptSign?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The public and private keys can be used to encrypt and sign a message"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The public and private keys cannot be used to encrypt and sign a message")),react.createElement("div",null,!0===healthcheckData.gpg.canDecryptVerify?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The private key can be used to decrypt and verify a message"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The private key cannot be used to decrypt and verify a message")),react.createElement("div",null,!0===healthcheckData.gpg.canVerify?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The public key can be used to verify a signature"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The public key cannot be used to verify a signature")),react.createElement("div",null,!0===healthcheckData.gpg.isPublicServerKeyGopengpgCompatible?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The server public key format is Gopengpg compatible"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The server public key format is not Gopengpg compatible")),react.createElement("div",null,!0===healthcheckData.gpg.isPrivateServerKeyGopengpgCompatible?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The server private key format is Gopengpg compatible"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The server private key format is not Gopengpg compatible"))),react.createElement("h4",null,"Application configuration"),react.createElement("div",{className:"healthcheck-app-section"},react.createElement("div",null,!0===healthcheckData.application.latestVersion&&healthcheckData.application.info.remoteVersion?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Using latest passbolt version (",healthcheckData.application.info.remoteVersion.toString(),")"):!1===healthcheckData.application.latestVersion&&healthcheckData.application.info.remoteVersion?react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The installation is not up to date. Currently using ",healthcheckData.application.info.currentVersion.toString()," and it should be ",healthcheckData.application.info.remoteVersion.toString(),react.createElement(Tooltip.A,{message:react.createElement("span",null,"See ",react.createElement("a",{href:"https://help.passbolt.com/hosting/update",target:"_blank",rel:"noopener noreferrer"},"this guide"))},react.createElement(Icon.A,{name:"info-circle"}))):null===healthcheckData.application.latestVersion&&"undefined"===healthcheckData.application.info.remoteVersion?react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"It seems that the server is not able to reach internet.",react.createElement(Tooltip.A,{message:react.createElement("span",null,"To confirm that you are running the latest version, check ",react.createElement("a",{href:"https://help.passbolt.com/releases/",target:"_blank",rel:"noopener noreferrer"},"all the releases notes"))},react.createElement(Icon.A,{name:"info-circle"}))):void 0),react.createElement("div",null,!0===healthcheckData.application.sslForce?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Passbolt is configured to force SSL use"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Passbolt is not configured to force SSL use",react.createElement(Tooltip.A,{message:`Set passbolt.ssl.force to true in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.sslFullBaseUrl?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"App.fullBaseUrl is set to HTTPS"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"App.fullBaseUrl is not set to HTTPS",react.createElement(Tooltip.A,{message:`Check App.fullBaseUrl url scheme in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.seleniumDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Selenium API endpoints are disabled"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Selenium API endpoints are active. This setting should be used for testing only",react.createElement(Tooltip.A,{message:`Set passbolt.selenium.active to false in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.robotsIndexDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Search engine robots are told not to index content"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"Search engine robots are not told not to index content",react.createElement(Tooltip.A,{message:`Set passbolt.meta.robots to false in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.registrationClosed.isSelfRegistrationPluginEnabled?react.createElement("span",{className:"healthcheck-info"},react.createElement(Icon.A,{name:"question-circle"}),"The Self Registration plugin is enabled"):react.createElement("span",{className:"healthcheck-info"},react.createElement(Icon.A,{name:"question-circle"}),"The Self Registration plugin is disabled",react.createElement(Tooltip.A,{message:"Enable the plugin in order to define self registration settings."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,null===healthcheckData.application.registrationClosed.selfRegistrationProvider?react.createElement("span",{className:"healthcheck-info"},react.createElement(Icon.A,{name:"question-circle"}),"Registration is closed, only administrators can add users"):react.createElement("span",{className:"healthcheck-info"},react.createElement(Icon.A,{name:"question-circle"}),"The Self Registration provider is: ",healthcheckData.application.registrationClosed.selfRegistrationProvider.toString())),react.createElement("div",null,!0===healthcheckData.application.registrationClosed.isRegistrationPublicRemovedFromPassbolt?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The deprecated self registration public settings was not found in ",healthcheckData.application.configPath.toString()):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The deprecated self registration public settings was found in ",healthcheckData.application.configPath.toString(),react.createElement(Tooltip.A,{message:"You may remove the passbolt.registration.public setting"},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.hostAvailabilityCheckEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Host availability will be checked"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"Host availability checking is disabled",react.createElement(Tooltip.A,{message:"Make sure the instance is not publicly available on the internet."},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.jsProd?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"Serving the compiled version of the javascript app"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"Using non-compiled Javascript. Passbolt will be slower",react.createElement(Tooltip.A,{message:`Set passbolt.js.build in ${healthcheckData.application.configPath.toString()}`},react.createElement(Icon.A,{name:"info-circle"})))),react.createElement("div",null,!0===healthcheckData.application.emailNotificationEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"All email notifications will be sent"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"Some email notifications are disabled by the administrators"))),react.createElement("h4",null,"SMTP Settings"),react.createElement("div",{className:"healthcheck-smtp-section"},react.createElement("div",null,!0===healthcheckData.smtpSettings.isEnabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The SMTP Settings plugin is enabled"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The SMTP Settings plugin is disabled")),react.createElement("div",null,!1===healthcheckData.smtpSettings.errorMessage?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"SMTP Settings coherent. You may send a test email to validate them"):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"SMTP Settings errors: ",healthcheckData.smtpSettings.errorMessage.toString())),react.createElement("div",null,(()=>{if(healthcheckData.smtpSettings.source)return!0===healthcheckData.smtpSettings.isInDb?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The SMTP Settings source is: ",healthcheckData.smtpSettings.source.toString()):react.createElement("span",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close"}),"The SMTP Settings source is: ",healthcheckData.smtpSettings.source.toString(),react.createElement(Tooltip.A,{message:"It is recommended to set the SMTP Settings in the database through the administration section."},react.createElement(Icon.A,{name:"info-circle"})))})()),react.createElement("div",null,!0===healthcheckData.smtpSettings.areEndpointsDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The SMTP Settings plugin endpoints are disabled"):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The SMTP Settings plugin endpoints are enabled",react.createElement(Tooltip.A,{message:"It is recommended to disable the plugin endpoints."},react.createElement(Icon.A,{name:"info-circle"}))))),this.isUserDirectoryEnabled&&react.createElement(react.Fragment,null,react.createElement("h4",null,"Directory Sync"),react.createElement("div",{className:"healthcheck-directorySync-section"},react.createElement("div",null,!0===healthcheckData.directorySync.endpointsDisabled?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"The endpoints for updating the users directory configurations are disabled."):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"The endpoints for updating the users directory configurations are enabled.",react.createElement(Tooltip.A,{message:"It is recommended to disable endpoints for updating the users directory configurations."},react.createElement(Icon.A,{name:"info-circle"})))))),this.canIUseSso&&react.createElement(react.Fragment,null,react.createElement("h4",null,"SSO"),react.createElement("div",{className:"healthcheck-sso-section"},react.createElement("div",null,!0===healthcheckData.sso.sslHostVerification?react.createElement("span",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check"}),"SSL certification validation for SSO instance is enabled."):react.createElement("span",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning"}),"SSL certification validation for SSO instance is disabled.",react.createElement(Tooltip.A,{message:"'Disabling the ssl verify check can lead to security attacks."},react.createElement(Icon.A,{name:"info-circle"}))))))))():react.createElement("div",null,react.createElement(es.x6,null,"The health check API endpoint has been disabled in the server configuration."))),react.createElement("div",{className:"col4 last"},react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"What is this page?")),react.createElement("p",null,react.createElement(es.x6,null,"This page is available to help administrators diagnose if something is wrong with a passbolt installation and help keeping it secure.")),react.createElement("p",null,react.createElement(es.x6,null,"The color is really important here so it's easier for you to spot what's not running as expected")),react.createElement("div",{className:"healthcheck-color-legends"},react.createElement("div",{className:"healthcheck-success"},react.createElement(Icon.A,{name:"check",width:18,height:18})," Everything is running as expected."),react.createElement("div",{className:"healthcheck-warning"},react.createElement(Icon.A,{name:"warning",width:18,height:18})," Something inside your configuration is not what we recommend, but you can skip it if it has been done on purpose."),react.createElement("div",{className:"healthcheck-fail"},react.createElement(Icon.A,{name:"close",width:18,height:18})," There is an error with the current configuration, you might want to resolve it."),react.createElement("div",{className:"healthcheck-info"},react.createElement(Icon.A,{name:"question-circle",width:18,height:18})," This is just an information shared, no action is required."))),react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"Something wrong?")),react.createElement("p",null,react.createElement(es.x6,null,"Hang in there! Depending your installation, you might need to check the documentation in order to run the healthcheck from the CLI")),react.createElement("a",{className:"button",href:"https://www.passbolt.com/docs/admin/server-maintenance/passbolt-api-status/",target:"_blank",rel:"noopener noreferrer"},react.createElement(Icon.A,{name:"document"}),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))))}}DisplayHealthcheckAdministration.propTypes={context:prop_types_default().object,adminHealthcheckContext:prop_types_default().any,children:prop_types_default().any,administrationWorkspaceContext:prop_types_default().object,t:prop_types_default().func};const DisplayHealthcheckAdministration_DisplayHealthcheckAdministration=(0,AppContext.L)((0,AdministrationWorkspaceContext.Kk)(withAdministrationHealthcheck((0,es.CI)("common")(DisplayHealthcheckAdministration))));DisplayHealthcheckAdministration.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:null,modifiers:["get"],params:[],returns:null},{name:"healthCheckData",docblock:null,modifiers:["get"],params:[],returns:null},{name:"canIUse",docblock:"Returns true if the given feature flag exists and is enabled\n@param {string} featureFlag\n@returns {boolean}",modifiers:[],params:[{name:"featureFlag",type:{name:"string"},optional:!1}],returns:{type:{name:"boolean"}},description:"Returns true if the given feature flag exists and is enabled"},{name:"isUserDirectoryEnabled",docblock:"Returns true if the user has the user directory capability\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the user has the user directory capability"},{name:"canIUseSso",docblock:"Can I use the sso plugin\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Can I use the sso plugin"}],displayName:"DisplayHealthcheckAdministration",props:{context:{description:"",type:{name:"object"},required:!1},adminHealthcheckContext:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var ApiAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ApiAppContext.test.data.js");function defaultAdministrationHealthcheckContext(data={}){return{healthcheckData:new healthcheckEntity(mockHealthcheckData),isProcessing:jest.fn(),setProcessing:jest.fn(),loadHealthcheckData:jest.fn(),clearContext:jest.fn(),fetchHealthcheckData:jest.fn(),isHealthcheckEndpointEnabled:jest.fn((()=>!0)),...data}}const mockHealthcheckData={ssl:{peerValid:!0,hostValid:!0,notSelfSigned:!0},database:{tablesCount:!0,info:{tablesCount:49},connect:!0,supportedBackend:!0,defaultContent:!0},application:{info:{remoteVersion:"4.3.0",currentVersion:"4.1.1"},latestVersion:!0,schema:!0,robotsIndexDisabled:!0,sslForce:!0,sslFullBaseUrl:!0,configPath:"/var/www/passbolt/config/passbolt.php",seleniumDisabled:!0,registrationClosed:{isSelfRegistrationPluginEnabled:!0,selfRegistrationProvider:null,isRegistrationPublicRemovedFromPassbolt:!0},hostAvailabilityCheckEnabled:!0,jsProd:!0,emailNotificationEnabled:!0},gpg:{canDecryptVerify:!0,canVerify:!0,gpgKeyPublicInKeyring:!0,canEncrypt:!0,canDecrypt:!0,canEncryptSign:!0,canSign:!0,gpgHome:!0,gpgKeyPrivateFingerprint:!0,gpgKeyPublicFingerprint:!0,gpgKeyPublicEmail:!0,gpgKeyPublicReadable:!0,gpgKeyPrivateReadable:!0,gpgKey:!0,lib:!0,gpgKeyNotDefault:!0,info:{gpgHome:"/home/www-data/.gnupg",gpgKeyPrivate:"/var/www/passbolt/config/gpg/serverkey_private.asc"},gpgHomeWritable:!0,gpgKeyPublic:!0,gpgKeyPublicBlock:!0,gpgKeyPrivate:!0,gpgKeyPrivateBlock:!0,isPublicServerKeyGopengpgCompatible:!0,isPrivateServerKeyGopengpgCompatible:!0},environment:{phpVersion:!0,nextMinPhpVersion:!0,info:{phpVersion:"8.1.17"},pcre:!0,mbstring:!0,gnupg:!0,intl:!0,image:!0,tmpWritable:!0,logWritable:!0},configFile:{app:!0,passbolt:!0},core:{cache:!0,debugDisabled:!0,salt:!0,fullBaseUrl:!0,validFullBaseUrl:!0,info:{fullBaseUrl:"https://dev.local"},fullBaseUrlReachable:!0},smtpSettings:{isEnabled:!0,areEndpointsDisabled:!0,errorMessage:!1,source:"database",isInDb:!0},directorySync:{endpointsDisabled:!0},sso:{sslHostVerification:!0}};const DisplayHealthcheckAdministration_test_stories={title:"Components/Administration/DisplayHealthcheckAdministration",component:DisplayHealthcheckAdministration_DisplayHealthcheckAdministration},Initial=(args=>react.createElement("div",{className:"panel main"},react.createElement("div",null,react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(DisplayHealthcheckAdministration_DisplayHealthcheckAdministration,args)))))).bind({});Initial.args=function DisplayHealthcheckAdministration_test_data_defaultProps(data={}){const defaultProps1={context:(0,ApiAppContext_test_data.s)(data?.context),adminHealthcheckContext:defaultAdministrationHealthcheckContext(),administrationWorkspaceContext:{setDisplayAdministrationWorkspaceAction:jest.fn(),resetDisplayAdministrationWorkspaceAction:jest.fn()}};return Object.assign(defaultProps1,data)}(),Initial.parameters={css:"api_main"};const __namedExportsOrder=["Initial"];Initial.parameters={...Initial.parameters,docs:{...Initial.parameters?.docs,source:{originalSource:'args => <div className="panel main">\n    <div>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayHealthcheckAdministration {...args} />\n        </div>\n      </div>\n    </div>\n  </div>',...Initial.parameters?.docs?.source}}}},"./src/react-extension/components/Common/Tooltip/Tooltip.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);class Tooltip extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"tooltip",tabIndex:"0"},this.props.children,react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:`tooltip-text ${this.props.direction}`},this.props.message))}}Tooltip.defaultProps={direction:"right"},Tooltip.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_1___default().any,message:prop_types__WEBPACK_IMPORTED_MODULE_1___default().any.isRequired,direction:prop_types__WEBPACK_IMPORTED_MODULE_1___default().string};const __WEBPACK_DEFAULT_EXPORT__=Tooltip;Tooltip.__docgenInfo={description:"",methods:[],displayName:"Tooltip",props:{direction:{defaultValue:{value:"'right'",computed:!1},description:"",type:{name:"string"},required:!1},children:{description:"",type:{name:"any"},required:!1},message:{description:"",type:{name:"any"},required:!0}}}},"./src/shared/lib/Error/PassboltApiFetchError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltApiFetchError extends Error{constructor(message,data){super(message),this.name="PassboltApiFetchError",this.data=data||{}}}const __WEBPACK_DEFAULT_EXPORT__=PassboltApiFetchError},"./src/shared/lib/Error/PassboltServiceUnavailableError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltServiceUnavailableError extends Error{constructor(message){super(message=message||"The service is unavailable"),this.name="PassboltServiceUnavailableError"}}const __WEBPACK_DEFAULT_EXPORT__=PassboltServiceUnavailableError},"./src/shared/lib/apiClient/apiClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ApiClient});var PassboltApiFetchError=__webpack_require__("./src/shared/lib/Error/PassboltApiFetchError.js");class PassboltBadResponseError extends Error{constructor(){super("An internal error occurred. The server response could not be parsed. Please contact your administrator."),this.name="PassboltBadResponseError"}}const Error_PassboltBadResponseError=PassboltBadResponseError;var PassboltServiceUnavailableError=__webpack_require__("./src/shared/lib/Error/PassboltServiceUnavailableError.js");const SUPPORTED_METHODS=["GET","POST","PUT","DELETE"];class ApiClient{constructor(options){if(this.options=options,!this.options.getBaseUrl())throw new TypeError("ApiClient constructor error: baseUrl is required.");if(!this.options.getResourceName())throw new TypeError("ApiClient constructor error: resourceName is required.");try{let rawBaseUrl=this.options.getBaseUrl().toString();rawBaseUrl.endsWith("/")&&(rawBaseUrl=rawBaseUrl.slice(0,-1));let resourceName=this.options.getResourceName();resourceName.startsWith("/")&&(resourceName=resourceName.slice(1)),resourceName.endsWith("/")&&(resourceName=resourceName.slice(0,-1)),this.baseUrl=`${rawBaseUrl}/${resourceName}`,this.baseUrl=new URL(this.baseUrl)}catch(typeError){throw new TypeError("ApiClient constructor error: b.")}this.apiVersion="api-version=v2"}getDefaultHeaders(){return{Accept:"application/json","content-type":"application/json"}}async buildFetchOptions(){const optionHeaders=await this.options.getHeaders();return{credentials:"include",headers:{...this.getDefaultHeaders(),...optionHeaders}}}async get(id,urlOptions){this.assertValidId(id);const url=this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async delete(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("DELETE",url,bodyString)}async findAll(urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async create(body,urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{}),bodyString=this.buildBody(body);return this.fetchAndHandleResponse("POST",url,bodyString)}async update(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("PUT",url,bodyString)}async updateAll(body,urlOptions={}){const url=this.buildUrl(this.baseUrl.toString(),urlOptions),bodyString=body?this.buildBody(body):null;return this.fetchAndHandleResponse("PUT",url,bodyString)}assertValidId(id){if(!id)throw new TypeError("ApiClient.assertValidId error: id cannot be empty");if("string"!=typeof id)throw new TypeError("ApiClient.assertValidId error: id should be a string")}assertMethod(method){if("string"!=typeof method)throw new TypeError("ApiClient.assertValidMethod method should be a string.");if(SUPPORTED_METHODS.indexOf(method.toUpperCase())<0)throw new TypeError(`ApiClient.assertValidMethod error: method ${method} is not supported.`)}assertUrl(url){if(!url)throw new TypeError("ApliClient.assertUrl error: url is required.");if(!(url instanceof URL))throw new TypeError("ApliClient.assertUrl error: url should be a valid URL object.");if("https:"!==url.protocol&&"http:"!==url.protocol)throw new TypeError("ApliClient.assertUrl error: url protocol should only be https or http.")}assertBody(body){if(!(body instanceof FormData)&&"string"!=typeof body)throw new TypeError("ApiClient.assertBody error: body should be a string or a FormData.")}buildBody(body){return JSON.stringify(body)}buildUrl(url,urlOptions){if("string"!=typeof url)throw new TypeError("ApiClient.buildUrl error: url should be a string.");const urlObj=new URL(`${url}.json?${this.apiVersion}`);urlOptions=urlOptions||{};for(const[key,value]of Object.entries(urlOptions)){if("string"!=typeof key)throw new TypeError("ApiClient.buildUrl error: urlOptions key should be a string.");if("string"==typeof value)urlObj.searchParams.append(key,value);else{if(!Array.isArray(value))throw new TypeError("ApiClient.buildUrl error: urlOptions value should be a string or array.");value.forEach((v=>{urlObj.searchParams.append(key,v)}))}}return urlObj}async sendRequest(method,url,body,options){this.assertUrl(url),this.assertMethod(method),body&&this.assertBody(body);const fetchStrategy="undefined"!=typeof customApiClientFetch?customApiClientFetch:fetch,fetchOptions={...await this.buildFetchOptions(),...options};fetchOptions.method=method,body&&(fetchOptions.body=body);try{return await fetchStrategy(url.toString(),fetchOptions)}catch(error){throw console.error(error),navigator.onLine?new PassboltServiceUnavailableError.A("Unable to reach the server, an unexpected error occurred"):new PassboltServiceUnavailableError.A("Unable to reach the server, you are not connected to the network")}}async fetchAndHandleResponse(method,url,body,options){const response=await this.sendRequest(method,url,body,options);return this.parseResponseJson(response)}async parseResponseJson(response){let responseJson;try{responseJson=await response.json()}catch(error){throw console.debug(response.url.toString(),error),new Error_PassboltBadResponseError(error,response)}if(!response.ok){const message=responseJson.header.message;throw new PassboltApiFetchError.A(message,{code:response.status,body:responseJson.body})}return responseJson}}},"./node_modules/uuid/dist/esm-browser/stringify.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});for(var _validate_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/uuid/dist/esm-browser/validate.js"),byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));const __WEBPACK_DEFAULT_EXPORT__=function stringify(arr){var offset=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,uuid=(byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]).toLowerCase();if(!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__.A)(uuid))throw TypeError("Stringified UUID is invalid");return uuid}},"./node_modules/uuid/dist/esm-browser/v4.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{var getRandomValues;__webpack_require__.d(__webpack_exports__,{A:()=>esm_browser_v4});var rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&!(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}var stringify=__webpack_require__("./node_modules/uuid/dist/esm-browser/stringify.js");const esm_browser_v4=function v4(options,buf,offset){var rnds=(options=options||{}).random||(options.rng||rng)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return(0,stringify.A)(rnds)}},"./node_modules/uuid/dist/esm-browser/validate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>esm_browser_validate});const regex=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const esm_browser_validate=function validate(uuid){return"string"==typeof uuid&&regex.test(uuid)}},"./node_modules/validator/es/lib/util/assertString.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function assertString(input){if(!("string"==typeof input||input instanceof String)){var invalidType=_typeof(input);throw null===input?invalidType="null":"object"===invalidType&&(invalidType=input.constructor.name),new TypeError("Expected a string but received a ".concat(invalidType))}}__webpack_require__.d(__webpack_exports__,{A:()=>assertString})}}]);