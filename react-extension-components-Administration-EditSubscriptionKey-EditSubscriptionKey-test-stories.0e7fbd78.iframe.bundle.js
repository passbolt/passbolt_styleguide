/*! For license information please see react-extension-components-Administration-EditSubscriptionKey-EditSubscriptionKey-test-stories.0e7fbd78.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[5865],{"./src/react-extension/components/Administration/EditSubscriptionKey/EditSubscriptionKey.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>EditSubscriptionKey_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),EditSubscriptionKey=__webpack_require__("./src/react-extension/components/Administration/EditSubscriptionKey/EditSubscriptionKey.js"),MockPort=__webpack_require__("./src/react-extension/test/mock/MockPort.js");const EditSubscriptionKey_test_stories={title:"Components/Administration/EditSubscriptionKey",component:EditSubscriptionKey.A},Default=(args=>react.createElement(EditSubscriptionKey.A,args)).bind({});Default.args=function defaultProps(){return{context:{port:new MockPort.A,editSubscriptionKey:{key:"data"},setContext:jest.fn()},administrationWorkspaceContext:{onUpdateSubscriptionKeyRequested:jest.fn()},dialogContext:{open:jest.fn()}}}();const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <EditSubscriptionKey {...args} />",...Default.parameters?.docs?.source}}}},"./src/react-extension/test/mock/MockPort.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function delay(t,v){return new Promise((resolve=>{setTimeout((()=>resolve(v)),t)}))}__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=class MockPort{constructor(storage){this.storage=storage,this.onListeners={},this.requestListeners={},this.emitListener={},this.onConnectErrorHandler={}}async emit(name,eventObject){let result;return console.debug(`PORT EMIT: ${name}`),console.debug("Arguments",eventObject),this.emitListener[name]?(result=await this.emitListener[name](eventObject),console.debug("response: ",result)):console.debug(`The emit ${name} has not been mocked`),delay(0,result)}on(name,callback){console.debug(`PORT ON: ${name}`),console.debug("PORT ON PARAMETERS:",callback),this.addOnListener(name,callback)}async request(name){let result;if(console.debug(`PORT REQUEST: ${name}`),console.debug("PORT REQUEST PARAMETERS:",Array.prototype.slice.call(arguments)),this.requestListeners[name]){const listenerArguments=Array.prototype.slice.call(arguments,1,arguments.length);console.debug("listenerArguments",listenerArguments),listenerArguments.push(this.storage),console.debug("listenerArguments",listenerArguments),result=await this.requestListeners[name](...listenerArguments),console.debug("response: ",result)}else console.debug(`The request ${name} has not been mocked`);return delay(0,result)}addEmitListener(name){console.debug(`PORT EMIT: ${name}`),console.debug("PORT EMIT PARAMETERS:",Array.prototype.slice.call(arguments))}addOnListener(name,callback){this.emitListener[name]=callback}addRequestListener(name,callback){this.requestListeners[name]=callback}onConnectError(callback){this.onConnectErrorHandler.callback=callback}}}}]);