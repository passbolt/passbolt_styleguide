/*! For license information please see react-extension-components-Administration-DisplayMfaPolicyAdministration-DisplayMfaPolicyAdministration-test-stories.7e4c5b76.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[8339],{"./src/react-extension/components/Administration/DisplayMfaPolicyAdministration/DisplayMfaPolicyAdministration.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayMfaPolicyAdministration_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),mockApiResponse=__webpack_require__("./test/mocks/mockApiResponse.js"),MockFetch=__webpack_require__("./src/react-extension/test/mock/MockFetch.js"),DisplayMfaPolicyAdministration=__webpack_require__("./src/react-extension/components/Administration/DisplayMfaPolicyAdministration/DisplayMfaPolicyAdministration.js"),ApiAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ApiAppContext.test.data.js");const settingDto={policy:__webpack_require__("./src/shared/models/mfaPolicy/MfaPolicyEnumeration.js").F.OPTIN,remember_me_for_a_month:"false"};var AdministrationMfaPolicyContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationMfaPolicy/AdministrationMfaPolicyContext.js");const DisplayMfaPolicyAdministration_test_stories={title:"Components/Administration/DisplayMfaPolicyAdministration",component:DisplayMfaPolicyAdministration.A};let currentStory=null;(new MockFetch.A).addGetFetchRequest(/mfa-policies\/settings\.json/,(async()=>{if("components-administration-displaymfapolicyadministration--default"===currentStory)return(0,mockApiResponse._)(settingDto);throw new Error("Unsupported story")}));const decorators=[(Story,context)=>(currentStory=context.id,react.createElement(react.Fragment,null,react.createElement(Story,null)))],Template=args=>react.createElement(AdministrationMfaPolicyContext.sO,args,react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(DisplayMfaPolicyAdministration.A,args))));Template.propTypes={context:prop_types_default().object};const Default=Template.bind({});Default.args=function defaultProps(data={}){const defaultProps1={context:(0,ApiAppContext_test_data.s)(data?.context),administrationWorkspaceContext:{setDisplayAdministrationWorkspaceAction:jest.fn(),resetDisplayAdministrationWorkspaceAction:jest.fn()},actionFeedbackContext:{displaySuccess:jest.fn(),displayError:jest.fn()},t:text=>text};return Object.assign(defaultProps1,data)}(),Default.decorators=decorators;const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => <AdminMfaPolicyContextProvider {...args}>\n    <div className="panel middle">\n      <div className="grid grid-responsive-12">\n        <DisplayMfaPolicyAdministration {...args} />\n      </div>\n    </div>\n  </AdminMfaPolicyContextProvider>',...Default.parameters?.docs?.source}}}},"./src/img/svg/file_text.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,_path2,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgFileText(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:24,height:24,fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"})),_path2||(_path2=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M14 2v4a2 2 0 0 0 2 2h4M10 9H8M16 13H8M16 17H8"})))}},"./src/react-extension/components/Administration/DisplayMfaPolicyAdministration/DisplayMfaPolicyAdministration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>DisplayMfaPolicyAdministration_DisplayMfaPolicyAdministration});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),file_text=__webpack_require__("./src/img/svg/file_text.svg"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),AdministrationMfaPolicyContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationMfaPolicy/AdministrationMfaPolicyContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js");class DisplayAdministrationMfaPolicyActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleSave=this.handleSave.bind(this)}isSaveEnabled(){return!this.props.adminMfaPolicyContext.isProcessing()}async handleSave(){if(this.isSaveEnabled())try{await this.props.adminMfaPolicyContext.save(),this.handleSaveSuccess()}catch(error){this.handleSaveError(error)}finally{this.props.adminMfaPolicyContext.setProcessing(!1)}}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The MFA policy settings were updated."))}async handleSaveError(error){"UserAbortsOperationError"!==error.name&&(console.error(error),await this.props.actionFeedbackContext.displayError(error.message))}render(){return react.createElement("div",{className:"actions-wrapper"},react.createElement("button",{className:"button primary form",type:"button",disabled:!this.isSaveEnabled(),id:"save-settings",onClick:this.handleSave},react.createElement("span",null,react.createElement(es.x6,null,"Save"))))}}DisplayAdministrationMfaPolicyActions.propTypes={adminMfaPolicyContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationMfaPolicyActions_DisplayAdministrationMfaPolicyActions=(0,AdministrationMfaPolicyContext.yS)((0,ActionFeedbackContext.ot)((0,es.CI)("common")(DisplayAdministrationMfaPolicyActions)));DisplayAdministrationMfaPolicyActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"isSaveEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"handleSave",docblock:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the save action.\nIn case we have more than one domain and we have changes, we should display a confirmation dialog to inform the user"},{name:"handleSaveSuccess",docblock:"Handle save operation success.",modifiers:["async"],params:[],returns:null,description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:null,description:"Handle save operation error."}],displayName:"DisplayAdministrationMfaPolicyActions",props:{adminMfaPolicyContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var portals=__webpack_require__("./src/shared/utils/portals.js");class DisplayMfaPolicyAdministration extends react.Component{constructor(props){super(props),this.bindCallbacks()}async componentDidMount(){await this.findSettings()}componentWillUnmount(){this.props.adminMfaPolicyContext.clearContext()}bindCallbacks(){this.handleInputChange=this.handleInputChange.bind(this)}async findSettings(){await this.props.adminMfaPolicyContext.findSettings()}async handleInputChange(event){const field=event.target.name;let value=event.target.value;"rememberMeForAMonth"===field&&(value=event.target.checked),this.props.adminMfaPolicyContext.setSettings(field,value)}hasAllInputDisabled(){return this.props.adminMfaPolicyContext.isProcessing()}render(){const settings=this.props.adminMfaPolicyContext.getSettings();return react.createElement("div",{className:"row"},react.createElement("div",{className:"mfa-policy-settings main-column"},react.createElement("div",{className:"main-content"},react.createElement("h3",{className:"title",id:"mfa-policy-settings-title"},react.createElement(es.x6,null,"MFA Policy")),react.createElement("form",{className:"form"},react.createElement("h4",{className:"no-border",id:"mfa-policy-subtitle"},react.createElement(es.x6,null,"Default users multi factor authentication policy")),react.createElement("p",{id:"mfa-policy-description"},react.createElement(es.x6,null,"You can choose the default behaviour of multi factor authentication for all users.")),react.createElement("div",{className:"radiolist-alt"},react.createElement("div",{className:"input radio "+("mandatory"===settings?.policy?"checked":""),id:"mfa-policy-mandatory"},react.createElement("input",{type:"radio",value:"mandatory",onChange:this.handleInputChange,name:"policy",checked:"mandatory"===settings?.policy,id:"mfa-policy-mandatory-radio",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"mfa-policy-mandatory-radio"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Prompt")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Users have to enable multi factor authentication. If they don't, they will be reminded every time they log in.")))),react.createElement("div",{className:"input radio "+("opt-in"===settings?.policy?"checked":""),id:"mfa-policy-opt-in"},react.createElement("input",{type:"radio",value:"opt-in",onChange:this.handleInputChange,name:"policy",checked:"opt-in"===settings?.policy,id:"mfa-policy-opt-in-radio",disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"mfa-policy-opt-in-radio"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Opt-in (default)")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Users have the choice to enable multi factor authentication in their profile workspace."))))),react.createElement("h4",{id:"mfa-policy-remember-subtitle"},"Remember a device for a month"),react.createElement("span",{className:"input toggle-switch form-element "},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"rememberMeForAMonth",onChange:this.handleInputChange,disabled:this.hasAllInputDisabled(),checked:settings?.rememberMeForAMonth,id:"remember-toggle-button"}),react.createElement("label",{htmlFor:"remember-toggle-button"},react.createElement(es.x6,null,"Allow “Remember this device for a month.“ option during MFA."))))),this.props.adminMfaPolicyContext.hasSettingsChanges()&&react.createElement("div",{className:"warning message",id:"mfa-policy-setting-banner"},react.createElement("div",null,react.createElement("p",null,react.createElement(es.x6,null,"Don't forget to save your settings to apply your modification."))))),react.createElement(DisplayAdministrationMfaPolicyActions_DisplayAdministrationMfaPolicyActions,null),(0,portals.m)(react.createElement("div",{className:"sidebar-help-section"},react.createElement("h3",null,react.createElement(es.x6,null,"Need some help?")),react.createElement("p",null,react.createElement(es.x6,null,"For more information about MFA policy settings, checkout the dedicated page on the help website.")),react.createElement("a",{className:"button",href:"https://passbolt.com/docs/admin/authentication/mfa-policy",target:"_blank",rel:"noopener noreferrer"},react.createElement(file_text.A,null),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation")))),document.getElementById("administration-help-panel")))}}DisplayMfaPolicyAdministration.propTypes={context:prop_types_default().object,administrationWorkspaceContext:prop_types_default().object,adminMfaPolicyContext:prop_types_default().object,t:prop_types_default().func};const DisplayMfaPolicyAdministration_DisplayMfaPolicyAdministration=(0,AppContext.L)((0,AdministrationWorkspaceContext.Kk)((0,AdministrationMfaPolicyContext.yS)((0,es.CI)("common")(DisplayMfaPolicyAdministration))));DisplayMfaPolicyAdministration.__docgenInfo={description:"",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"findSettings",docblock:"Bind callbacks methods",modifiers:["async"],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleInputChange",docblock:"Handle policy input change.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:["async"],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle policy input change."},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"}],displayName:"DisplayMfaPolicyAdministration",props:{context:{description:"",type:{name:"object"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},adminMfaPolicyContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}},"./src/react-extension/contexts/ActionFeedbackContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>ActionFeedbackContextProvider,b_:()=>ActionFeedbackContext,ot:()=>withActionFeedback});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),uuid__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js");const ActionFeedbackContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({feedbacks:[],displaySuccess:()=>{},displayWarning:()=>{},displayError:()=>{},remove:()=>{}});class ActionFeedbackContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{feedbacks:[],displaySuccess:this.displaySuccess.bind(this),displayWarning:this.displayWarning.bind(this),displayError:this.displayError.bind(this),remove:this.remove.bind(this)}}displaySuccess(feedbackToAdd){this.setState({feedbacks:[...this.state.feedbacks,{id:(0,uuid__WEBPACK_IMPORTED_MODULE_1__.A)(),type:"success",message:feedbackToAdd}]})}displayWarning(feedbackToAdd){this.setState({feedbacks:[...this.state.feedbacks,{id:(0,uuid__WEBPACK_IMPORTED_MODULE_1__.A)(),type:"warning",message:feedbackToAdd}]})}displayError(feedbackToAdd){this.setState({feedbacks:[...this.state.feedbacks,{id:(0,uuid__WEBPACK_IMPORTED_MODULE_1__.A)(),type:"error",message:feedbackToAdd}]})}remove(feedbackToRemove){this.setState({feedbacks:this.state.feedbacks.filter((feedback=>feedbackToRemove.id!==feedback.id))})}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ActionFeedbackContext.Provider,{value:this.state},this.props.children)}}function withActionFeedback(WrappedComponent){return class WithActionFeedback extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ActionFeedbackContext.Consumer,null,(actionFeedbackContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{actionFeedbackContext,...this.props})))}}}ActionFeedbackContextProvider.displayName="ActionFeedbackContextProvider",ActionFeedbackContextProvider.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any},ActionFeedbackContextProvider.__docgenInfo={description:"The related context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"displaySuccess",docblock:"Display the feedback in a success mode\n@param feedbackToAdd A feedback",modifiers:[],params:[{name:"feedbackToAdd",description:"A feedback",optional:!1}],returns:null,description:"Display the feedback in a success mode"},{name:"displayWarning",docblock:"Display the feedback in a warning mode\n@param feedbackToAdd A feedback",modifiers:[],params:[{name:"feedbackToAdd",description:"A feedback",optional:!1}],returns:null,description:"Display the feedback in a warning mode"},{name:"displayError",docblock:"Display the feedback in a error mode\n@param feedbackToAdd A feedback",modifiers:[],params:[{name:"feedbackToAdd",description:"A feedback",optional:!1}],returns:null,description:"Display the feedback in a error mode"},{name:"remove",docblock:"Remove the feedback\n@param feedbackToRemove A feedback",modifiers:[],params:[{name:"feedbackToRemove",description:"A feedback",optional:!1}],returns:null,description:"Remove the feedback"}],displayName:"ActionFeedbackContextProvider",props:{children:{description:"",type:{name:"any"},required:!1}}}},"./src/react-extension/contexts/Administration/AdministrationMfaPolicy/AdministrationMfaPolicyContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{sO:()=>AdminMfaPolicyContextProvider,yS:()=>withAdminMfaPolicy});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const mfaPolicy_MfaPolicyViewModel=class MfaPolicyViewModel{constructor(settings={remember_me_for_a_month:!1}){this.policy=settings.policy,this.rememberMeForAMonth=settings.remember_me_for_a_month}};var apiClient=__webpack_require__("./src/shared/lib/apiClient/apiClient.js");const mfaPolicy_MfaPolicyService=class MfaPolicyService{constructor(apiClientOptions){apiClientOptions.setResourceName("mfa-policies/settings"),this.apiClient=new apiClient.O(apiClientOptions)}async find(){return(await this.apiClient.findAll()).body}async save(dto){await this.apiClient.create(dto)}};var MfaPolicyEnumeration=__webpack_require__("./src/shared/models/mfaPolicy/MfaPolicyEnumeration.js");const mfaPolicy_MfaPolicyDto=class MfaPolicyDto{constructor(settings={rememberMeForAMonth:!1}){this.policy=settings.policy||MfaPolicyEnumeration.F.OPTIN,this.remember_me_for_a_month=settings.rememberMeForAMonth}},AdminMfaPolicyContext=react.createContext({getCurrentSettings:()=>{},getSettings:()=>{},setSettings:()=>{},hasSettingsChanges:()=>{},findSettings:()=>{},setProcessing:()=>{},isProcessing:()=>{},clearContext:()=>{},save:()=>{}});class AdminMfaPolicyContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState;const apiClientOptions=props.context.getApiClientOptions();this.mfaPolicyService=new mfaPolicy_MfaPolicyService(apiClientOptions)}get defaultState(){return{settings:new mfaPolicy_MfaPolicyViewModel,currentSettings:new mfaPolicy_MfaPolicyViewModel,processing:!0,getCurrentSettings:this.getCurrentSettings.bind(this),getSettings:this.getSettings.bind(this),setSettings:this.setSettings.bind(this),findSettings:this.findSettings.bind(this),hasSettingsChanges:this.hasSettingsChanges.bind(this),isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),clearContext:this.clearContext.bind(this),save:this.save.bind(this)}}async findSettings(callback=()=>{}){this.setProcessing(!0);const result=await this.mfaPolicyService.find(),currentSettings=new mfaPolicy_MfaPolicyViewModel(result);this.setState({currentSettings}),this.setState({settings:currentSettings},callback),this.setProcessing(!1)}async save(){this.setProcessing(!0);const newSettings=new mfaPolicy_MfaPolicyDto(this.state.settings);await this.mfaPolicyService.save(newSettings),await this.findSettings()}getCurrentSettings(){return this.state.currentSettings}getSettings(){return this.state.settings}setSettings(key,value,callback=()=>{}){const newSettings=Object.assign({},this.state.settings,{[key]:value});this.setState({settings:newSettings},callback)}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}hasSettingsChanges(){return JSON.stringify(this.state.currentSettings)!==JSON.stringify(this.state.settings)}clearContext(){const{currentSettings,settings,processing}=this.defaultState;this.setState({currentSettings,settings,processing})}render(){return react.createElement(AdminMfaPolicyContext.Provider,{value:this.state},this.props.children)}}AdminMfaPolicyContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any,t:prop_types_default().any,actionFeedbackContext:prop_types_default().object};(0,AppContext.L)(AdminMfaPolicyContextProvider);function withAdminMfaPolicy(WrappedComponent){return class WithAdminMfaPolicy extends react.Component{render(){return react.createElement(AdminMfaPolicyContext.Consumer,null,(adminMfaPolicyContext=>react.createElement(WrappedComponent,{adminMfaPolicyContext,...this.props})))}}}AdminMfaPolicyContextProvider.__docgenInfo={description:"The Administration mfa policy context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findSettings",docblock:"Find the self registration settings\n@return {Promise<void>}",modifiers:["async"],params:[{name:"callback",optional:!0}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the self registration settings"},{name:"save",docblock:"Whenever the save has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the save has been requested"},{name:"getCurrentSettings",docblock:"Returns the setting actually saved inside DB\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the setting actually saved inside DB"},{name:"getSettings",docblock:"Returns the settings that have been fetch previously.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the settings that have been fetch previously."},{name:"setSettings",docblock:"Handle settings changes.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"key",optional:!1},{name:"value",optional:!1},{name:"callback",optional:!0}],returns:{type:{name:"void"}},description:"Handle settings changes."},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"hasSettingsChanges",docblock:"Check if there are changes to apply\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"Check if there are changes to apply"},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."}],displayName:"AdminMfaPolicyContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"any"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1}}}},"./src/react-extension/test/mock/MockFetch.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var fetch_mock__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/fetch-mock/dist/esm/index.js");const __WEBPACK_DEFAULT_EXPORT__=class MockFetch{async addGetFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.Ay.get(name,callback)}async addPostFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.Ay.post(name,callback)}async addPutFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.Ay.put(name,callback)}async addDeleteFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.Ay.delete(name,callback)}}},"./src/shared/lib/Error/PassboltApiFetchError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltApiFetchError extends Error{constructor(message,data){super(message),this.name="PassboltApiFetchError",this.data=data||{}}}const __WEBPACK_DEFAULT_EXPORT__=PassboltApiFetchError},"./src/shared/lib/Error/PassboltServiceUnavailableError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltServiceUnavailableError extends Error{constructor(message){super(message=message||"The service is unavailable"),this.name="PassboltServiceUnavailableError"}}const __WEBPACK_DEFAULT_EXPORT__=PassboltServiceUnavailableError},"./src/shared/lib/apiClient/apiClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ApiClient});var PassboltApiFetchError=__webpack_require__("./src/shared/lib/Error/PassboltApiFetchError.js");class PassboltBadResponseError extends Error{constructor(){super("An internal error occurred. The server response could not be parsed. Please contact your administrator."),this.name="PassboltBadResponseError"}}const Error_PassboltBadResponseError=PassboltBadResponseError;var PassboltServiceUnavailableError=__webpack_require__("./src/shared/lib/Error/PassboltServiceUnavailableError.js");const SUPPORTED_METHODS=["GET","POST","PUT","DELETE"];class ApiClient{constructor(options){if(this.options=options,!this.options.getBaseUrl())throw new TypeError("ApiClient constructor error: baseUrl is required.");if(!this.options.getResourceName())throw new TypeError("ApiClient constructor error: resourceName is required.");try{let rawBaseUrl=this.options.getBaseUrl().toString();rawBaseUrl.endsWith("/")&&(rawBaseUrl=rawBaseUrl.slice(0,-1));let resourceName=this.options.getResourceName();resourceName.startsWith("/")&&(resourceName=resourceName.slice(1)),resourceName.endsWith("/")&&(resourceName=resourceName.slice(0,-1)),this.baseUrl=`${rawBaseUrl}/${resourceName}`,this.baseUrl=new URL(this.baseUrl)}catch(typeError){throw new TypeError("ApiClient constructor error: b.")}this.apiVersion="api-version=v2"}getDefaultHeaders(){return{Accept:"application/json","content-type":"application/json"}}async buildFetchOptions(){const optionHeaders=await this.options.getHeaders();return{credentials:"include",headers:{...this.getDefaultHeaders(),...optionHeaders}}}async get(id,urlOptions){this.assertValidId(id);const url=this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async delete(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("DELETE",url,bodyString)}async findAll(urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async create(body,urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{}),bodyString=this.buildBody(body);return this.fetchAndHandleResponse("POST",url,bodyString)}async update(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("PUT",url,bodyString)}async updateAll(body,urlOptions={}){const url=this.buildUrl(this.baseUrl.toString(),urlOptions),bodyString=body?this.buildBody(body):null;return this.fetchAndHandleResponse("PUT",url,bodyString)}assertValidId(id){if(!id)throw new TypeError("ApiClient.assertValidId error: id cannot be empty");if("string"!=typeof id)throw new TypeError("ApiClient.assertValidId error: id should be a string")}assertMethod(method){if("string"!=typeof method)throw new TypeError("ApiClient.assertValidMethod method should be a string.");if(SUPPORTED_METHODS.indexOf(method.toUpperCase())<0)throw new TypeError(`ApiClient.assertValidMethod error: method ${method} is not supported.`)}assertUrl(url){if(!url)throw new TypeError("ApliClient.assertUrl error: url is required.");if(!(url instanceof URL))throw new TypeError("ApliClient.assertUrl error: url should be a valid URL object.");if("https:"!==url.protocol&&"http:"!==url.protocol)throw new TypeError("ApliClient.assertUrl error: url protocol should only be https or http.")}assertBody(body){if(!(body instanceof FormData)&&"string"!=typeof body)throw new TypeError("ApiClient.assertBody error: body should be a string or a FormData.")}buildBody(body){return JSON.stringify(body)}buildUrl(url,urlOptions){if("string"!=typeof url)throw new TypeError("ApiClient.buildUrl error: url should be a string.");const urlObj=new URL(`${url}.json?${this.apiVersion}`);urlOptions=urlOptions||{};for(const[key,value]of Object.entries(urlOptions)){if("string"!=typeof key)throw new TypeError("ApiClient.buildUrl error: urlOptions key should be a string.");if("string"==typeof value)urlObj.searchParams.append(key,value);else{if(!Array.isArray(value))throw new TypeError("ApiClient.buildUrl error: urlOptions value should be a string or array.");value.forEach((v=>{urlObj.searchParams.append(key,v)}))}}return urlObj}async sendRequest(method,url,body,options){this.assertUrl(url),this.assertMethod(method),body&&this.assertBody(body);const fetchStrategy="undefined"!=typeof customApiClientFetch?customApiClientFetch:fetch,fetchOptions={...await this.buildFetchOptions(),...options};fetchOptions.method=method,body&&(fetchOptions.body=body);try{return await fetchStrategy(url.toString(),fetchOptions)}catch(error){throw console.error(error),navigator.onLine?new PassboltServiceUnavailableError.A("Unable to reach the server, an unexpected error occurred"):new PassboltServiceUnavailableError.A("Unable to reach the server, you are not connected to the network")}}async fetchAndHandleResponse(method,url,body,options){const response=await this.sendRequest(method,url,body,options);return this.parseResponseJson(response)}async parseResponseJson(response){let responseJson;try{responseJson=await response.json()}catch(error){throw console.debug(response.url.toString(),error),new Error_PassboltBadResponseError(error,response)}if(!response.ok){const message=responseJson.header.message;throw new PassboltApiFetchError.A(message,{code:response.status,body:responseJson.body})}return responseJson}}},"./src/shared/models/entity/role/roleEntity.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _abstract_entityV2__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/models/entity/abstract/entityV2.js");class RoleEntity extends _abstract_entityV2__WEBPACK_IMPORTED_MODULE_0__.A{static getSchema(){return{type:"object",required:["id","name"],properties:{id:{type:"string",format:"uuid"},name:{type:"string",enum:[RoleEntity.ROLE_ADMIN,RoleEntity.ROLE_USER,RoleEntity.ROLE_GUEST,RoleEntity.ROLE_ROOT]},description:{type:"string",maxLength:255},created:{type:"string",format:"date-time"},modified:{type:"string",format:"date-time"}}}}get id(){return this._props.id}get name(){return this._props.name}get description(){return this._props.description||null}get created(){return this._props.created||null}get modified(){return this._props.modified||null}isAdmin(){return this.name===RoleEntity.ROLE_ADMIN}static get ENTITY_NAME(){return"Role"}static get ROLE_ADMIN(){return"admin"}static get ROLE_USER(){return"user"}static get ROLE_GUEST(){return"guest"}static get ROLE_ROOT(){return"root"}}const __WEBPACK_DEFAULT_EXPORT__=RoleEntity},"./src/shared/models/mfaPolicy/MfaPolicyEnumeration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>MfaPolicyEnumerationTypes});const MfaPolicyEnumerationTypes={MANDATORY:"mandatory",OPTIN:"opt-in"}},"./src/shared/utils/portals.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>createSafePortal});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-dom/index.js");function createSafePortal(children,domNode,key){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,domNode&&(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children,domNode,key))}createSafePortal.__docgenInfo={description:'Create a portal in a "safe" mode.\n"Safe" mode only means that if the given HTML element doesn\'t exist, the method doesn\'t crash.\nIt will simply ignore the rendering if it happens.\n@param {ReactNode} children the elements to render in the portal\n@param {Element | DocumentFragment} domNode the target where to render the children.\n@param {null | string} [key] a React compatible key to be passed to `createPortal` if any\n@returns {JSX}',methods:[],displayName:"createSafePortal"}},"./test/mocks/mockApiResponse.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>mockApiResponse});const mockApiResponse=(body={},header={})=>Promise.resolve(JSON.stringify({header,body}))},"./node_modules/validator/es/lib/util/assertString.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function assertString(input){if(!("string"==typeof input||input instanceof String)){var invalidType=_typeof(input);throw null===input?invalidType="null":"object"===invalidType&&(invalidType=input.constructor.name),new TypeError("Expected a string but received a ".concat(invalidType))}}__webpack_require__.d(__webpack_exports__,{A:()=>assertString})}}]);