/*! For license information please see react-extension-components-Administration-SendTestMailDialog-SendTestMailDialog-test-stories.80e8c7ed.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[3961],{"./src/react-extension/components/Administration/SendTestMailDialog/SendTestMailDialog.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EmailSendError:()=>EmailSendError,EmailSendSuccess:()=>EmailSendSuccess,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SendTestMailDialog_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),mockApiResponse=__webpack_require__("./test/mocks/mockApiResponse.js"),MockFetch=__webpack_require__("./src/react-extension/test/mock/MockFetch.js"),SendTestMailDialog=__webpack_require__("./src/react-extension/components/Administration/SendTestMailDialog/SendTestMailDialog.js"),ApiAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ApiAppContext.test.data.js");function defaultProps(props={}){const defaultProps1={context:(0,ApiAppContext_test_data.s)(props?.context),administrationWorkspaceContext:{setDisplayAdministrationWorkspaceAction:jest.fn(),resetDisplayAdministrationWorkspaceAction:jest.fn()},dialogContext:{open:jest.fn()}};return delete props.context,Object.assign(defaultProps1,props)}function defaultDebugResponse(data={}){return{...{debug:[{message:"Email configuration\n  -------------------------------------------------------------------------------\n  Host: smtp.mandrillapp.com\n  Port: 587\n  Username: contact@passbolt.com\n  Password: *********\n  TLS: true\n  Sending email from: test <test@passbolt.com>\n  Sending email to: no-reply@passbolt.com\n  -------------------------------------------------------------------------------\n  Trace\n  [220] smtp.mandrillapp.com ESMTP\n  > EHLO localhost\n  [250] relay-8.eu-west-1.relay-prod\n  [250] PIPELINING\n  [250] SIZE 26214400\n  [250] STARTTLS\n  [250] AUTH PLAIN LOGIN\n  [250] ENHANCEDSTATUSCODES\n  [250] 8BITMIME\n  [250] CHUNKING\n  > STARTTLS\n  [220] 2.0.0 Ready to start TLS\n  > EHLO localhost\n  [250] relay-8.eu-west-1.relay-prod\n  [250] PIPELINING\n  [250] SIZE 26214400\n  [250] AUTH PLAIN LOGIN\n  [250] ENHANCEDSTATUSCODES\n  [250] 8BITMIME\n  [250] CHUNKING\n  > AUTH PLAIN XXXXXXXXXXXXXXXXX\n  [235] 2.7.0 Authentication successful\n  > MAIL FROM:<test@passbolt.com>\n  [250] 2.1.0 Ok\n  > RCPT TO:<no-reply@passbolt.com>\n  [250] 2.1.5 Ok\n  > DATA\n  [354] End data with <CR><LF>.<CR><LF>\n  > From: test <test@passbolt.com>\n  To: no-reply@passbolt.com\n  Date: Tue, 26 Jul 2022 12:52:22 +0000\n  Message-ID: <2304-03249-20394@debian-gnu-linux-10-vm>\n  Subject: Passbolt test email\n  MIME-Version: 1.0\n  Content-Type: text/plain; charset=UTF-8\n  Content-Transfer-Encoding: 8bit\n  \n  Congratulations!\n  If you receive this email, it means that your passbolt smtp configuration is working fine.\n  \n  \n  \n  \n  .\n  [250] 2.0.0 Ok: queued as 6F5ED20581\n  > QUIT\n  The message has been successfully sent!"}]},...data}}var AdminSmtpSettingsContext=__webpack_require__("./src/react-extension/contexts/AdminSmtpSettingsContext.js");let currentStory=null;(new MockFetch.A).addPostFetchRequest(/smtp\/email\.json/,(async()=>{switch(currentStory){case"components-administration-sendtestmaildialog--email-send-success":return(0,mockApiResponse._)(defaultDebugResponse());case"components-administration-sendtestmaildialog--email-send-error":{const response={header:{message:"Something went wrong!"},body:defaultDebugResponse()};return new Response(JSON.stringify(response),{status:400})}}throw new Error("Unsupported story")}));const SendTestMailDialog_test_stories={title:"Components/Administration/SendTestMailDialog",component:SendTestMailDialog.A,decorators:[(Story,storyArgs)=>(currentStory=storyArgs.id,react.createElement(AdminSmtpSettingsContext.Ay,storyArgs.args,react.createElement(Story,storyArgs.args),";"))]},EmailSendSuccess={args:defaultProps()},EmailSendError={args:defaultProps()},__namedExportsOrder=["EmailSendSuccess","EmailSendError"];EmailSendSuccess.parameters={...EmailSendSuccess.parameters,docs:{...EmailSendSuccess.parameters?.docs,source:{originalSource:"{\n  args: defaultProps()\n}",...EmailSendSuccess.parameters?.docs?.source}}},EmailSendError.parameters={...EmailSendError.parameters,docs:{...EmailSendError.parameters?.docs,source:{originalSource:"{\n  args: defaultProps()\n}",...EmailSendError.parameters?.docs?.source}}}},"./src/react-extension/test/mock/MockFetch.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var fetch_mock__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/fetch-mock/esm/client.js");const __WEBPACK_DEFAULT_EXPORT__=class MockFetch{async addGetFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.get(name,callback)}async addPostFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.post(name,callback)}async addPutFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.put(name,callback)}async addDeleteFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.delete(name,callback)}}},"./src/shared/lib/Error/PassboltApiFetchError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltApiFetchError extends Error{constructor(message,data){super(message),this.name="PassboltApiFetchError",this.data=data||{}}}const __WEBPACK_DEFAULT_EXPORT__=PassboltApiFetchError},"./src/shared/lib/Error/PassboltServiceUnavailableError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltServiceUnavailableError extends Error{constructor(message){super(message=message||"The service is unavailable"),this.name="PassboltServiceUnavailableError"}}const __WEBPACK_DEFAULT_EXPORT__=PassboltServiceUnavailableError},"./src/shared/lib/apiClient/apiClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ApiClient});var PassboltApiFetchError=__webpack_require__("./src/shared/lib/Error/PassboltApiFetchError.js");class PassboltBadResponseError extends Error{constructor(){super("An internal error occurred. The server response could not be parsed. Please contact your administrator."),this.name="PassboltBadResponseError"}}const Error_PassboltBadResponseError=PassboltBadResponseError;var PassboltServiceUnavailableError=__webpack_require__("./src/shared/lib/Error/PassboltServiceUnavailableError.js");const SUPPORTED_METHODS=["GET","POST","PUT","DELETE"];class ApiClient{constructor(options){if(this.options=options,!this.options.getBaseUrl())throw new TypeError("ApiClient constructor error: baseUrl is required.");if(!this.options.getResourceName())throw new TypeError("ApiClient constructor error: resourceName is required.");try{let rawBaseUrl=this.options.getBaseUrl().toString();rawBaseUrl.endsWith("/")&&(rawBaseUrl=rawBaseUrl.slice(0,-1));let resourceName=this.options.getResourceName();resourceName.startsWith("/")&&(resourceName=resourceName.slice(1)),resourceName.endsWith("/")&&(resourceName=resourceName.slice(0,-1)),this.baseUrl=`${rawBaseUrl}/${resourceName}`,this.baseUrl=new URL(this.baseUrl)}catch(typeError){throw new TypeError("ApiClient constructor error: b.")}this.apiVersion="api-version=v2"}getDefaultHeaders(){return{Accept:"application/json","content-type":"application/json"}}async buildFetchOptions(){const optionHeaders=await this.options.getHeaders();return{credentials:"include",headers:{...this.getDefaultHeaders(),...optionHeaders}}}async get(id,urlOptions){this.assertValidId(id);const url=this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async delete(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("DELETE",url,bodyString)}async findAll(urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async create(body,urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{}),bodyString=this.buildBody(body);return this.fetchAndHandleResponse("POST",url,bodyString)}async update(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("PUT",url,bodyString)}async updateAll(body,urlOptions={}){const url=this.buildUrl(this.baseUrl.toString(),urlOptions),bodyString=body?this.buildBody(body):null;return this.fetchAndHandleResponse("PUT",url,bodyString)}assertValidId(id){if(!id)throw new TypeError("ApiClient.assertValidId error: id cannot be empty");if("string"!=typeof id)throw new TypeError("ApiClient.assertValidId error: id should be a string")}assertMethod(method){if("string"!=typeof method)throw new TypeError("ApiClient.assertValidMethod method should be a string.");if(SUPPORTED_METHODS.indexOf(method.toUpperCase())<0)throw new TypeError(`ApiClient.assertValidMethod error: method ${method} is not supported.`)}assertUrl(url){if(!url)throw new TypeError("ApliClient.assertUrl error: url is required.");if(!(url instanceof URL))throw new TypeError("ApliClient.assertUrl error: url should be a valid URL object.");if("https:"!==url.protocol&&"http:"!==url.protocol)throw new TypeError("ApliClient.assertUrl error: url protocol should only be https or http.")}assertBody(body){if(!(body instanceof FormData)&&"string"!=typeof body)throw new TypeError("ApiClient.assertBody error: body should be a string or a FormData.")}buildBody(body){return JSON.stringify(body)}buildUrl(url,urlOptions){if("string"!=typeof url)throw new TypeError("ApiClient.buildUrl error: url should be a string.");const urlObj=new URL(`${url}.json?${this.apiVersion}`);urlOptions=urlOptions||{};for(const[key,value]of Object.entries(urlOptions)){if("string"!=typeof key)throw new TypeError("ApiClient.buildUrl error: urlOptions key should be a string.");if("string"==typeof value)urlObj.searchParams.append(key,value);else{if(!Array.isArray(value))throw new TypeError("ApiClient.buildUrl error: urlOptions value should be a string or array.");value.forEach((v=>{urlObj.searchParams.append(key,v)}))}}return urlObj}async sendRequest(method,url,body,options){this.assertUrl(url),this.assertMethod(method),body&&this.assertBody(body);const fetchStrategy="undefined"!=typeof customApiClientFetch?customApiClientFetch:fetch,fetchOptions={...await this.buildFetchOptions(),...options};fetchOptions.method=method,body&&(fetchOptions.body=body);try{return await fetchStrategy(url.toString(),fetchOptions)}catch(error){throw console.error(error),navigator.onLine?new PassboltServiceUnavailableError.A("Unable to reach the server, an unexpected error occurred"):new PassboltServiceUnavailableError.A("Unable to reach the server, you are not connected to the network")}}async fetchAndHandleResponse(method,url,body,options){const response=await this.sendRequest(method,url,body,options);return this.parseResponseJson(response)}async parseResponseJson(response){let responseJson;try{responseJson=await response.json()}catch(error){throw console.debug(response.url.toString(),error),new Error_PassboltBadResponseError(error,response)}if(!response.ok){const message=responseJson.header.message;throw new PassboltApiFetchError.A(message,{code:response.status,body:responseJson.body})}return responseJson}}},"./src/shared/services/validator/AppEmailValidatorService.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>AppEmailValidatorService});var SiteSettings=__webpack_require__("./src/shared/lib/Settings/SiteSettings.js"),lib=__webpack_require__("./node_modules/xregexp/lib/index.js"),lib_default=__webpack_require__.n(lib);class IsEmailValidator{static validate(value){return"string"==typeof value&&lib_default()("^[\\p{L}0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\p{L}0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[_\\p{L}0-9][-_\\p{L}0-9]*\\.)*(?:[\\p{L}0-9][-\\p{L}0-9]{0,62})\\.(?:(?:[a-z]{2}\\.)?[a-z]{2,})$","i").test(value)}}class IsRegexValidator{constructor(regex){if("string"!=typeof regex)throw Error("The regex should be a string.");this.regex=new(lib_default())(regex)}validate(value){return"string"==typeof value&&this.regex.test(value)}}class AppEmailValidatorService{static validate(value,appSettings){return AppEmailValidatorService.getValidator(appSettings).validate(value)}static getValidator(appSettings){return appSettings&&appSettings instanceof SiteSettings.A&&appSettings.emailValidateRegex?new IsRegexValidator(appSettings.emailValidateRegex):IsEmailValidator}}},"./test/mocks/mockApiResponse.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>mockApiResponse});const mockApiResponse=(body={},header={})=>Promise.resolve(JSON.stringify({header,body}))}}]);