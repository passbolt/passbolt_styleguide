/*! For license information please see 2832.ca64cf96.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[2832],{"./src/react-extension/components/Resource/EditResource/EditResource.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>EditResource_EditResource});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),DialogWrapper=__webpack_require__("./src/react-extension/components/Common/Dialog/DialogWrapper/DialogWrapper.js"),FormSubmitButton=__webpack_require__("./src/react-extension/components/Common/Inputs/FormSubmitButton/FormSubmitButton.js"),FormCancelButton=__webpack_require__("./src/react-extension/components/Common/Inputs/FormSubmitButton/FormCancelButton.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),ResourceTypesLocalStorageContext=__webpack_require__("./src/shared/context/ResourceTypesLocalStorageContext/ResourceTypesLocalStorageContext.js"),SelectResourceForm=__webpack_require__("./src/react-extension/components/Resource/ResourceForm/SelectResourceForm.js"),resource_resourceFormEntity=__webpack_require__("./src/shared/models/entity/resource/resourceFormEntity.js"),resourceTypesCollection=__webpack_require__("./src/shared/models/entity/resourceType/resourceTypesCollection.js"),ResourceEditCreateFormEnumerationTypes=__webpack_require__("./src/shared/models/resource/ResourceEditCreateFormEnumerationTypes.js"),AddResourceName=__webpack_require__("./src/react-extension/components/Resource/ResourceForm/AddResourceName.js"),OrchestrateResourceForm=__webpack_require__("./src/react-extension/components/Resource/ResourceForm/OrchestrateResourceForm.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),SecretGenerator=__webpack_require__("./src/shared/lib/SecretGenerator/SecretGenerator.js"),ConfirmCreateEdit=__webpack_require__("./src/react-extension/components/Resource/ConfirmCreateEdit/ConfirmCreateEdit.js"),SecretGeneratorComplexity=__webpack_require__("./src/shared/lib/SecretGenerator/SecretGeneratorComplexity.js"),memoize_one_esm=__webpack_require__("./node_modules/memoize-one/dist/memoize-one.esm.js"),pownedService=__webpack_require__("./src/shared/services/api/secrets/pownedService.js"),PasswordPoliciesContext=__webpack_require__("./src/shared/context/PasswordPoliciesContext/PasswordPoliciesContext.js"),PasswordExpirySettingsContext=__webpack_require__("./src/react-extension/contexts/PasswordExpirySettingsContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),DialogContext=__webpack_require__("./src/react-extension/contexts/DialogContext.js"),NotifyError=__webpack_require__("./src/react-extension/components/Common/Error/NotifyError/NotifyError.js"),ResourceWorkspaceContext=__webpack_require__("./src/react-extension/contexts/ResourceWorkspaceContext.js"),luxon=__webpack_require__("./node_modules/luxon/src/luxon.js");class EditResourceSkeleton extends react.Component{render(){return react.createElement(react.Fragment,null,react.createElement("div",{className:"left-sidebar"},react.createElement("div",{className:"main-action-wrapper"}),react.createElement("div",{className:"sidebar-content-sections"})),react.createElement("form",{className:"grid-and-footer",onSubmit:this.handleFormSubmit,noValidate:!0},react.createElement("div",{className:"grid"},react.createElement("div",{className:"resource-info skeleton"},react.createElement("div",{className:"resource-icon"}),react.createElement("div",{className:"information"},react.createElement("div",{className:"input text"}),react.createElement("div",{className:"breadcrumbs"},react.createElement("div",{className:"folder-name"})))),react.createElement("div",{className:"edit-workspace skeleton"})),react.createElement("div",{className:"submit-wrapper"},react.createElement(FormCancelButton.A,{disabled:!0}),react.createElement(FormSubmitButton.A,{value:this.props.t("Save"),disabled:!0}))))}}EditResourceSkeleton.propTypes={t:prop_types_default().func};const EditResource_EditResourceSkeleton=(0,es.CI)("common")(EditResourceSkeleton);EditResourceSkeleton.__docgenInfo={description:"",methods:[],displayName:"EditResourceSkeleton",props:{t:{description:"",type:{name:"func"},required:!1}}};var resourceTypeSchemasDefinition=__webpack_require__("./src/shared/models/entity/resourceType/resourceTypeSchemasDefinition.js"),MetadataTypesSettingsLocalStorageContext=__webpack_require__("./src/shared/context/MetadataTypesSettingsLocalStorageContext/MetadataTypesSettingsLocalStorageContext.js"),metadataTypesSettingsEntity=__webpack_require__("./src/shared/models/entity/metadata/metadataTypesSettingsEntity.js"),customFieldsCollection=__webpack_require__("./src/shared/models/entity/customField/customFieldsCollection.js");class EditResource extends react.Component{constructor(props){super(props),this.initializeResourceForm(),this.state=this.defaultState,this.bindCallbacks()}get defaultState(){return{resource:null,resourceType:null,resourceFormSelected:null,originalSecret:null,isSecretDecrypting:!0,isProcessing:!1,hasAlreadyBeenValidated:!1,isPasswordDictionaryCheckRequested:!0,passwordEntropy:null,passwordInDictionary:!1,isPasswordDictionaryCheckServiceAvailable:!0}}bindCallbacks(){this.handleClose=this.handleClose.bind(this),this.handleInputChange=this.handleInputChange.bind(this),this.onSelectForm=this.onSelectForm.bind(this),this.onAddSecret=this.onAddSecret.bind(this),this.onDeleteSecret=this.onDeleteSecret.bind(this),this.onUpgradeToV5=this.onUpgradeToV5.bind(this),this.handleConvertToDescription=this.handleConvertToDescription.bind(this),this.handleConvertToNote=this.handleConvertToNote.bind(this),this.handleFormSubmit=this.handleFormSubmit.bind(this),this.rejectEditionConfirmation=this.rejectEditionConfirmation.bind(this),this.consumePasswordEntropyError=this.consumePasswordEntropyError.bind(this),this.save=this.save.bind(this)}async initializeResourceForm(){try{const resourceDto=structuredClone(this.props.resource),secret=await this.getDecryptedSecret();this.mergeCustomFieldsMetadataAndSecret(resourceDto,secret),resourceDto.secret=secret,this.resourceFormEntity=new resource_resourceFormEntity.A(resourceDto,{validate:!1,resourceTypes:this.props.resourceTypes});const passwordEntropy=secret?.password?.length?SecretGenerator.M.entropy(secret.password):null;this.setState({isSecretDecrypting:!1,originalSecret:secret,resource:this.resourceFormEntity.toDto(),resourceType:this.props.resourceTypes.getFirstById(this.props.resource.resource_type_id),resourceFormSelected:this.selectResourceFormByResourceSecretData(),passwordEntropy})}catch(error){this.props.dialogContext.open(NotifyError.A,{error}),this.handleClose()}}mergeCustomFieldsMetadataAndSecret(resourceDto,secret){if(secret?.custom_fields?.length>0){const customFieldsMetadataCollection=new customFieldsCollection.A(resourceDto.metadata.custom_fields),customFieldsSecretCollection=new customFieldsCollection.A(secret.custom_fields);secret.custom_fields=customFieldsCollection.A.mergeCollectionsMetadataAndSecret(customFieldsMetadataCollection,customFieldsSecretCollection).toDto(),resourceDto.metadata.custom_fields=null,delete resourceDto.metadata.custom_fields}}async componentDidMount(){await Promise.all([this.props.passwordExpiryContext.findSettings(),this.props.passwordPoliciesContext.findPolicies()]),this.initPwnedPasswordService()}initPwnedPasswordService(){const isPasswordDictionaryCheckRequested=this.props.passwordPoliciesContext.shouldRunDictionaryCheck();isPasswordDictionaryCheckRequested&&(this.pownedService=new pownedService.A(this.props.context.port)),this.setState({isPasswordDictionaryCheckRequested})}validateForm=(0,memoize_one_esm.A)((resourceFormDto=>{const resourceFormEntity=new resource_resourceFormEntity.A(resourceFormDto,{validate:!1,resourceTypes:this.props.resourceTypes});return resourceFormEntity.removeEmptySecret({validate:!1}),resourceFormEntity.addRequiredSecret({validate:!1}),resourceFormEntity.validate()}));verifyDataHealth=(0,memoize_one_esm.A)((resourceFormDto=>this.resourceFormEntity?.verifyHealth()));async getDecryptedSecret(){return await this.props.context.port.request("passbolt.secret.find-by-resource-id",this.props.resource.id)}selectResourceFormByResourceSecretData(){return null!=this.resourceFormEntity?.secret?.password?ResourceEditCreateFormEnumerationTypes.D.PASSWORD:null!=this.resourceFormEntity?.secret?.totp?ResourceEditCreateFormEnumerationTypes.D.TOTP:this.resourceFormEntity?.secret?.customFields?.length>0?ResourceEditCreateFormEnumerationTypes.D.CUSTOM_FIELDS:null!=this.resourceFormEntity?.secret?.description?ResourceEditCreateFormEnumerationTypes.D.NOTE:null}selectResourceFormByFirstError(errors){errors.hasError("secret")&&errors.details.secret.hasError("totp")&&this.setState({resourceFormSelected:ResourceEditCreateFormEnumerationTypes.D.TOTP})}handleInputChange(event){const target=event.target,name=target.name;let value;value="number"===target.type?Number.isNaN(target.valueAsNumber)?"":target.valueAsNumber:target.value,this.resourceFormEntity.set(name,value,{validate:!1});const newState={resource:this.resourceFormEntity.toDto()};"secret.password"===name&&(newState.passwordInDictionary=!1,newState.passwordEntropy=value?.length?SecretGenerator.M.entropy(value):null),this.setState(newState)}async handleFormSubmit(event){if(event.preventDefault(),!this.state.isProcessing){this.setState({hasAlreadyBeenValidated:!0}),await this.toggleProcessing();try{const resourceFormEntity=this.createAndSanitizeResourceFormEntity(),validationError=resourceFormEntity.validate();if(validationError?.hasErrors())return this.selectResourceFormByFirstError(validationError),void await this.toggleProcessing();if(!this.isMinimumRequiredEntropyReached())return void this.handlePasswordMinimumEntropyNotReached(resourceFormEntity);if(await this.isPasswordInDictionary())return void this.handlePasswordInDictionary(resourceFormEntity);await this.save(resourceFormEntity)}catch(error){await this.toggleProcessing(),this.handleSaveError(error)}}}isMinimumRequiredEntropyReached(){if(!this.state.resourceType.hasPassword())return!0;return!Boolean(this.state.resource.secret.password)||this.state.passwordEntropy&&this.state.passwordEntropy>=SecretGeneratorComplexity.JP.WEAK}async isPasswordInDictionary(){if(!this.state.resourceType.hasPassword())return!1;if(!Boolean(this.state.resource.secret.password))return!1;const password=this.state.resource.secret.password;if(!this.state.isPasswordDictionaryCheckRequested||!this.state.isPasswordDictionaryCheckServiceAvailable)return!1;const{isPwnedServiceAvailable,inDictionary}=await this.pownedService.evaluateSecret(password);return isPwnedServiceAvailable?inDictionary:(this.setState({isPasswordDictionaryCheckServiceAvailable:!1}),!1)}handlePasswordMinimumEntropyNotReached(resourceFormEntity){const confirmCreationDialog={operation:ConfirmCreateEdit.OL.CREATE,rule:ConfirmCreateEdit.BJ.MINIMUM_ENTROPY,resourceName:this.state.resource?.metadata?.name,onConfirm:()=>this.save(resourceFormEntity),onReject:this.rejectEditionConfirmation};this.props.dialogContext.open(ConfirmCreateEdit.Ay,confirmCreationDialog)}handlePasswordInDictionary(resourceFormEntity){this.setState({passwordInDictionary:!0});const confirmCreationDialog={operation:ConfirmCreateEdit.OL.CREATE,rule:ConfirmCreateEdit.BJ.IN_DICTIONARY,resourceName:this.state.resource?.metadata?.name,onConfirm:()=>this.save(resourceFormEntity),onReject:this.rejectEditionConfirmation};this.props.dialogContext.open(ConfirmCreateEdit.Ay,confirmCreationDialog)}rejectEditionConfirmation(){this.passwordEntropyError=!0,this.setState({resourceFormSelected:ResourceEditCreateFormEnumerationTypes.D.PASSWORD,isProcessing:!1})}consumePasswordEntropyError(){const hasPasswordEntropyError=this.passwordEntropyError;return this.passwordEntropyError=!1,hasPasswordEntropyError}createAndSanitizeResourceFormEntity(){const resourceFormEntity=new resource_resourceFormEntity.A(this.state.resource,{validate:!1,resourceTypes:this.props.resourceTypes});0===resourceFormEntity.metadata.name.length&&resourceFormEntity.set("metadata.name","no name",{validate:!1}),resourceFormEntity.removeEmptySecret({validate:!1}),resourceFormEntity.addRequiredSecret({validate:!1});const resourceType=this.props.resourceTypes.getFirstById(resourceFormEntity.resourceTypeId);if(!resourceFormEntity.metadata.username||0===resourceFormEntity.metadata.username.length){const usernameResetValue=resourceType.isStandaloneTotp()?null:"";resourceFormEntity.set("metadata.username",usernameResetValue,{validate:!1})}return resourceFormEntity}async save(resource){await this.updateResource(resource),await this.handleSaveSuccess()}async updateResource(resource){const isSecretChanged=resource.secret.areSecretsDifferent(this.state.originalSecret);if(this.props.resource.resource_type_id===resource.resourceTypeId&&!isSecretChanged)return void await this.props.context.port.request("passbolt.resources.update",resource.toResourceDto(),null);isSecretChanged&&this.shouldUpdateExpirationDate()&&resource.set("expired",this.getResourceExpirationDate());const resourceDto=resource.toResourceDto(),secretDto=this.props.resourceTypes.getFirstById(resource.resourceTypeId).isPasswordString()?resource.toSecretDto().password:resource.toSecretDto();await this.props.context.port.request("passbolt.resources.update",resourceDto,secretDto)}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.translate("The resource has been updated successfully")),this.props.resourceWorkspaceContext.onResourceEdited(),this.handleClose()}handleSaveError(error){"UserAbortsOperationError"!==error?.name&&"UntrustedMetadataKeyError"!==error?.name?(console.error(error),this.props.dialogContext.open(NotifyError.A,{error})):console.warn(error)}async toggleProcessing(){const prev=this.state.isProcessing;return new Promise((resolve=>{this.setState({isProcessing:!prev},(()=>resolve()))}))}handleClose(){this.props.onClose()}onSelectForm(event,resourceFormSelected){this.setState({resourceFormSelected})}onAddSecret(secret){this.resourceFormEntity.addSecret(secret,{validate:!1});const resourceType=this.props.resourceTypes.getFirstById(this.resourceFormEntity.resourceTypeId);this.setState({resource:this.resourceFormEntity.toDto(),resourceFormSelected:secret,resourceType})}onDeleteSecret(secret){this.resourceFormEntity.deleteSecret(secret,{validate:!1});const resourceType=this.props.resourceTypes.getFirstById(this.resourceFormEntity.resourceTypeId);this.state.resourceFormSelected===secret?this.setState({resource:this.resourceFormEntity.toDto(),resourceFormSelected:this.selectResourceFormByResourceSecretData(),resourceType}):this.setState({resource:this.resourceFormEntity.toDto(),resourceType})}handleConvertToDescription(){this.resourceFormEntity.convertToMetadataDescription({validate:!1});const resourceType=this.props.resourceTypes.getFirstById(this.resourceFormEntity.resourceTypeId);this.setState({resource:this.resourceFormEntity.toDto(),resourceFormSelected:ResourceEditCreateFormEnumerationTypes.D.DESCRIPTION,resourceType})}handleConvertToNote(){this.resourceFormEntity.convertToNote({validate:!1});const resourceType=this.props.resourceTypes.getFirstById(this.resourceFormEntity.resourceTypeId);this.setState({resource:this.resourceFormEntity.toDto(),resourceFormSelected:ResourceEditCreateFormEnumerationTypes.D.NOTE,resourceType})}get isAllowedToConvertNote(){return this.props.resourceTypes.getFirstById(this.props.resource.resource_type_id).slug===resourceTypeSchemasDefinition._w}get hasAllInputDisabled(){return this.state.isProcessing}get hasSecretDecrypting(){return this.state.isSecretDecrypting}shouldUpdateExpirationDate(){const passwordExpirySettings=this.props.passwordExpiryContext.getSettings();return!!passwordExpirySettings?.automatic_update&&this.state.resource.password!==this.state.originalSecret.password}getResourceExpirationDate(){const passwordExpirySettings=this.props.passwordExpiryContext.getSettings();return null==passwordExpirySettings.default_expiry_period?null:luxon.c9.utc().plus({days:passwordExpirySettings.default_expiry_period}).toISO()}get translate(){return this.props.t}onUpgradeToV5(){this.resourceFormEntity.upgradeToV5();const resourceType=this.props.resourceTypes.getFirstById(this.resourceFormEntity.resourceTypeId);this.setState({resource:this.resourceFormEntity.toDto(),resourceType})}render(){const warnings=this.verifyDataHealth(this.state.resource),errors=this.state.hasAlreadyBeenValidated?this.validateForm(this.state.resource):null;return react.createElement(DialogWrapper.A,{title:this.translate("Edit a resource"),className:"edit-resource",disabled:this.hasAllInputDisabled,onClose:this.handleClose},this.hasSecretDecrypting&&react.createElement(EditResource_EditResourceSkeleton,null),!this.hasSecretDecrypting&&react.createElement(react.Fragment,null,react.createElement(SelectResourceForm.A,{resourceType:this.state.resourceType,resourceFormSelected:this.state.resourceFormSelected,resource:this.state.resource,onAddSecret:this.onAddSecret,onDeleteSecret:this.onDeleteSecret,onSelectForm:this.onSelectForm,canUpgradeResource:this.props.metadataTypeSettings?.allowV4V5Upgrade,onUpgradeToV5:this.onUpgradeToV5,disabled:this.hasAllInputDisabled}),react.createElement("form",{className:"grid-and-footer",onSubmit:this.handleFormSubmit,noValidate:!0},react.createElement("div",{className:"grid"},react.createElement(AddResourceName.A,{resource:this.state.resource,resourceType:this.state.resourceType,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled,warnings,errors,onIconClick:this.onSelectForm}),react.createElement("div",{className:"edit-workspace"},react.createElement(OrchestrateResourceForm.A,{resourceFormSelected:this.state.resourceFormSelected,resource:this.state.resource,resourceType:this.state.resourceType,onChange:this.handleInputChange,onConvertToDescription:this.handleConvertToDescription,onConvertToNote:this.handleConvertToNote,isAllowedToConvertNote:this.isAllowedToConvertNote,passwordEntropy:this.state.passwordEntropy,consumePasswordEntropyError:this.consumePasswordEntropyError,disabled:this.hasAllInputDisabled,warnings,errors}))),react.createElement("div",{className:"submit-wrapper"},react.createElement(FormCancelButton.A,{disabled:this.hasAllInputDisabled,onClick:this.handleClose}),react.createElement(FormSubmitButton.A,{value:this.translate("Save"),disabled:this.hasAllInputDisabled,processing:this.state.isProcessing})))))}}EditResource.propTypes={context:prop_types_default().any,resource:prop_types_default().object,onClose:prop_types_default().func,resourceWorkspaceContext:prop_types_default().any,dialogContext:prop_types_default().object,passwordExpiryContext:prop_types_default().object,passwordPoliciesContext:prop_types_default().object,actionFeedbackContext:prop_types_default().any,resourceTypes:prop_types_default().instanceOf(resourceTypesCollection.A),metadataTypeSettings:prop_types_default().instanceOf(metadataTypesSettingsEntity.Ay),t:prop_types_default().func};const EditResource_EditResource=(0,AppContext.L)((0,PasswordPoliciesContext.WJ)((0,PasswordExpirySettingsContext.f4)((0,MetadataTypesSettingsLocalStorageContext.mw)((0,ResourceTypesLocalStorageContext.KH)((0,ActionFeedbackContext.ot)((0,DialogContext.z9)((0,ResourceWorkspaceContext.Qw)((0,es.CI)("common")(EditResource)))))))));EditResource.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:"Ge the default state\n@returns {*}",modifiers:["get"],params:[],returns:{type:{name:"mixed"}},description:"Ge the default state"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"initializeResourceForm",docblock:"Initialize resource form\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Initialize resource form"},{name:"mergeCustomFieldsMetadataAndSecret",docblock:"Merge custom fields metadata into secret\n@param {object} resourceDto\n@param {object} secret\n@return {void}",modifiers:[],params:[{name:"resourceDto",type:{name:"object"},optional:!1},{name:"secret",type:{name:"object"},optional:!1}],returns:{type:{name:"void"}},description:"Merge custom fields metadata into secret"},{name:"initPwnedPasswordService",docblock:"Initialize the pwned password service",modifiers:[],params:[],returns:null,description:"Initialize the pwned password service"},{name:"getDecryptedSecret",docblock:"Get the decrypted secret associated to the resource\n@returns {Promise<object>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"object"}]}},description:"Get the decrypted secret associated to the resource"},{name:"selectResourceFormByResourceSecretData",docblock:"Selected the resource form by resource type\n@return {string | null} The selected form",modifiers:[],params:[],returns:{description:"The selected form",type:{name:"union",elements:[{name:"string"}]}},description:"Selected the resource form by resource type"},{name:"selectResourceFormByFirstError",docblock:"Select resource form by first error\n@param {EntityValidationError} errors",modifiers:[],params:[{name:"errors",type:{name:"EntityValidationError"},optional:!1}],returns:null,description:"Select resource form by first error"},{name:"handleInputChange",docblock:"Handle form input change.\n@params {ReactEvent} The react event.",modifiers:[],params:[{name:"event",optional:!1}],returns:null,description:"Handle form input change."},{name:"handleFormSubmit",docblock:"Handle form submission that can be trigger when hitting `enter`\n@param {Event} event The html event triggering the form submit.",modifiers:["async"],params:[{name:"event",description:"The html event triggering the form submit.",type:{name:"Event"},optional:!1}],returns:null,description:"Handle form submission that can be trigger when hitting `enter`"},{name:"isMinimumRequiredEntropyReached",docblock:"Returns true if the given entropy is greater or equal to the minimum required entropy.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the given entropy is greater or equal to the minimum required entropy."},{name:"isPasswordInDictionary",docblock:"Check if the password is part of a dictionary.\n@returns {Promise<boolean>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"boolean"}]}},description:"Check if the password is part of a dictionary."},{name:"handlePasswordMinimumEntropyNotReached",docblock:"Request password not reaching minimum entropy creation confirmation.\n@param {ResourceFormEntity} resourceFormEntity The resource form entity",modifiers:[],params:[{name:"resourceFormEntity",description:"The resource form entity",type:{name:"ResourceFormEntity"},optional:!1}],returns:null,description:"Request password not reaching minimum entropy creation confirmation."},{name:"handlePasswordInDictionary",docblock:"Request password in dictionary creation confirmation.\n@param {ResourceFormEntity} resourceFormEntity The resource form entity",modifiers:[],params:[{name:"resourceFormEntity",description:"The resource form entity",type:{name:"ResourceFormEntity"},optional:!1}],returns:null,description:"Request password in dictionary creation confirmation."},{name:"rejectEditionConfirmation",docblock:"Reject the edition confirmation.",modifiers:[],params:[],returns:null,description:"Reject the edition confirmation."},{name:"consumePasswordEntropyError",docblock:'Returns true if the password entropy has been marked as erroneous.\nThe value is then "consumed";\n@returns {boolean}',modifiers:[],params:[],returns:{type:{name:"boolean"}},description:'Returns true if the password entropy has been marked as erroneous.\nThe value is then "consumed";'},{name:"createAndSanitizeResourceFormEntity",docblock:"Create and sanitize resource form entity\n\nThe user should not be blocked during the creation so the goal is to find the best match between resource type available\n- Remove empty secret that is required like Totp (this will find the best match for resource type)\n- Add minimum required secret like password to match resource type\n\nSanitize:\n - remove empty secret\n - add required secret\n\n@returns {ResourceFormEntity}",modifiers:[],params:[],returns:{type:{name:"ResourceFormEntity"}},description:"Create and sanitize resource form entity\n\nThe user should not be blocked during the creation so the goal is to find the best match between resource type available\n- Remove empty secret that is required like Totp (this will find the best match for resource type)\n- Add minimum required secret like password to match resource type\n\nSanitize:\n - remove empty secret\n - add required secret"},{name:"save",docblock:"Save the resource\n@param {ResourceFormEntity} resource\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"resource",type:{name:"ResourceFormEntity"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Save the resource"},{name:"updateResource",docblock:"Update the resource\n@param {ResourceFormEntity} resource\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"resource",type:{name:"ResourceFormEntity"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Update the resource"},{name:"handleSaveSuccess",docblock:"Handle save operation success.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error",modifiers:[],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:null,description:"Handle save operation error."},{name:"toggleProcessing",docblock:"Toggle processing state when validating / saving\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Toggle processing state when validating / saving"},{name:"handleClose",docblock:"Handle close",modifiers:[],params:[],returns:null,description:"Handle close"},{name:"onSelectForm",docblock:"Set the state for the resource form selected\n@param event\n@param resourceFormSelected",modifiers:[],params:[{name:"event",optional:!1},{name:"resourceFormSelected",optional:!1}],returns:null,description:"Set the state for the resource form selected"},{name:"onAddSecret",docblock:"Add secret to the resourceFormEntity\n@param {string} secret The secret to add",modifiers:[],params:[{name:"secret",description:"The secret to add",type:{name:"string"},optional:!1}],returns:null,description:"Add secret to the resourceFormEntity"},{name:"onDeleteSecret",docblock:"Delete secret to the resourceFormEntity\n@param {string} secret The secret to delete",modifiers:[],params:[{name:"secret",description:"The secret to delete",type:{name:"string"},optional:!1}],returns:null,description:"Delete secret to the resourceFormEntity"},{name:"handleConvertToDescription",docblock:"Handle convert note to metadata description",modifiers:[],params:[],returns:null,description:"Handle convert note to metadata description"},{name:"handleConvertToNote",docblock:"Handle convert description to secret note",modifiers:[],params:[],returns:null,description:"Handle convert description to secret note"},{name:"isAllowedToConvertNote",docblock:"Is allowed to convert a note\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Is allowed to convert a note"},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is processing\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is processing"},{name:"hasSecretDecrypting",docblock:"Should input be disabled? True if state secret is decrypting\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state secret is decrypting"},{name:"shouldUpdateExpirationDate",docblock:"Returns true if the expiration date of the resource should be updated.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the expiration date of the resource should be updated."},{name:"getResourceExpirationDate",docblock:"Get the expiration date on the given resource according to the password expiry settings\n@returns {DateTime|null}",modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"DateTime"}]}},description:"Get the expiration date on the given resource according to the password expiry settings"},{name:"translate",docblock:"Get the translate function\n@returns {function(...[*]=)}",modifiers:["get"],params:[],returns:{},description:"Get the translate function"},{name:"onUpgradeToV5",docblock:"The upgrade to v5 action raised by user\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"The upgrade to v5 action raised by user"}],displayName:"EditResource",props:{context:{description:"",type:{name:"any"},required:!1},resource:{description:"",type:{name:"object"},required:!1},onClose:{description:"",type:{name:"func"},required:!1},resourceWorkspaceContext:{description:"",type:{name:"any"},required:!1},dialogContext:{description:"",type:{name:"object"},required:!1},passwordExpiryContext:{description:"",type:{name:"object"},required:!1},passwordPoliciesContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"any"},required:!1},resourceTypes:{description:"",type:{name:"instanceOf",value:"ResourceTypesCollection"},required:!1},metadataTypeSettings:{description:"",type:{name:"instanceOf",value:"MetadataTypesSettingsEntity"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}}}]);