/*! For license information please see 5664.ebb4f636.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[5664],{"./src/react-extension/contexts/MFAContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__,N8:()=>MfaContextProvider,bb:()=>Providers,dg:()=>withMfa,hx:()=>MfaSettingsWorkflowStates});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),_shared_models_mfaPolicy_MfaPolicyEnumeration__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/shared/models/mfaPolicy/MfaPolicyEnumeration.js");const MfaSettingsWorkflowStates={OVERVIEW:"Overview",TOTPOVERVIEW:"Totp Overview",SCANTOTPCODE:"Scan totp code",VIEWCONFIGURATION:"View a totp configuration",SETUPYUBIKEY:"Setup Yubikey",SETUPDUO:"Setup Duo"},Providers={TOTP:"totp",YUBIKEY:"yubikey",DUO:"duo"},MfaContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({state:null,setup:null,provider:null,getPolicy:()=>{},getMfaOrganisationSettings:()=>{},getMfaUserSettings:()=>{},findPolicy:()=>{},setProcessing:()=>{},isProcessing:()=>{},clearContext:()=>{},isMfaChoiceRequired:()=>{},checkMfaChoiceRequired:()=>{},hasMfaUserSettings:()=>{},navigate:()=>{},setProvider:()=>{},goToProviderList:()=>{},validateTotpCode:()=>{},removeProvider:()=>{},validateYubikeyCode:()=>{}});class MfaContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{state:MfaSettingsWorkflowStates.OVERVIEW,setup:null,policy:null,provider:null,processing:!0,mfaUserSettings:null,mfaOrganisationSettings:null,mfaChoiceRequired:!1,getPolicy:this.getPolicy.bind(this),getMfaOrganisationSettings:this.getMfaOrganisationSettings.bind(this),getMfaUserSettings:this.getMfaUserSettings.bind(this),findPolicy:this.findPolicy.bind(this),findMfaSettings:this.findMfaSettings.bind(this),isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),hasMfaSettings:this.hasMfaSettings.bind(this),hasMfaOrganisationSettings:this.hasMfaOrganisationSettings.bind(this),hasMfaUserSettings:this.hasMfaUserSettings.bind(this),clearContext:this.clearContext.bind(this),checkMfaChoiceRequired:this.checkMfaChoiceRequired.bind(this),isMfaChoiceRequired:this.isMfaChoiceRequired.bind(this),navigate:this.navigate.bind(this),setProvider:this.setProvider.bind(this),goToProviderList:this.goToProviderList.bind(this),validateTotpCode:this.validateTotpCode.bind(this),removeProvider:this.removeProvider.bind(this),validateYubikeyCode:this.validateYubikeyCode.bind(this)}}async findPolicy(){if(this.getPolicy())return;this.setProcessing(!0);let policy=null;const result=await this.props.context.port.request("passbolt.mfa-policy.get-policy");policy=result?result.policy:null,this.setState({policy}),this.setProcessing(!1)}async findMfaSettings(){this.setProcessing(!0);let mfaUserSettings=null,mfaOrganisationSettings=null;const settings=await this.props.context.port.request("passbolt.mfa-policy.get-mfa-settings");mfaUserSettings=settings.MfaAccountSettings,mfaOrganisationSettings=settings.MfaOrganizationSettings,this.setState({mfaUserSettings}),this.setState({mfaOrganisationSettings}),this.setProcessing(!1)}getPolicy(){return this.state.policy}getMfaOrganisationSettings(){return this.state.mfaOrganisationSettings}getMfaUserSettings(){return this.state.mfaUserSettings}hasMfaSettings(){return!this.hasMfaOrganisationSettings()||this.hasMfaUserSettings()}hasMfaOrganisationSettings(){return this.state.mfaOrganisationSettings&&Object.values(this.state.mfaOrganisationSettings).some((value=>value))}hasMfaUserSettings(){return this.state.mfaUserSettings&&Object.values(this.state.mfaUserSettings).some((value=>value))}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}clearContext(){const{policy,processing}=this.defaultState;this.setState({policy,processing})}async checkMfaChoiceRequired(){if(await this.findPolicy(),null===this.getPolicy()||this.getPolicy()!==_shared_models_mfaPolicy_MfaPolicyEnumeration__WEBPACK_IMPORTED_MODULE_2__.F.MANDATORY)return!1;await this.findMfaSettings(),this.setState({mfaChoiceRequired:!this.hasMfaSettings()})}isMfaChoiceRequired(){return this.state.mfaChoiceRequired}navigate(state){this.setState({state})}goToProviderList(){this.setState({state:MfaSettingsWorkflowStates.OVERVIEW,provider:null})}setProvider(provider){this.setState({provider})}async validateTotpCode(otpProvisioningUri,totp){try{this.setProcessing(!0),await this.props.context.port.request("passbolt.mfa-setup.verify-totp-code",{otpProvisioningUri,totp})}catch(error){throw console.error(error),error}finally{this.setProcessing(!1)}}async validateYubikeyCode(hotp){try{this.setProcessing(!0),await this.props.context.port.request("passbolt.mfa-setup.verify-yubikey-code",{hotp})}catch(error){throw console.error(error),error}finally{this.setProcessing(!1)}}async removeProvider(){try{this.setProcessing(!0),await this.props.context.port.request("passbolt.mfa-setup.remove-provider",{provider:this.state.provider})}catch(error){throw console.error(error),error}finally{this.setProcessing(!1)}}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MfaContext.Provider,{value:this.state},this.props.children)}}MfaContextProvider.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_3___default().any,children:prop_types__WEBPACK_IMPORTED_MODULE_3___default().any};const __WEBPACK_DEFAULT_EXPORT__=(0,_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.L)(MfaContextProvider);function withMfa(WrappedComponent){return class WithMfa extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MfaContext.Consumer,null,(mfaContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{mfaContext,...this.props})))}}}MfaContextProvider.__docgenInfo={description:"The MFA context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findPolicy",docblock:"Find the mfa policy settings\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the mfa policy settings"},{name:"findMfaSettings",docblock:"Find the mfa settings of the current user\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the mfa settings of the current user"},{name:"getPolicy",docblock:"Returns the policy for MFA.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the policy for MFA."},{name:"getMfaOrganisationSettings",docblock:"Returns the mfa organisations settings.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the mfa organisations settings."},{name:"getMfaUserSettings",docblock:"Returns the mfa user settings.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the mfa user settings."},{name:"hasMfaSettings",docblock:"Returns if mfa settings are defined.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns if mfa settings are defined."},{name:"hasMfaOrganisationSettings",docblock:"Returns true organization settings has MFA defined\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true organization settings has MFA defined"},{name:"hasMfaUserSettings",docblock:"Returns true user settings has MFA defined\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true user settings has MFA defined"},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."},{name:"checkMfaChoiceRequired",docblock:"checkMfaChoiceRequired if mfa settings is required\n@returns {bool}",modifiers:["async"],params:[],returns:{type:{name:"bool"}},description:"checkMfaChoiceRequired if mfa settings is required"},{name:"isMfaChoiceRequired",docblock:"Returns true if the current user has to choose for a mfa setting.\n@returns {bool}",modifiers:[],params:[],returns:{type:{name:"bool"}},description:"Returns true if the current user has to choose for a mfa setting."},{name:"navigate",docblock:"Change mfa settings state\n@params {string} next state step\n@returns {void}",modifiers:[],params:[{name:"state",optional:!1}],returns:{type:{name:"void"}},description:"Change mfa settings state"},{name:"goToProviderList",docblock:"Cancel a setup process or go back to mfa settings providers",modifiers:[],params:[],returns:null,description:"Cancel a setup process or go back to mfa settings providers"},{name:"setProvider",docblock:"Set the selected provider and the next step\n@params {string} next setup state\n@returns {void}",modifiers:[],params:[{name:"provider",optional:!1}],returns:{type:{name:"void"}},description:"Set the selected provider and the next step"},{name:"validateTotpCode",docblock:"Validate the totp provider with code and uri provided during setup\n@param {string} otpProvisioningUri\n@param {string} totp\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"otpProvisioningUri",type:{name:"string"},optional:!1},{name:"totp",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Validate the totp provider with code and uri provided during setup"},{name:"validateYubikeyCode",docblock:"Validate the totp provider with code and uri provided during setup\n@param {string} hotp\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"hotp",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Validate the totp provider with code and uri provided during setup"},{name:"removeProvider",docblock:"Delete the totp provider from configuration\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Delete the totp provider from configuration"}],displayName:"MfaContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}}},"./src/shared/models/mfaPolicy/MfaPolicyEnumeration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>MfaPolicyEnumerationTypes});const MfaPolicyEnumerationTypes={MANDATORY:"mandatory",OPTIN:"opt-in"}}}]);