/*! For license information please see 6093.6224eb6f.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[6093],{"./src/img/svg/caret_down.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgCaretDown(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:10,height:8,fill:"none",viewBox:"0 0 10 8"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m1 2 4 4 4-4"})))}},"./src/img/svg/caret_right.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgCaretRight(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:8,height:10,fill:"none",viewBox:"0 0 8 10"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m2 9 4-4-4-4"})))}},"./src/react-extension/components/ResourceDetails/DisplayResourceDetails/DisplayResourceDetailsTag.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>DisplayResourceDetails_DisplayResourceDetailsTag});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),ResourceWorkspaceContext=__webpack_require__("./src/react-extension/contexts/ResourceWorkspaceContext.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),spinner=__webpack_require__("./src/img/svg/spinner.svg");class EditResourceTagsItemViewer extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleOnClickTag=this.handleOnClickTag.bind(this)}handleOnClickTag(event,tag){event.stopPropagation();const filter={type:ResourceWorkspaceContext.FM.TAG,payload:{tag}};this.props.history.push({pathname:"/app/passwords",state:{filter}})}isLoading(){return!this.props.tags}getTags(){return this.isLoading()?null:this.props.tags.sort(((tagA,tagB)=>tagA.slug.localeCompare(tagB.slug)))}render(){const isLoading=this.isLoading();return react.createElement("div",{className:"tags-list"},isLoading&&react.createElement("div",{className:"processing-wrapper"},react.createElement(spinner.A,null),react.createElement("span",{className:"processing-text"},react.createElement(es.x6,null,"Retrieving tags"))),!isLoading&&0===this.props.tags.length&&react.createElement("span",{className:"empty-content"},react.createElement(es.x6,null,"There is no tag.")),!isLoading&&this.props.tags.length>0&&this.getTags().map((tag=>react.createElement("div",{key:tag.id,className:"tag-list-item"},react.createElement("button",{type:"button",onClick:event=>this.handleOnClickTag(event,tag),className:"tag"},react.createElement("span",{className:"tag-content ellipsis"},tag.slug))))))}}EditResourceTagsItemViewer.propTypes={tags:prop_types_default().array,resourceWorkspaceContext:prop_types_default().any,history:prop_types_default().any};const EditResourceTags_EditResourceTagsItemViewer=(0,react_router.y)((0,ResourceWorkspaceContext.Qw)((0,es.CI)("common")(EditResourceTagsItemViewer)));EditResourceTagsItemViewer.__docgenInfo={description:"",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleOnClickTag",docblock:"Handle on click event\n@param event\n@param tag",modifiers:[],params:[{name:"event",optional:!1},{name:"tag",optional:!1}],returns:null,description:"Handle on click event"},{name:"isLoading",docblock:null,modifiers:[],params:[],returns:null},{name:"getTags",docblock:null,modifiers:[],params:[],returns:null}],displayName:"EditResourceTagsItemViewer",props:{tags:{description:"",type:{name:"array"},required:!1},resourceWorkspaceContext:{description:"",type:{name:"any"},required:!1},history:{description:"",type:{name:"any"},required:!1}}};var AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js");class AutocompleteItem extends react.Component{constructor(props){super(props),this.bindEventHandlers()}bindEventHandlers(){this.onClick=this.onClick.bind(this)}getClassName(){return this.props.selected?"row selected":"row"}onClick(event){this.props.onClick(event,this.props.id)}render(){return react.createElement("li",{className:"autocomplete-item"},react.createElement("div",{className:`autocomplete-suggestion ${this.getClassName()} `},react.createElement("div",{className:"main-cell-wrapper"},react.createElement("div",{className:"main-cell "},react.createElement("button",{type:"button",className:"link no-border",onClick:event=>this.onClick(event)},react.createElement("div",{className:"item"},react.createElement("span",{className:"name ellipsis"},this.props.slug)))))))}}AutocompleteItem.propTypes={id:prop_types_default().number,slug:prop_types_default().string,selected:prop_types_default().bool,onClick:prop_types_default().func};const Autocomplete_AutocompleteItem=AutocompleteItem;AutocompleteItem.__docgenInfo={description:"",methods:[{name:"bindEventHandlers",docblock:null,modifiers:[],params:[],returns:null},{name:"getClassName",docblock:null,modifiers:[],params:[],returns:null},{name:"onClick",docblock:null,modifiers:[],params:[{name:"event",optional:!1,type:null}],returns:null}],displayName:"AutocompleteItem",props:{id:{description:"",type:{name:"number"},required:!1},slug:{description:"",type:{name:"string"},required:!1},selected:{description:"",type:{name:"bool"},required:!1},onClick:{description:"",type:{name:"func"},required:!1}}};class Autocomplete extends react.Component{constructor(props){super(props),this.bindEventHandlers(),this.createInputRefs(),this.state=this.getDefaultState()}getDefaultState(){return{selected:-1}}componentDidMount(){document.addEventListener("keydown",this.handleKeyDown,{capture:!0})}componentWillUnmount(){document.removeEventListener("keydown",this.handleKeyDown,{capture:!0})}createInputRefs(){this.listRef=react.createRef()}bindEventHandlers(){this.handleKeyDown=this.handleKeyDown.bind(this),this.selectNext=this.selectNext.bind(this),this.selectPrevious=this.selectPrevious.bind(this),this.handleSelect=this.handleSelect.bind(this)}handleKeyDown(event){if(this.props.autocompleteItems){if(40===event.keyCode)return event.preventDefault(),void this.selectNext();if(38===event.keyCode)return event.preventDefault(),void this.selectPrevious();if(8!==event.keyCode){if(13===event.keyCode||9===event.keyCode){if(null===this.state.selected||-1===this.state.selected)return;event.preventDefault();const obj=this.props.autocompleteItems[this.state.selected];this.props.onSelect(obj)}}else this.setState({selected:-1})}}handleSelect(event,selected){const obj=this.props.autocompleteItems[selected];this.props.onSelect(obj),event.nativeEvent.stopImmediatePropagation()}handleArrowFocus(){if(-1===this.state.selected)this.props.onArrowFocus(this.props.value);else{const slug=this.props.autocompleteItems[this.state.selected].slug;this.props.onArrowFocus(slug)}}selectPrevious(){-1===this.state.selected?this.setState({selected:this.props.autocompleteItems.length-1}):this.setState({selected:this.state.selected-1}),this.scrollToSelectedItem(),this.handleArrowFocus()}selectNext(){this.state.selected===this.props.autocompleteItems.length-1?this.setState({selected:-1}):this.setState({selected:this.state.selected+1}),this.scrollToSelectedItem(),this.handleArrowFocus()}isItemSelected(key){return null!==this.state.selected&&key===this.state.selected}getStyle(){const maxWidth=this.props.width-this.props.left;return{left:this.props.left,top:this.props.top,maxWidth}}scrollToSelectedItem(){if(this.props.autocompleteItems&&0!==this.props.autocompleteItems.length&&-1!==this.state.selected){const itemHeight=this.listRef.current.scrollHeight/this.props.autocompleteItems.length,visibleHeight=this.listRef.current.clientHeight,fitOffset=visibleHeight-itemHeight*Math.round(visibleHeight/itemHeight),currentItemPosition=itemHeight*this.state.selected,currentScroll=this.listRef.current.scrollTop;if(currentItemPosition-fitOffset<currentScroll)return void(this.listRef.current.scrollTop=this.listRef.current.scrollTop-visibleHeight);if(currentItemPosition>currentScroll+visibleHeight)return void(this.listRef.current.scrollTop=currentItemPosition)}else this.listRef.current.scrollTop=0}render(){return react.createElement("div",{className:"autocomplete-suggestions",style:this.getStyle()},react.createElement("div",{className:"autocomplete-content scroll",ref:this.listRef},react.createElement("ul",null,!this.state.processing&&this.props.autocompleteItems&&this.props.autocompleteItems.map(((tag,key)=>react.createElement(Autocomplete_AutocompleteItem,{key,id:key,slug:tag.slug,selected:this.isItemSelected(key),onClick:this.handleSelect}))),this.state.processing&&react.createElement("li",{className:"autocomplete-suggestion row"},react.createElement(spinner.A,null)))))}}Autocomplete.propTypes={id:prop_types_default().string,autocompleteItems:prop_types_default().array,top:prop_types_default().number,left:prop_types_default().number,width:prop_types_default().number,onSelect:prop_types_default().func,onArrowFocus:prop_types_default().func,value:prop_types_default().string};const Autocomplete_Autocomplete=Autocomplete;Autocomplete.__docgenInfo={description:"",methods:[{name:"getDefaultState",docblock:"getDefaultState\n@return {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"getDefaultState"},{name:"createInputRefs",docblock:null,modifiers:[],params:[],returns:null},{name:"bindEventHandlers",docblock:null,modifiers:[],params:[],returns:null},{name:"handleKeyDown",docblock:"Handle key down to navigate and select the item\n@param event",modifiers:[],params:[{name:"event",optional:!1}],returns:null,description:"Handle key down to navigate and select the item"},{name:"handleSelect",docblock:"Handle when an item is selected\n@param event\n@param selected",modifiers:[],params:[{name:"event",optional:!1},{name:"selected",optional:!1}],returns:null,description:"Handle when an item is selected"},{name:"handleArrowFocus",docblock:"Handle when item is selected by arrows",modifiers:[],params:[],returns:null,description:"Handle when item is selected by arrows"},{name:"selectPrevious",docblock:"Navigate to select the previous item",modifiers:[],params:[],returns:null,description:"Navigate to select the previous item"},{name:"selectNext",docblock:"Navigate to select the next item",modifiers:[],params:[],returns:null,description:"Navigate to select the next item"},{name:"isItemSelected",docblock:"check if an item is selected\n@param key\n@returns {boolean}",modifiers:[],params:[{name:"key",optional:!1}],returns:{type:{name:"boolean"}},description:"check if an item is selected"},{name:"getStyle",docblock:"Get the autocomplete style.",modifiers:[],params:[],returns:null,description:"Get the autocomplete style."},{name:"scrollToSelectedItem",docblock:null,modifiers:[],params:[],returns:null}],displayName:"Autocomplete",props:{id:{description:"",type:{name:"string"},required:!1},autocompleteItems:{description:"",type:{name:"array"},required:!1},top:{description:"",type:{name:"number"},required:!1},left:{description:"",type:{name:"number"},required:!1},width:{description:"",type:{name:"number"},required:!1},onSelect:{description:"",type:{name:"func"},required:!1},onArrowFocus:{description:"",type:{name:"func"},required:!1},value:{description:"",type:{name:"string"},required:!1}}};var ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),LoadingContext=__webpack_require__("./src/react-extension/contexts/LoadingContext.js"),svg_close=__webpack_require__("./src/img/svg/close.svg");class EditResourceTags extends react.Component{constructor(props){super(props),this.state=this.getDefaultState(),this.createRefs(),this.bindCallbacks()}getDefaultState(){return{tags:this.getResourceTags(),inputTagValue:"",processing:!1,loading:!0,tagAlreadyPresent:"",allTags:null,autocompletePosition:{top:0,left:0,width:0},suggestedTags:null,errorMessage:""}}getResourceTags(){return this.props.tags?[...this.props.tags]:[]}createRefs(){this.elementRef=react.createRef(),this.inputTagRef=react.createRef()}bindCallbacks(){this.handleEditorClickEvent=this.handleEditorClickEvent.bind(this),this.handleOnSubmit=this.handleOnSubmit.bind(this),this.handleOnInput=this.handleOnInput.bind(this),this.handleKeyPressed=this.handleKeyPressed.bind(this),this.handleOnKeyDown=this.handleOnKeyDown.bind(this),this.deleteTag=this.deleteTag.bind(this),this.focusOnInputTag=this.focusOnInputTag.bind(this),this.handleAutocompleteSelect=this.handleAutocompleteSelect.bind(this),this.handleAutocompleteArrowFocus=this.handleAutocompleteArrowFocus.bind(this)}componentDidMount(){document.addEventListener("click",this.handleEditorClickEvent,{capture:!0}),this.fetchAllTags(),this.setState({loading:!1},(()=>{this.focusOnInputTag()}))}componentWillUnmount(){document.removeEventListener("click",this.handleEditorClickEvent,{capture:!0})}focusOnInputTag(){this.inputTagRef.current.focus()}async fetchAllTags(){const allTags=await this.props.context.port.request("passbolt.tags.find-all");allTags&&this.setState({allTags})}hasAllInputDisabled(){return this.state.processing||this.state.loading}handleEditorClickEvent(event){this.elementRef.current.contains(event.target)||(this.inputTagRef.current.contains(event.target)?this.focusOnInputTag():this.props.toggleInputTagEditor())}handleOnInput(){this.setInputTagValue(),this.getSuggestedTags(),this.getPositionOfInputTag()}setInputTagValue(){const inputTagValue=this.inputTagRef.current.textContent;this.setState({inputTagValue})}resetInputTagValue(){this.inputTagRef.current.textContent="",this.setInputTagValue()}getPositionOfInputTag(){const top=this.inputTagRef.current.offsetTop+28,autocompletePosition={left:this.inputTagRef.current.offsetLeft-2,top,width:this.elementRef.current.getBoundingClientRect().width};this.setState({autocompletePosition})}createTag(slug){let is_shared=!1;return slug.startsWith("#")&&(is_shared=!0),{slug,is_shared}}isTagDeletable(tag){return(this.props.isOwner||!tag.is_shared)&&!this.hasAllInputDisabled()}isTagAlreadyPresent(slug){return!!this.state.tags.filter((tag=>tag.slug===slug)).shift()}setErrorMessage(errorMessage){this.setState({errorMessage})}blinkTagAlreadyPresent(slug){this.setState({tagAlreadyPresent:slug}),setTimeout((()=>{this.setState({tagAlreadyPresent:""})}),2e3)}isTagExceedMaxLength(slug){return slug.length>128}validateTag(slug){return!(!slug&&0===slug.trim().length)&&(this.isTagExceedMaxLength(slug.trim())?(this.setErrorMessage(this.translate("This tag can't be added, the length cannot exceed {{tagMaxLength}}",{tagMaxLength:128})),!1):!this.props.isOwner&&slug.startsWith("#")?(this.setErrorMessage(this.translate("This shared tag can't be added, you are not the owner")),!1):!this.isTagAlreadyPresent(slug.trim())||(this.blinkTagAlreadyPresent(slug.trim()),this.setErrorMessage(this.translate("This tag is already present")),this.resetInputTagValue(),!1))}checkTagToBeSaved(){const inputTag=this.inputTagRef.current.textContent;if(this.setErrorMessage(""),!inputTag&&0===inputTag.trim().length)return!0;if(this.validateTag(inputTag)){const tag=this.createTag(inputTag.trim());return this.insertTag(tag),this.resetInputTagValue(),this.hideAutocomplete(),!0}return!1}insertTag(tag){const tags=this.state.tags;tags.push(tag),this.setState({tags})}handleKeyPressed(event){13!==event.which||this.inputTagRef.current.textContent?13!==event.which&&44!==event.which||(event.preventDefault(),this.checkTagToBeSaved()):this.handleOnSubmit()}checkTagToDelete(){if(!this.inputTagRef.current.textContent){const tag=this.state.tags.slice(-1)[0];if(this.isTagDeletable(tag)){const tags=this.state.tags;tags.pop(),this.setState({tags}),this.setErrorMessage("")}else this.setErrorMessage(this.translate("This shared tag can't be deleted, you are not the owner"))}}deleteTag(event,indexTag){event.nativeEvent.stopImmediatePropagation();const tags=this.state.tags;tags.splice(indexTag,1),this.setState({tags})}mustShowAutocomplete(){return this.state.suggestedTags&&this.state.suggestedTags.length>0}hideAutocomplete(){this.setState({suggestedTags:null})}handleOnKeyDown(event){8===event.which?this.checkTagToDelete():27===event.which&&(this.mustShowAutocomplete()?(this.inputTagRef.current.textContent=this.state.inputTagValue,this.setCaretCursorToEnd(),this.hideAutocomplete()):this.props.toggleInputTagEditor())}async handleOnSubmit(){this.state.processing||(this.setState({processing:!0}),this.checkTagToBeSaved()?await this.updateTags():this.setState({processing:!1}))}async updateTags(){try{this.props.loadingContext.add(),await this.props.context.port.request("passbolt.tags.update-resource-tags",this.props.resourceId,this.state.tags),this.props.loadingContext.remove(),await this.props.actionFeedbackContext.displaySuccess(this.translate("The tags have been updated successfully")),this.setState({processing:!1}),this.props.toggleInputTagEditor()}catch(error){this.props.loadingContext.remove(),console.error(error),this.setState({errorMessage:error.message,processing:!1})}}getSuggestedTags(){const inputTagValue=this.inputTagRef.current.textContent;if(inputTagValue&&this.state.allTags){const suggestedTags=this.state.allTags.filter((tag=>0===this.state.tags.filter((tagResources=>tagResources.slug===tag.slug)).length&&this.isTagDeletable(tag)&&-1!=tag.slug.toLowerCase().indexOf(inputTagValue.toLowerCase())));this.setState({suggestedTags})}else this.setState({suggestedTags:null})}handleAutocompleteSelect(tag){this.insertTag(tag),this.resetInputTagValue(),this.focusOnInputTag(),this.hideAutocomplete()}handleAutocompleteArrowFocus(slug){this.inputTagRef.current.textContent=slug,this.setCaretCursorToEnd(),this.getPositionOfInputTag()}setCaretCursorToEnd(){const range=document.createRange(),selection=window.getSelection();range.setStart(this.inputTagRef.current.childNodes[0],this.inputTagRef.current.textContent.length),range.collapse(!0),selection.removeAllRanges(),selection.addRange(range)}get translate(){return this.props.t}render(){return react.createElement("div",{className:"form-content",ref:this.elementRef},react.createElement("div",{className:"input tag-editor"},react.createElement("div",{className:"tag-editor-input-wrapper",onClick:this.focusOnInputTag},this.state.tags&&this.state.tags.map(((tag,index)=>react.createElement("div",{key:index,className:"tag"},react.createElement("span",{className:"tag-content ellipsis "+(this.state.tagAlreadyPresent===tag.slug?"blink-fast":"")},tag.slug),this.isTagDeletable(tag)&&react.createElement(react.Fragment,null,react.createElement("div",{className:"separator"}),react.createElement("button",{type:"button",onClick:event=>this.deleteTag(event,index),className:"tag-delete button-transparent inline"},react.createElement(svg_close.A,null)))))),react.createElement("div",{ref:this.inputTagRef,className:"tag-editor-input",contentEditable:!this.hasAllInputDisabled(),suppressContentEditableWarning:"true",onKeyPress:this.handleKeyPressed,onKeyDown:this.handleOnKeyDown,onInput:this.handleOnInput}),this.mustShowAutocomplete()&&react.createElement(Autocomplete_Autocomplete,{id:"tag-autocomplete",value:this.state.inputTagValue,autocompleteItems:this.state.suggestedTags,left:this.state.autocompletePosition.left,top:this.state.autocompletePosition.top,width:this.state.autocompletePosition.width,onSelect:this.handleAutocompleteSelect,onArrowFocus:this.handleAutocompleteArrowFocus})),this.state.errorMessage&&react.createElement("div",{className:"error-message"},this.state.errorMessage)),react.createElement("div",{className:"actions"},react.createElement("button",{type:"button",disabled:this.hasAllInputDisabled(),className:"link cancel tag-editor-cancel",onClick:this.props.toggleInputTagEditor},react.createElement("span",null,react.createElement(es.x6,null,"Cancel"))),react.createElement("button",{type:"button",disabled:this.hasAllInputDisabled(),className:"primary tag-editor-submit "+(this.hasAllInputDisabled()?"processing":""),onClick:this.handleOnSubmit},react.createElement("span",null,react.createElement(es.x6,null,"Save")))),!this.state.errorMessage&&this.props.isOwner&&react.createElement("div",{className:"message notice"},react.createElement("strong",null,react.createElement(es.x6,null,"Pro tip"),":")," ",react.createElement(es.x6,null,"Tags starting with # are shared with all users who have access. Separate tags using commas.")))}}EditResourceTags.propTypes={context:prop_types_default().any,tags:prop_types_default().array,isOwner:prop_types_default().bool,toggleInputTagEditor:prop_types_default().func,resourceId:prop_types_default().string,actionFeedbackContext:prop_types_default().any,loadingContext:prop_types_default().any,t:prop_types_default().func};const EditResourceTags_EditResourceTags=(0,AppContext.L)((0,LoadingContext.$A)((0,ActionFeedbackContext.ot)((0,es.CI)("common")(EditResourceTags))));EditResourceTags.__docgenInfo={description:"",methods:[{name:"getDefaultState",docblock:"Get default state\n@returns {*}",modifiers:[],params:[],returns:{type:{name:"mixed"}},description:"Get default state"},{name:"getResourceTags",docblock:null,modifiers:[],params:[],returns:null},{name:"createRefs",docblock:"Create DOM nodes or React elements references in order to be able to access them programmatically.",modifiers:[],params:[],returns:null,description:"Create DOM nodes or React elements references in order to be able to access them programmatically."},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"focusOnInputTag",docblock:null,modifiers:[],params:[],returns:null},{name:"fetchAllTags",docblock:"Find all tags.\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find all tags."},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"},{name:"handleEditorClickEvent",docblock:"Handle click events on editor. Hide the component if the click occurred outside of the component.\n@param {ReactEvent} event The event",modifiers:[],params:[{name:"event",description:"The event",type:{name:"ReactEvent"},optional:!1}],returns:null,description:"Handle click events on editor. Hide the component if the click occurred outside of the component."},{name:"handleOnInput",docblock:"handle onInput event",modifiers:[],params:[],returns:null,description:"handle onInput event"},{name:"setInputTagValue",docblock:"Set state inputTagValue",modifiers:[],params:[],returns:null,description:"Set state inputTagValue"},{name:"resetInputTagValue",docblock:"reset the tag input value",modifiers:[],params:[],returns:null,description:"reset the tag input value"},{name:"getPositionOfInputTag",docblock:"get The position of the input tag to\nset the position of the autocomplete",modifiers:[],params:[],returns:null,description:"get The position of the input tag to\nset the position of the autocomplete"},{name:"createTag",docblock:"Create a new Tag\n@param slug the name of the tag\n@returns {{is_shared: boolean, slug: string}}",modifiers:[],params:[{name:"slug",description:"the name of the tag",optional:!1}],returns:{},description:"Create a new Tag"},{name:"isTagDeletable",docblock:"Check if the user have the rights to edit a tag\n@param tag\n@returns {boolean}",modifiers:[],params:[{name:"tag",optional:!1}],returns:{type:{name:"boolean"}},description:"Check if the user have the rights to edit a tag"},{name:"isTagAlreadyPresent",docblock:"check if a tag is already present or not in resource\n@param slug\n@returns {boolean}",modifiers:[],params:[{name:"slug",optional:!1}],returns:{type:{name:"boolean"}},description:"check if a tag is already present or not in resource"},{name:"setErrorMessage",docblock:"set and display an error message if it's not empty\n@param errorMessage",modifiers:[],params:[{name:"errorMessage",optional:!1}],returns:null,description:"set and display an error message if it's not empty"},{name:"blinkTagAlreadyPresent",docblock:"Blink the tag already present\n@param slug the name of the tag",modifiers:[],params:[{name:"slug",description:"the name of the tag",optional:!1}],returns:null,description:"Blink the tag already present"},{name:"isTagExceedMaxLength",docblock:"if the tag exceed the max length\nreturn true\nelse false\n@param slug\n@returns {boolean}",modifiers:[],params:[{name:"slug",optional:!1}],returns:{type:{name:"boolean"}},description:"if the tag exceed the max length\nreturn true\nelse false"},{name:"validateTag",docblock:"Check if the tag is valid or not\n@param slug\n@returns {boolean}",modifiers:[],params:[{name:"slug",optional:!1}],returns:{type:{name:"boolean"}},description:"Check if the tag is valid or not"},{name:"checkTagToBeSaved",docblock:"Check if the tag can be insert or not",modifiers:[],params:[],returns:null,description:"Check if the tag can be insert or not"},{name:"insertTag",docblock:"insert tag in the editor\n@param tag",modifiers:[],params:[{name:"tag",optional:!1}],returns:null,description:"insert tag in the editor"},{name:"handleKeyPressed",docblock:"Handle key pressed event\nAdd tag if key enter or comma\n@param event",modifiers:[],params:[{name:"event",optional:!1}],returns:null,description:"Handle key pressed event\nAdd tag if key enter or comma"},{name:"checkTagToDelete",docblock:"Check if the tag can be deleted or not",modifiers:[],params:[],returns:null,description:"Check if the tag can be deleted or not"},{name:"deleteTag",docblock:"Delete the tag\n@param event\n@param indexTag",modifiers:[],params:[{name:"event",optional:!1},{name:"indexTag",optional:!1}],returns:null,description:"Delete the tag"},{name:"mustShowAutocomplete",docblock:"must show the autocomplete or not\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"must show the autocomplete or not"},{name:"hideAutocomplete",docblock:"hide autocomplete",modifiers:[],params:[],returns:null,description:"hide autocomplete"},{name:"handleOnKeyDown",docblock:"Handle on key down event\nDelete tag if key code is 8 (backspace)\nClose editor tag if key code is 27 (escape)\n@param event",modifiers:[],params:[{name:"event",optional:!1}],returns:null,description:"Handle on key down event\nDelete tag if key code is 8 (backspace)\nClose editor tag if key code is 27 (escape)"},{name:"handleOnSubmit",docblock:"Save all tags",modifiers:["async"],params:[],returns:null,description:"Save all tags"},{name:"updateTags",docblock:"Update tags of a resource\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Update tags of a resource"},{name:"getSuggestedTags",docblock:"Get tags matching the input\n@returns {array} array",modifiers:[],params:[],returns:{description:"array",type:{name:"array"}},description:"Get tags matching the input"},{name:"handleAutocompleteSelect",docblock:"handleAutocompleteSelect\nWhat happens when an item in the autocomplete list is selected\ne.g. if it's not already in the list, add it\n@param {object} tag",modifiers:[],params:[{name:"tag",type:{name:"object"},optional:!1}],returns:null,description:"handleAutocompleteSelect\nWhat happens when an item in the autocomplete list is selected\ne.g. if it's not already in the list, add it"},{name:"handleAutocompleteArrowFocus",docblock:"Handle the autocomplete slug selected by arrow\n@param slug",modifiers:[],params:[{name:"slug",optional:!1}],returns:null,description:"Handle the autocomplete slug selected by arrow"},{name:"setCaretCursorToEnd",docblock:"Set the caret cursor position at the end of the tag editor input",modifiers:[],params:[],returns:null,description:"Set the caret cursor position at the end of the tag editor input"},{name:"translate",docblock:"Get the translate function\n@returns {function(...[*]=)}",modifiers:["get"],params:[],returns:{},description:"Get the translate function"}],displayName:"EditResourceTags",props:{context:{description:"",type:{name:"any"},required:!1},tags:{description:"",type:{name:"array"},required:!1},isOwner:{description:"",type:{name:"bool"},required:!1},toggleInputTagEditor:{description:"",type:{name:"func"},required:!1},resourceId:{description:"",type:{name:"string"},required:!1},actionFeedbackContext:{description:"",type:{name:"any"},required:!1},loadingContext:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var caret_down=__webpack_require__("./src/img/svg/caret_down.svg"),caret_right=__webpack_require__("./src/img/svg/caret_right.svg"),edit=__webpack_require__("./src/img/svg/edit.svg");class DisplayResourceDetailsTag extends react.Component{constructor(props){super(props),this.state=this.getDefaultState(),this.bindCallbacks()}getDefaultState(){return{open:!1,showTagEditor:!1}}bindCallbacks(){this.handleTitleClickEvent=this.handleTitleClickEvent.bind(this),this.toggleInputTagEditor=this.toggleInputTagEditor.bind(this)}handleTitleClickEvent(){const open=!this.state.open;this.setState({open})}get resource(){return this.props.resourceWorkspaceContext.details.resource}toggleInputTagEditor(){const showTagEditor=!this.state.showTagEditor;this.setState({showTagEditor})}render(){const hasResource=this.resource,isOwner=hasResource&&15===this.resource.permission.type,tags=hasResource&&this.resource.tags;return react.createElement("div",{className:"detailed-tags accordion sidebar-section "+(this.state.open?"":"closed")},react.createElement("div",{className:"accordion-header"},react.createElement("h4",null,react.createElement("button",{className:"link no-border",type:"button",onClick:this.handleTitleClickEvent},react.createElement("span",{className:"accordion-title"},react.createElement(es.x6,null,"Tags")),this.state.open&&react.createElement(caret_down.A,null),!this.state.open&&react.createElement(caret_right.A,null)))),this.state.open&&react.createElement("div",{className:"accordion-content"},!this.state.showTagEditor&&react.createElement(react.Fragment,null,react.createElement(EditResourceTags_EditResourceTagsItemViewer,{tags}),react.createElement("div",{className:"edit-tags"},react.createElement("button",{type:"button",className:"section-action",onClick:this.toggleInputTagEditor},react.createElement(edit.A,null),react.createElement(es.x6,null,"Edit tags")))),this.state.showTagEditor&&react.createElement(EditResourceTags_EditResourceTags,{tags,isOwner,toggleInputTagEditor:this.toggleInputTagEditor,resourceId:this.resource.id})))}}DisplayResourceDetailsTag.propTypes={history:prop_types_default().any,resourceWorkspaceContext:prop_types_default().any};const DisplayResourceDetails_DisplayResourceDetailsTag=(0,ResourceWorkspaceContext.Qw)((0,es.CI)("common")(DisplayResourceDetailsTag));DisplayResourceDetailsTag.__docgenInfo={description:"",methods:[{name:"getDefaultState",docblock:"Get default state\n@returns {*}",modifiers:[],params:[],returns:{type:{name:"mixed"}},description:"Get default state"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleTitleClickEvent",docblock:"Handle when the user selects the folder parent.",modifiers:[],params:[],returns:null,description:"Handle when the user selects the folder parent."},{name:"resource",docblock:"Get the current detailed resource",modifiers:["get"],params:[],returns:null,description:"Get the current detailed resource"},{name:"toggleInputTagEditor",docblock:"Display or not the input tag editor",modifiers:[],params:[],returns:null,description:"Display or not the input tag editor"}],displayName:"DisplayResourceDetailsTag",props:{history:{description:"",type:{name:"any"},required:!1},resourceWorkspaceContext:{description:"",type:{name:"any"},required:!1}}}}}]);