/*! For license information please see 799.69ddd85e.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[799],{"./src/react-extension/contexts/PasswordExpirySettingsContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__,f4:()=>withPasswordExpiry});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),react_i18next__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),_shared_utils_dateUtils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/shared/utils/dateUtils.js"),luxon__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/luxon/src/luxon.js");const PasswordExpirySettingsContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({getSettings:()=>{},getDefaultExpirationDate:()=>{},findSettings:()=>{},isFeatureEnabled:()=>{}});class PasswordExpirySettingsContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{settings:null,findSettings:this.findSettings.bind(this),getSettings:this.getSettings.bind(this),getDefaultExpirationDate:this.getDefaultExpirationDate.bind(this),isFeatureEnabled:this.isFeatureEnabled.bind(this)}}async findSettings(){if(!this.props.context.siteSettings.canIUse("passwordExpiry")||null!==this.getSettings())return;const settings=await this.props.context.port.request("passbolt.password-expiry.get-or-find");this.setState({settings})}getSettings(){return this.state.settings}getDefaultExpirationDate(){if(!this.props.context.siteSettings.canIUse("passwordExpiryPolicies"))return null;const settings=this.getSettings();if(!settings?.default_expiry_period)return null;const durationInDays=settings.default_expiry_period,expirationDate=luxon__WEBPACK_IMPORTED_MODULE_4__.c9.utc().plus({days:durationInDays});return(0,_shared_utils_dateUtils__WEBPACK_IMPORTED_MODULE_3__.B7)(expirationDate)}isFeatureEnabled(){const settings=this.getSettings();if(!this.props.context.siteSettings.canIUse("passwordExpiry")||!settings)return!1;return Boolean(settings.id)}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PasswordExpirySettingsContext.Provider,{value:this.state},this.props.children)}}PasswordExpirySettingsContextProvider.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_5___default().any,children:prop_types__WEBPACK_IMPORTED_MODULE_5___default().any,t:prop_types__WEBPACK_IMPORTED_MODULE_5___default().any};const __WEBPACK_DEFAULT_EXPORT__=(0,_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.L)((0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.CI)("common")(PasswordExpirySettingsContextProvider));function withPasswordExpiry(WrappedComponent){return class WithPasswordExpiry extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PasswordExpirySettingsContext.Consumer,null,(passwordExpiryContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{passwordExpiryContext,...this.props})))}}}PasswordExpirySettingsContextProvider.__docgenInfo={description:"The Password Expiry settings context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findSettings",docblock:"Find the User Passphrase Policies\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the User Passphrase Policies"},{name:"getSettings",docblock:"Get the User Passphrase Policies\n@return {Object}",modifiers:[],params:[],returns:{type:{name:"Object"}},description:"Get the User Passphrase Policies"},{name:"getDefaultExpirationDate",docblock:"Returns the expiry date based on the configuration if any.\n@returns {string|null}",modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"string"}]}},description:"Returns the expiry date based on the configuration if any."},{name:"isFeatureEnabled",docblock:"Returns true if the feature flag is enabled and the settings are set.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the feature flag is enabled and the settings are set."}],displayName:"PasswordExpirySettingsContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"any"},required:!1}}}},"./src/react-extension/contexts/ResourceWorkspaceContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XZ:()=>ResourceWorkspaceContext,FM:()=>ResourceWorkspaceFilterTypes,Ay:()=>contexts_ResourceWorkspaceContext,XH:()=>resourceLinkAuthorizedProtocols,Qw:()=>withResourceWorkspace});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),LoadingContext=__webpack_require__("./src/react-extension/contexts/LoadingContext.js"),sanitizeUrl=__webpack_require__("./src/react-extension/lib/Sanitize/sanitizeUrl.js"),luxon=__webpack_require__("./node_modules/luxon/src/luxon.js"),entity=__webpack_require__("./src/shared/models/entity/abstract/entity.js"),entitySchema=__webpack_require__("./src/shared/models/entity/abstract/entitySchema.js");class SorterEntity extends entity.A{constructor(sorterDto,options={}){super(entitySchema.A.validate(SorterEntity.ENTITY_NAME,sorterDto,SorterEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["propertyName","asc"],properties:{propertyName:{type:"string"},asc:{type:"boolean"}}}}get propertyName(){return this._props.propertyName}get asc(){return this._props.asc}static get ENTITY_NAME(){return"Sorter"}}const sorterEntity=SorterEntity;var columnsSettingCollection=__webpack_require__("./src/shared/models/entity/columnSetting/columnsSettingCollection.js"),rowsSettingEntity=__webpack_require__("./src/shared/models/entity/rowsSetting/rowsSettingEntity.js");class GridUserSettingEntity extends entity.A{constructor(gridSettingDto,options={}){super(entitySchema.A.validate(GridUserSettingEntity.ENTITY_NAME,gridSettingDto,GridUserSettingEntity.getSchema()),options),this._props.columns_setting&&(this._columns_setting=new columnsSettingCollection.A(this._props.columns_setting,{clone:!1})),this._rows_setting=rowsSettingEntity.Ay.createFromDefault(this._props.rows_setting),this._props.sorter&&(this._sorter=new sorterEntity(this._props.sorter,{clone:!1})),delete this._props._columns_setting,delete this._props._rows_setting,delete this._props.sorter}static getSchema(){return{type:"object",required:["columns_setting","sorter"],properties:{columns_setting:columnsSettingCollection.A.getSchema(),sorter:sorterEntity.getSchema(),rows_setting:rowsSettingEntity.Ay.getSchema()}}}toDto(contain){const result=Object.assign({},this._props);return contain?(this.columnsSetting&&contain.columns_setting&&(result.columns_setting=this.columnsSetting.toDto()),this.rowsSetting&&contain.rows_setting&&(result.rows_setting=this.rowsSetting.toDto()),this.sorter&&contain.sorter&&(result.sorter=this.sorter.toDto()),result):result}toJSON(){return this.toDto(GridUserSettingEntity.ALL_CONTAIN_OPTIONS)}get columnsSetting(){return this._columns_setting}get rowsSetting(){return this._rows_setting||null}get sorter(){return this._sorter}static get ENTITY_NAME(){return"GridUserSetting"}static get ALL_CONTAIN_OPTIONS(){return{columns_setting:!0,sorter:!0}}}const gridUserSetting_gridUserSettingEntity=GridUserSettingEntity;const gridResourceUserSetting_GridResourceUserSettingServiceWorkerService=class GridResourceUserSettingServiceWorkerService{constructor(port){this.port=port}async getSetting(){try{const gridSetting=await this.port.request("passbolt.resources.get-grid-setting");return null!==gridSetting?new gridUserSetting_gridUserSettingEntity(gridSetting):null}catch(error){return console.debug(error),null}}async setSetting(settings){if(!(settings instanceof gridUserSetting_gridUserSettingEntity))throw new TypeError("The parameter 'setting' should be a GridUserSettingEntity.");await this.port.request("passbolt.resources.set-grid-setting",settings.toJSON())}async resetSettings(){await this.port.request("passbolt.resources.reset-grid-setting")}};var columnsResourceSettingCollection=__webpack_require__("./src/shared/models/entity/resource/columnsResourceSettingCollection.js"),PasswordExpirySettingsContext=__webpack_require__("./src/react-extension/contexts/PasswordExpirySettingsContext.js"),RbacContext=__webpack_require__("./src/shared/context/Rbac/RbacContext.js"),uiActionEnumeration=__webpack_require__("./src/shared/services/rbacs/uiActionEnumeration.js"),ColumnModel=__webpack_require__("./src/shared/models/column/ColumnModel.js"),getPropValue=__webpack_require__("./src/react-extension/lib/Object/getPropValue.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),assertions=__webpack_require__("./src/shared/utils/assertions.js");const resourcesServiceWorkerService=class ResourcesServiceWorkerService{constructor(port){this.port=port}async updateResourceLocalStorageForParentFolderId(parentFolderId){if(!(0,assertions.Ew)(parentFolderId))throw new Error("The given parentFolderId should be a valid UUID");await this.port.request("passbolt.resources.update-local-storage-by-folder-parent-id",parentFolderId)}},ResourceWorkspaceContext=react.createContext({filter:{type:null,payload:null},sorter:{propertyName:"modified",asc:!1},filteredResources:[],selectedResources:[],columnsResourceSetting:[],rowsSetting:null,details:{resource:null,folder:null},scrollTo:{resource:null,folder:null},refresh:{permissions:!1},resourceFileToImport:null,resourceFileImportResult:null,lockDisplayDetail:!0,resourcesToExport:{resourcesIds:null,foldersIds:null},onLockDetail:()=>{},onResourceScrolled:()=>{},onResourceEdited:()=>{},onResourceDescriptionEdited:()=>{},onResourceDescriptionDecrypted:()=>{},onResourceShared:()=>{},onResourcePermissionsRefreshed:()=>{},onResourceCopied:()=>{},onResourcePreviewed:()=>{},onResourceActivitiesRefreshed:()=>{},onSorterChanged:()=>{},onResourceSelected:{all:()=>{},none:()=>{},multiple:()=>{},range:()=>{},single:()=>{}},onResourceFileToImport:()=>{},onResourceFileImportResult:()=>{},onResourcesToExport:()=>{},onGoToResourceUriRequested:()=>{},onChangeColumnView:()=>{},onChangeColumnsSettings:()=>{},resetGridColumnsSettings:()=>{},onChangeRowSettingsHeight:()=>{},getHierarchyFolderCache:()=>{}});class ResourceWorkspaceContextProvider extends react.Component{constructor(props){super(props),this.rowsSetting=rowsSettingEntity.Ay.createFromDefault(),this.state=this.defaultState,this.initializeProperties(),this.gridResourceUserSetting=new gridResourceUserSetting_GridResourceUserSettingServiceWorkerService(props.context.port),this.resourcesServiceWorkerService=new resourcesServiceWorkerService(props.context.port)}get defaultSorter(){return new sorterEntity({propertyName:"modified",asc:!1})}get defaultState(){return{filter:{type:ResourceWorkspaceFilterTypes.NONE},sorter:this.defaultSorter,filteredResources:null,selectedResources:[],columnsResourceSetting:null,rowsSetting:this.rowsSetting.toDto(),details:{resource:null,folder:null},scrollTo:{resource:null,folder:null},refresh:{activities:!1,permissions:!1},resourceFileToImport:null,resourceFileImportResult:null,lockDisplayDetail:!0,resourcesToExport:null,onLockDetail:this.handleLockDetail.bind(this),onFolderScrolled:this.handleFolderScrolled.bind(this),onResourceScrolled:this.handleResourceScrolled.bind(this),onResourceEdited:this.handleResourceEdited.bind(this),onResourceDescriptionEdited:this.handleResourceDescriptionEdited.bind(this),onResourceDescriptionDecrypted:this.handleResourceDescriptionDecryted.bind(this),onResourceShared:this.handleResourceShared.bind(this),onResourcePermissionsRefreshed:this.handleResourcePermissionsRefreshed.bind(this),onResourceCopied:this.handleResourceCopied.bind(this),onResourcePreviewed:this.handleResourcePreviewed.bind(this),onResourceActivitiesRefreshed:this.handleResourceActivitiesRefreshed.bind(this),onSorterChanged:this.handleSorterChange.bind(this),onResourceSelected:{all:this.handleAllResourcesSelected.bind(this),none:this.handleNoneResourcesSelected.bind(this),multiple:this.handleMultipleResourcesSelected.bind(this),range:this.handleResourceRangeSelected.bind(this),single:this.handleResourceSelected.bind(this)},onResourceFileToImport:this.handleResourceFileToImport.bind(this),onResourceFileImportResult:this.handleResourceFileImportResult.bind(this),onResourcesToExport:this.handleResourcesToExportChange.bind(this),onGoToResourceUriRequested:this.onGoToResourceUriRequested.bind(this),onChangeColumnView:this.handleChangeColumnView.bind(this),onChangeColumnsSettings:this.handleChangeColumnsSettings.bind(this),resetGridColumnsSettings:this.resetGridColumnsSettings.bind(this),onChangeRowSettingsHeight:this.onChangeRowSettingsHeight.bind(this)}}initializeProperties(){this.resources=null,this.folders=null}async componentDidMount(){await this.props.passwordExpiryContext.findSettings(),this.loadGridResourceSetting(),this.populate(),this.handleResourcesWaitedFor()}async componentDidUpdate(prevProps,prevState){await this.handleResourcesLoaded(),await this.handleFoldersChange(),await this.handleResourcesChange(),await this.handleRouteChange(prevProps.location),await this.handleFilterChange(prevState.filter),await this.redirectAfterSelection()}isFilterEqual(filter1,filter2){if(filter1.type!==filter2.type)return!1;switch(filter1.type){case ResourceWorkspaceFilterTypes.GROUP:return filter1?.payload?.group?.id===filter2?.payload?.group?.id;case ResourceWorkspaceFilterTypes.FOLDER:return filter1?.payload?.folder?.id===filter2?.payload?.folder?.id;case ResourceWorkspaceFilterTypes.TAG:return filter1?.payload?.tag?.id===filter2?.payload?.tag?.id;case ResourceWorkspaceFilterTypes.TEXT:return filter1?.payload===filter2?.payload;default:return!0}}async handleFilterChange(previousFilter){if(!this.isFilterEqual(previousFilter,this.state.filter)){if(previousFilter.type===ResourceWorkspaceFilterTypes.NONE)return;await this.unselectAll(),this.state.filter.type!==ResourceWorkspaceFilterTypes.GROUP&&this.state.filter.type!==ResourceWorkspaceFilterTypes.FOLDER&&this.populate()}}async handleFoldersChange(){this.props.context.folders!==this.folders&&(this.folders=this.props.context.folders,await this.refreshSearchFilter(),await this.updateDetails())}async handleResourcesChange(){this.props.context.resources&&this.props.context.resources!==this.resources&&(this.resources=this.props.context.resources,await this.search(this.state.filter),await this.updateDetails(),await this.unselectUnknownResources())}async handleRouteChange(previousLocation){const hasLocationChanged=this.props.location.key!==previousLocation.key,isBrowserClosing=!this.props.location.key,isAppFirstLoad=this.state.filter.type===ResourceWorkspaceFilterTypes.NONE;!hasLocationChanged&&!isAppFirstLoad||isBrowserClosing||(await this.handleFolderRouteChange(),await this.handleResourceRouteChange())}async handleFolderRouteChange(){if(null===this.props.context.folders)return;const folderId=this.props.match.params.filterByFolderId;if(!folderId)return;const folder=this.props.context.folders.find((folder=>folder.id===folderId));if(!folder)return void this.handleUnknownFolder();this.canUseFolders&&this.populateFolders(),this.resourcesServiceWorkerService.updateResourceLocalStorageForParentFolderId(folder.id),await this.search({type:ResourceWorkspaceFilterTypes.FOLDER,payload:{folder}});this.state.selectedResources.length>1||(await this.scrollToFolder(folder),await this.detailFolder(folder))}async handleResourceRouteChange(){if(!this.props.location.pathname.includes("passwords"))return;if("expired"===this.props.match.params?.filterType)return void this.handleExpiredResourceRouteChange();const resourceId=this.props.match.params.selectedResourceId;resourceId?this.handleSingleResourceRouteChange(resourceId):this.handleAllResourceRouteChange()}async handleSingleResourceRouteChange(resourceId){if(null!==this.resources){const resource=this.resources.find((resource=>resource.id===resourceId));this.state.filter.type===ResourceWorkspaceFilterTypes.NONE&&await this.search({type:ResourceWorkspaceFilterTypes.ALL}),resource?(await this.selectFromRoute(resource),await this.scrollToResource(resource),await this.detailResource(resource)):this.handleUnknownResource()}}async handleAllResourceRouteChange(){if(!(null!==this.resources))return;const filter=this.props.location.state?.filter||{type:ResourceWorkspaceFilterTypes.ALL},isSameFilter=this.state.filter===filter;await this.detailNothing(),isSameFilter||await this.search(filter)}async handleExpiredResourceRouteChange(){if(!(null!==this.resources))return;const filter={type:ResourceWorkspaceFilterTypes.EXPIRED},isSameFilter=this.state.filter===filter;await this.detailNothing(),isSameFilter||await this.search(filter)}async handleLockDetail(){const lockDisplayDetail=!this.state.lockDisplayDetail;this.setState({lockDisplayDetail})}handleUnknownResource(){this.props.actionFeedbackContext.displayError("The resource does not exist"),this.props.history.push({pathname:"/app/passwords"})}handleUnknownFolder(){this.props.actionFeedbackContext.displayError("The folder does not exist"),this.props.history.push({pathname:"/app/passwords"})}async handleResourceScrolled(){await this.scrollNothing()}async handleFolderScrolled(){await this.scrollNothing()}async handleResourceEdited(){await this.refreshSelectedResourceActivities()}async handleResourceDescriptionEdited(){await this.refreshSelectedResourceActivities()}async handleResourceDescriptionDecryted(){await this.refreshSelectedResourceActivities()}async handleResourceShared(){await this.refreshSelectedResourceActivities(),await this.refreshSelectedResourcePermissions()}async handleResourcePermissionsRefreshed(){await this.setResourcesPermissionsAsRefreshed()}async handleResourceCopied(){await this.refreshSelectedResourceActivities()}async handleResourcePreviewed(){await this.refreshSelectedResourceActivities()}async handleResourceActivitiesRefreshed(){await this.setResourceActivitiesAsRefreshed()}async handleSorterChange(propertyName){await this.updateSorter(propertyName),await this.sort()}async handleAllResourcesSelected(){await this.selectAll(),await this.detailNothing()}async handleNoneResourcesSelected(){await this.unselectAll();const{filter}=this.state;filter.type===ResourceWorkspaceFilterTypes.FOLDER?await this.handleFolderRouteChange():await this.detailNothing()}async handleMultipleResourcesSelected(resource){await this.selectMultiple(resource),await this.detailsResourceIfSingleSelection()}async handleResourceRangeSelected(resource){await this.selectRange(resource)}async handleResourceSelected(resource){await this.select(resource)}handleResourcesWaitedFor(){this.props.loadingContext.add()}handleResourcesLoaded(){null===this.resources&&this.props.context.resources&&(this.props.loadingContext.remove(),this.handleResourcesLoaded=()=>{})}async handleResourceFileToImport(resourceFile){await this.import(resourceFile)}async handleResourceFileImportResult(result){await this.updateImportResult(result)}async handleResourcesToExportChange({resourcesIds,foldersIds}){await this.updateResourcesToExport({resourcesIds,foldersIds})}onGoToResourceUriRequested(uri){const safeUri=(0,sanitizeUrl.A)(uri,{whiteListedProtocols:resourceLinkAuthorizedProtocols,defaultProtocol:sanitizeUrl.P.HTTPS});safeUri&&window.open(safeUri,"_blank","noopener,noreferrer")}get canUseFolders(){return this.props.context.siteSettings.canIUse("folders")&&this.props.rbacContext.canIUseUiAction(uiActionEnumeration.e.FOLDERS_USE)}populate(){this.canUseFolders&&this.populateFolders(),this.populateResources()}async populateResources(){try{await this.props.context.port.request("passbolt.resources.update-local-storage")}catch(error){console.error(error);const message=this.props.t("Unable to load/refresh the resources.")+(error?.message?` ${error?.message}`:"");await this.props.actionFeedbackContext.displayError(message)}}async populateFolders(){try{await this.props.context.port.request("passbolt.folders.update-local-storage")}catch(error){console.error(error);const message=this.props.t("Unable to load/refresh the folders.");Number(error?.message?` ${error?.message}`:""),await this.props.actionFeedbackContext.displayError(message)}}async search(filter){if(null===this.state.columnsResourceSetting)return void this.setState({filter});const searchOperations={[ResourceWorkspaceFilterTypes.ROOT_FOLDER]:this.searchByRootFolder.bind(this),[ResourceWorkspaceFilterTypes.FOLDER]:this.searchByFolder.bind(this),[ResourceWorkspaceFilterTypes.TAG]:this.searchByTag.bind(this),[ResourceWorkspaceFilterTypes.GROUP]:this.searchByGroup.bind(this),[ResourceWorkspaceFilterTypes.TEXT]:this.searchByText.bind(this),[ResourceWorkspaceFilterTypes.ITEMS_I_OWN]:this.searchByItemsIOwn.bind(this),[ResourceWorkspaceFilterTypes.PRIVATE]:this.searchByPrivate.bind(this),[ResourceWorkspaceFilterTypes.FAVORITE]:this.searchByFavorite.bind(this),[ResourceWorkspaceFilterTypes.SHARED_WITH_ME]:this.seachBySharedWithMe.bind(this),[ResourceWorkspaceFilterTypes.EXPIRED]:this.seachByExpired.bind(this),[ResourceWorkspaceFilterTypes.ALL]:this.searchAll.bind(this),[ResourceWorkspaceFilterTypes.NONE]:()=>{}};await searchOperations[filter.type](filter),await this.sort()}searchAll(filter){this.setState({filter,filteredResources:this.resources},this.sort)}searchByRootFolder(filter){const folderResources=this.resources.filter((resource=>!resource.folder_parent_id));this.setState({filter,filteredResources:folderResources},this.sort)}searchByFolder(filter){const folderId=filter.payload.folder.id,folderResources=this.resources.filter((resource=>resource.folder_parent_id===folderId));this.setState({filter,filteredResources:folderResources},this.sort)}searchByTag(filter){const tagId=filter.payload.tag.id,tagResources=this.resources.filter((resource=>resource.tags&&resource.tags.length>0&&resource.tags.filter((tag=>tag.id===tagId)).length>0));this.setState({filter,filteredResources:tagResources},this.sort)}searchByText(filter){const text=filter.payload,words=text&&text.split(/\s+/)||[""],canUseTags=this.props.context.siteSettings.canIUse("tags"),foldersMatchCache={},matchWord=(word,value)=>(word=>new RegExp((word=>word.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))(word),"i"))(word).test(value),getFolderById=id=>this.props.context.foldersMapById[id],matchFolder=(word,folder)=>((word,folder)=>matchWord(word,folder?.name))(word,folder)||folder?.folder_parent_id&&matchFolderCache(word,folder.folder_parent_id),matchFolderCache=(word,id)=>{const key=word+id;return void 0===foldersMatchCache[key]&&(foldersMatchCache[key]=matchFolder(word,getFolderById(id))),foldersMatchCache[key]},matchResource=(word,resource)=>((word,resource)=>["name","username","description"].some((key=>matchWord(word,resource.metadata?.[key]))))(word,resource)||((word,resource)=>resource.metadata?.uris?.some((uri=>matchWord(word,uri))))(word,resource)||canUseTags&&((word,resource)=>resource.tags?.some((tag=>matchWord(word,tag.slug))))(word,resource)||((word,resource)=>resource.metadata?.custom_fields?.some((customField=>matchWord(word,customField.metadata_key))))(word,resource)||resource?.folder_parent_id&&matchFolderCache(word,resource.folder_parent_id),filteredResources=this.resources.filter((resource=>words.every((word=>matchResource(word,resource)))));this.setState({filter,filteredResources},this.sort)}searchByGroup(filter){this.isFilterEqual(this.state.filter,filter)&&Boolean(this.state.filteredResources)||(this.props.loadingContext.add(),this.setState({filter,selectedResources:[]},(async()=>{const resourceIds=await this.props.context.port.request("passbolt.resources.find-all-ids-by-is-shared-with-group",filter.payload.group.id)||[],groupResources=this.resources.filter((resource=>resourceIds.includes(resource.id)));this.setState({filteredResources:groupResources},this.sort),this.props.loadingContext.remove()})))}searchByItemsIOwn(filter){const filteredResources=this.resources.filter((resource=>15===resource.permission.type));this.setState({filter,filteredResources},this.sort)}searchByPrivate(filter){const filteredResources=this.resources.filter((resource=>Boolean(resource.personal)));this.setState({filter,filteredResources},this.sort)}searchByFavorite(filter){const filteredResources=this.resources.filter((resource=>null!==resource.favorite));this.setState({filter,filteredResources},this.sort)}seachBySharedWithMe(filter){const filteredResources=this.resources.filter((resource=>resource.permission.type<15));this.setState({filter,filteredResources},this.sort)}searchByRecentlyModified(filter){const filteredResources=this.resources.sort(((resource1,resource2)=>luxon.c9.fromISO(resource2.modified)<luxon.c9.fromISO(resource1.modified)?-1:1));this.setState({filter,filteredResources},this.sort)}seachByExpired(filter){const filteredResources=this.resources.filter((resource=>resource.expired&&new Date(resource.expired)<=new Date));this.setState({filter,filteredResources},this.sort)}async refreshSearchFilter(){if(this.state.filter.type===ResourceWorkspaceFilterTypes.FOLDER){if(this.folders.some((folder=>folder.id===this.state.filter.payload.folder.id))){const updatedFolder=this.folders.find((folder=>folder.id===this.state.filter.payload.folder.id)),filter=Object.assign(this.state.filter,{payload:{folder:updatedFolder}});await this.setState({filter})}else{const filter={type:ResourceWorkspaceFilterTypes.ALL};this.props.history.push({pathname:"/app/passwords",state:{filter}})}}}async select(resource){const mustUnselect=1===this.state.selectedResources.length&&this.state.selectedResources[0].id===resource.id;await this.setState({selectedResources:mustUnselect?[]:[resource]})}async selectFromRoute(resource){if(!(1===this.state.selectedResources.length&&this.state.selectedResources[0].id===resource.id)){const selectedResources=[resource];await this.setState({selectedResources})}}async selectMultiple(resource){const selectionWithoutResource=this.state.selectedResources.filter((selectedResource=>selectedResource.id!==resource.id)),selectedResources=this.state.selectedResources.length!==selectionWithoutResource.length?selectionWithoutResource:[...this.state.selectedResources,resource];await this.setState({selectedResources})}async selectRange(resource){if(0===this.state.selectedResources.length)await this.select(resource);else{const hasSameId=resource=>selectedResource=>selectedResource.id===resource.id,findIndex=resource=>this.state.filteredResources.findIndex(hasSameId(resource)),startRangeIndex=findIndex(this.state.selectedResources[0]),endRangeIndex=findIndex(resource);let selectedResources;selectedResources=startRangeIndex>endRangeIndex?this.state.filteredResources.slice(endRangeIndex,startRangeIndex+1).reverse():this.state.filteredResources.slice(startRangeIndex,endRangeIndex+1),await this.setState({selectedResources})}}async selectAll(){await this.setState({selectedResources:[...this.state.filteredResources]})}async unselectAll(){0!==this.state.selectedResources.length&&await this.setState({selectedResources:[]})}async unselectUnknownResources(){const selectedResources=this.resources.filter((selectedResource=>this.state.selectedResources.some((selectedResource=>resource=>resource.id===selectedResource.id)(selectedResource)))).filter((resource=>this.state.filteredResources.includes(resource)));await this.setState({selectedResources})}redirectAfterSelection(){if(!(null!==this.resources&&(!this.canUseFolders||null!==this.folders)))return;if(1===this.state.selectedResources.length){return void(this.props.location.pathname!==`/app/passwords/view/${this.state.selectedResources[0].id}`&&this.props.history.push(`/app/passwords/view/${this.state.selectedResources[0].id}`))}const{filter}=this.state;if(filter.type===ResourceWorkspaceFilterTypes.FOLDER){return void(this.props.location.pathname!==`/app/folders/view/${this.state.filter.payload.folder.id}`&&this.props.history.push({pathname:`/app/folders/view/${this.state.filter.payload.folder.id}`}))}if(filter.type===ResourceWorkspaceFilterTypes.EXPIRED){return void("/app/passwords/filter/expired"!==this.props.location.pathname&&this.props.history.push({pathname:"/app/passwords/filter/expired"}))}"/app/passwords"!==this.props.location.pathname&&this.props.history.push({pathname:"/app/passwords",state:{filter}})}async updateSorter(propertyName){const asc=this.state.sorter.propertyName!==propertyName||!this.state.sorter.asc,sorter=new sorterEntity({propertyName,asc});this.setState({sorter},(()=>this.updateGridSetting()))}async resetSorter(){const sorter=new sorterEntity({propertyName:"modified",asc:!1});this.setState({sorter},(()=>this.updateGridSetting()))}async sort(){const baseSorter=sorter=>this.state.sorter.asc?sorter:(sorter=>(s1,s2)=>-sorter(s1,s2))(sorter),sorter="favorite"===this.state.sorter.propertyName?(s1,s2)=>s1===s2?0:s1?-1:1:(s1,s2)=>(s1||"").localeCompare(s2||""),propertySorter=((key,sorter)=>baseSorter(((s1,s2)=>sorter((0,getPropValue.A)(s1,key),(0,getPropValue.A)(s2,key)))))(this.state.sorter.propertyName,sorter);null!==this.state.filteredResources&&await this.setState({filteredResources:[...this.state.filteredResources.sort(propertySorter)]})}async detailFolder(folder){await this.setState({details:{folder,resource:null}})}async detailResource(resource){await this.setState({details:{folder:null,resource}})}async detailNothing(){(this.state.details.resource||this.state.details.folder)&&await this.setState({details:{folder:null,resource:null}})}async detailsResourceIfSingleSelection(){1===this.state.selectedResources.length?await this.detailResource(this.state.selectedResources[0]):await this.detailNothing()}async updateDetails(){if(this.state.details.resource||this.state.details.folder){if(this.state.details.resource){const updatedResourceDetails=this.resources.find((resource=>resource.id===this.state.details.resource.id));await this.setState({details:{resource:updatedResourceDetails}})}else{const updatedFolderDetails=this.folders.find((folder=>folder.id===this.state.details.folder.id));await this.setState({details:{folder:updatedFolderDetails}})}}}async scrollToResource(resource){await this.setState({scrollTo:{resource}})}async scrollToFolder(folder){await this.setState({scrollTo:{folder}})}async scrollNothing(){await this.setState({scrollTo:{}})}async refreshSelectedResourceActivities(){const refresh=Object.assign({},this.state.refresh,{activities:!0});await this.setState({refresh})}async setResourceActivitiesAsRefreshed(){const refresh=Object.assign({},this.state.refresh,{activities:!1});await this.setState({refresh})}async refreshSelectedResourcePermissions(){const refresh=Object.assign({},this.state.refresh,{permissions:!0});await this.setState({refresh})}async setResourcesPermissionsAsRefreshed(){const refresh=Object.assign({},this.state.refresh,{permissions:!1});await this.setState({refresh})}async import(resourceFile){await this.setState({resourceFileToImport:resourceFile})}async updateImportResult(result){await this.setState({resourceFileImportResult:result})}async updateResourcesToExport({resourcesIds,foldersIds}){await this.setState({resourcesToExport:{resourcesIds,foldersIds}})}async loadGridResourceSetting(){const gridUserSettingEntity=await this.gridResourceUserSetting.getSetting(),columnsResourceSetting=columnsResourceSettingCollection.A.createFromDefault(gridUserSettingEntity?.columnsSetting,{keepUnknownValue:!1});this.props.context.siteSettings.canIUse("totpResourceTypes")||columnsResourceSetting.removeById(ColumnModel.nN.TOTP),this.props.passwordExpiryContext.isFeatureEnabled()||columnsResourceSetting.removeById(ColumnModel.nN.EXPIRED),this.canUseFolders||columnsResourceSetting.removeById(ColumnModel.nN.LOCATION);const sorter=gridUserSettingEntity?.sorter||this.defaultSorter,rowsSetting=gridUserSettingEntity?.rowsSetting;this.setState({columnsResourceSetting,sorter,rowsSetting},(async()=>{await this.search(this.state.filter);const selectedResources=this.state.selectedResources;1===selectedResources.length&&await this.scrollToResource(selectedResources[0])}))}async resetGridColumnsSettings(){await this.gridResourceUserSetting.resetSettings(),await this.loadGridResourceSetting(),this.onChangeRowSettingsHeight(this.rowsSetting.height)}async handleChangeColumnView(id,show){const columnsResourceSetting=new columnsResourceSettingCollection.A(this.state.columnsResourceSetting.toDto());columnsResourceSetting.updateColumnShowValueFromDefault(id,show),this.setState({columnsResourceSetting},(()=>this.updateGridSetting()))}async handleChangeColumnsSettings(columns){const columnsResourceSetting=this.state.columnsResourceSetting.deepMerge(new columnsResourceSettingCollection.A(columns),{keepUnknownValue:!1});this.setState({columnsResourceSetting},(()=>this.updateGridSetting()))}onChangeRowSettingsHeight(rowsSettingHeight){const rowsSetting=new rowsSettingEntity.Ay(this.state.rowsSetting);rowsSetting.set("height",rowsSettingHeight),this.rowsSetting=rowsSetting,this.setState({rowsSetting:rowsSetting.toDto()},(()=>this.updateGridSetting()))}async updateGridSetting(){const gridUserSettingEntity=new gridUserSetting_gridUserSettingEntity({columns_setting:this.state.columnsResourceSetting.toDto(),sorter:this.state.sorter.toDto(),rows_setting:this.rowsSetting.toDto()});await this.gridResourceUserSetting.setSetting(gridUserSettingEntity)}render(){return react.createElement(ResourceWorkspaceContext.Provider,{value:this.state},this.props.children)}}ResourceWorkspaceContextProvider.displayName="ResourceWorkspaceContextProvider",ResourceWorkspaceContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any,location:prop_types_default().object,match:prop_types_default().object,history:prop_types_default().object,actionFeedbackContext:prop_types_default().object,passwordExpiryContext:prop_types_default().object,rbacContext:prop_types_default().any,loadingContext:prop_types_default().object,t:prop_types_default().func};const contexts_ResourceWorkspaceContext=(0,AppContext.L)((0,RbacContext.x6)((0,PasswordExpirySettingsContext.f4)((0,LoadingContext.$A)((0,ActionFeedbackContext.ot)((0,react_router.withRouter)((0,es.CI)("common")(ResourceWorkspaceContextProvider)))))));function withResourceWorkspace(WrappedComponent){return class WithResourceWorkspace extends react.Component{render(){return react.createElement(ResourceWorkspaceContext.Consumer,null,(ResourceWorkspaceContext=>react.createElement(WrappedComponent,{resourceWorkspaceContext:ResourceWorkspaceContext,...this.props})))}}}const ResourceWorkspaceFilterTypes={NONE:"NONE",ALL:"ALL",FOLDER:"FILTER-BY-FOLDER",ROOT_FOLDER:"FILTER-BY-ROOT-FOLDER",TAG:"FILTER-BY-TAG",GROUP:"FILTER-BY-GROUP",TEXT:"FILTER-BY-TEXT-SEARCH",ITEMS_I_OWN:"FILTER-BY-ITEMS-I-OWN",PRIVATE:"PRIVATE",FAVORITE:"FILTER-BY-FAVORITE",SHARED_WITH_ME:"FILTER-BY-SHARED-WITH-ME",EXPIRED:"FILTER-BY-EXPIRED"},resourceLinkAuthorizedProtocols=[sanitizeUrl.P.FTP,sanitizeUrl.P.FTPS,sanitizeUrl.P.HTTPS,sanitizeUrl.P.HTTP,sanitizeUrl.P.SSH];ResourceWorkspaceContextProvider.__docgenInfo={description:"The related context provider",methods:[{name:"defaultSorter",docblock:"Get default sorter\n@return {object}",modifiers:["get"],params:[],returns:{type:{name:"object"}},description:"Get default sorter"},{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"initializeProperties",docblock:"Initialize class properties out of the state ( for performance purpose )",modifiers:[],params:[],returns:null,description:"Initialize class properties out of the state ( for performance purpose )"},{name:"isFilterEqual",docblock:"Is filter equal\n@param {Object} filter1 The first filter to compare.\n@param {Object} filter2 The second filter to compare.\n@returns {boolean}",modifiers:[],params:[{name:"filter1",description:"The first filter to compare.",type:{name:"Object"},optional:!1},{name:"filter2",description:"The second filter to compare.",type:{name:"Object"},optional:!1}],returns:{type:{name:"boolean"}},description:"Is filter equal"},{name:"handleFilterChange",docblock:"Handles the resource search filter change\n@return {Promise<void>}",modifiers:["async"],params:[{name:"previousFilter",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handles the resource search filter change"},{name:"handleFoldersChange",docblock:"Whenever the folders change",modifiers:["async"],params:[],returns:null,description:"Whenever the folders change"},{name:"handleResourcesChange",docblock:"Handle the resources changes",modifiers:["async"],params:[],returns:null,description:"Handle the resources changes"},{name:"handleRouteChange",docblock:"Handle the route location change\n@param previousLocation Previous router location",modifiers:["async"],params:[{name:"previousLocation",description:"Previous router location",optional:!1}],returns:null,description:"Handle the route location change"},{name:"handleFolderRouteChange",docblock:"Handle the folder view route change\nE.g. /folder/view.:filterByFolderId",modifiers:["async"],params:[],returns:null,description:"Handle the folder view route change\nE.g. /folder/view.:filterByFolderId"},{name:"handleResourceRouteChange",docblock:"Handle the resource view route change",modifiers:["async"],params:[],returns:null,description:"Handle the resource view route change"},{name:"handleSingleResourceRouteChange",docblock:"Handle the resource view route change with a resource id\nE.g. /passwords/view/:resourceId",modifiers:["async"],params:[{name:"resourceId",optional:!1}],returns:null,description:"Handle the resource view route change with a resource id\nE.g. /passwords/view/:resourceId"},{name:"handleAllResourceRouteChange",docblock:"Handle the resource view route change without a resource id in the path\nE.g. /password",modifiers:["async"],params:[],returns:null,description:"Handle the resource view route change without a resource id in the path\nE.g. /password"},{name:"handleExpiredResourceRouteChange",docblock:"Handle the resource view route change for expired resources in the path\nE.g. /password/expired",modifiers:["async"],params:[],returns:null,description:"Handle the resource view route change for expired resources in the path\nE.g. /password/expired"},{name:"handleLockDetail",docblock:"Handle the lock detail to display it or not\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the lock detail to display it or not"},{name:"handleUnknownResource",docblock:"Handle an unknown resource ( passe by route parameter resource identifier )",modifiers:[],params:[],returns:null,description:"Handle an unknown resource ( passe by route parameter resource identifier )"},{name:"handleUnknownFolder",docblock:"Handle an unknown folder (passed by route parameter folder identifier)",modifiers:[],params:[],returns:null,description:"Handle an unknown folder (passed by route parameter folder identifier)"},{name:"handleResourceScrolled",docblock:"Handle the scrolling of a resource",modifiers:["async"],params:[],returns:null,description:"Handle the scrolling of a resource"},{name:"handleFolderScrolled",docblock:"Handle the scrolling of a folder",modifiers:["async"],params:[],returns:null,description:"Handle the scrolling of a folder"},{name:"handleResourceEdited",docblock:"Handle the edited resource",modifiers:["async"],params:[],returns:null,description:"Handle the edited resource"},{name:"handleResourceDescriptionEdited",docblock:"Handle the edited resource description",modifiers:["async"],params:[],returns:null,description:"Handle the edited resource description"},{name:"handleResourceDescriptionDecryted",docblock:"Handle the decrypted resource description",modifiers:["async"],params:[],returns:null,description:"Handle the decrypted resource description"},{name:"handleResourceShared",docblock:"Handle the shared resource",modifiers:["async"],params:[],returns:null,description:"Handle the shared resource"},{name:"handleResourcePermissionsRefreshed",docblock:"Handle the refresh of the resource permission",modifiers:["async"],params:[],returns:null,description:"Handle the refresh of the resource permission"},{name:"handleResourceCopied",docblock:"Handle the copied resource",modifiers:["async"],params:[],returns:null,description:"Handle the copied resource"},{name:"handleResourcePreviewed",docblock:"Handle the previewed resource",modifiers:["async"],params:[],returns:null,description:"Handle the previewed resource"},{name:"handleResourceActivitiesRefreshed",docblock:"Handle the refresh of the resource activitie\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the refresh of the resource activitie"},{name:"handleSorterChange",docblock:"Handle the change of sorter ( on property or direction )\n@param propertyName The name of the property to sort on",modifiers:["async"],params:[{name:"propertyName",description:"The name of the property to sort on",optional:!1}],returns:null,description:"Handle the change of sorter ( on property or direction )"},{name:"handleAllResourcesSelected",docblock:"Handle the all resource selection",modifiers:["async"],params:[],returns:null,description:"Handle the all resource selection"},{name:"handleNoneResourcesSelected",docblock:"Handle the none resource selection",modifiers:["async"],params:[],returns:null,description:"Handle the none resource selection"},{name:"handleMultipleResourcesSelected",docblock:"Handle the resource selection in a multiple mode\n@param resource The selected resource",modifiers:["async"],params:[{name:"resource",description:"The selected resource",optional:!1}],returns:null,description:"Handle the resource selection in a multiple mode"},{name:"handleResourceRangeSelected",docblock:"Handle the resource selection in a range mode\n@param resource The selected resource",modifiers:["async"],params:[{name:"resource",description:"The selected resource",optional:!1}],returns:null,description:"Handle the resource selection in a range mode"},{name:"handleResourceSelected",docblock:"Handle the single resource selection\n@param resource The selected resource",modifiers:["async"],params:[{name:"resource",description:"The selected resource",optional:!1}],returns:null,description:"Handle the single resource selection"},{name:"handleResourcesWaitedFor",docblock:"Handle the wait for the initial resources to be loaded",modifiers:[],params:[],returns:null,description:"Handle the wait for the initial resources to be loaded"},{name:"handleResourcesLoaded",docblock:"Handle the intial loading of the resources",modifiers:[],params:[],returns:null,description:"Handle the intial loading of the resources"},{name:"handleResourceFileToImport",docblock:"Handle the will to import a resource file",modifiers:["async"],params:[{name:"resourceFile",optional:!1}],returns:null,description:"Handle the will to import a resource file"},{name:"handleResourceFileImportResult",docblock:"Handle the resource file import result\n@param result The import result",modifiers:["async"],params:[{name:"result",description:"The import result",optional:!1}],returns:null,description:"Handle the resource file import result"},{name:"handleResourcesToExportChange",docblock:"Whenever the resources / folders to export change\n@param resourcesIds The resources ids to export\n@param foldersIds The folders ids to export",modifiers:["async"],params:[{name:"{resourcesIds, foldersIds}",optional:!1}],returns:null,description:"Whenever the resources / folders to export change"},{name:"onGoToResourceUriRequested",docblock:"Whenever the users wants to follow a resource uri\n@param {string} uri The uri to follow",modifiers:[],params:[{name:"uri",description:"The uri to follow",type:{name:"string"},optional:!1}],returns:null,description:"Whenever the users wants to follow a resource uri"},{name:"canUseFolders",docblock:"Check if the user can use folders.\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Check if the user can use folders."},{name:"populate",docblock:"Populate the context with initial data such as resources and folders",modifiers:[],params:[],returns:null,description:"Populate the context with initial data such as resources and folders"},{name:"populateResources",docblock:"Populate the resources local storage\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Populate the resources local storage"},{name:"populateFolders",docblock:"Populate the folders local storage\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Populate the folders local storage"},{name:"search",docblock:"Search for the resources which matches the given filter and sort them\n@param filter",modifiers:["async"],params:[{name:"filter",optional:!1}],returns:null,description:"Search for the resources which matches the given filter and sort them"},{name:"searchAll",docblock:"All filter ( no filter at all )\n@param filter The All filter",modifiers:[],params:[{name:"filter",description:"The All filter",optional:!1}],returns:null,description:"All filter ( no filter at all )"},{name:"searchByRootFolder",docblock:"Filter the resources which belongs to the filter root folder",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which belongs to the filter root folder"},{name:"searchByFolder",docblock:"Filter the resources which belongs to the filter folder",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which belongs to the filter folder"},{name:"searchByTag",docblock:"Filter the resources which belongs to the filter tag",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which belongs to the filter tag"},{name:"searchByText",docblock:"Filter the resources which textual properties matched some user text words\n@param filter A textual filter",modifiers:[],params:[{name:"filter",description:"A textual filter",optional:!1}],returns:null,description:"Filter the resources which textual properties matched some user text words"},{name:"searchByGroup",docblock:"Filter the resources which belongs to the filter group",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which belongs to the filter group"},{name:"searchByItemsIOwn",docblock:"Search for resources the current user owned\n@param filter The filter",modifiers:[],params:[{name:"filter",description:"The filter",optional:!1}],returns:null,description:"Search for resources the current user owned"},{name:"searchByPrivate",docblock:"Search for user private resources\n@param filter The filter",modifiers:[],params:[{name:"filter",description:"The filter",optional:!1}],returns:null,description:"Search for user private resources"},{name:"searchByFavorite",docblock:"Filter the resources which are the current user favorites one",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which are the current user favorites one"},{name:"seachBySharedWithMe",docblock:"Filter the resources which are shared wit the current user",modifiers:[],params:[{name:"filter",optional:!1}],returns:null,description:"Filter the resources which are shared wit the current user"},{name:"searchByRecentlyModified",docblock:"Keep the most recently modified resources ( current state: just sort everything with the most recent modified resource )\n@param filter A recently modified filter",modifiers:[],params:[{name:"filter",description:"A recently modified filter",optional:!1}],returns:null,description:"Keep the most recently modified resources ( current state: just sort everything with the most recent modified resource )"},{name:"seachByExpired",docblock:'Keep the expired resources\n@param filter A "expired" filter',modifiers:[],params:[{name:"filter",description:'A "expired" filter',optional:!1}],returns:null,description:"Keep the expired resources"},{name:"refreshSearchFilter",docblock:"Refresh the filter in case of its payload is outdated due to the updated list of resources",modifiers:["async"],params:[],returns:null,description:"Refresh the filter in case of its payload is outdated due to the updated list of resources"},{name:"select",docblock:"Select the given resource as the single selected resources if not already selected as single. Otherwise unselect it\n@param resource The resource to select",modifiers:["async"],params:[{name:"resource",description:"The resource to select",optional:!1}],returns:null,description:"Select the given resource as the single selected resources if not already selected as single. Otherwise unselect it"},{name:"selectFromRoute",docblock:"Selects the given resource when one comes from the navigation route\n@param resource\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"resource",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Selects the given resource when one comes from the navigation route"},{name:"selectMultiple",docblock:"Select the given resource in a multiple selection mode\n@param resource\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"resource",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Select the given resource in a multiple selection mode"},{name:"selectRange",docblock:"Select the given resource in a range selection mode\n@param resource\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"resource",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Select the given resource in a range selection mode"},{name:"selectAll",docblock:"Select all the resources",modifiers:["async"],params:[],returns:null,description:"Select all the resources"},{name:"unselectAll",docblock:"Unselect all the resources",modifiers:["async"],params:[],returns:null,description:"Unselect all the resources"},{name:"unselectUnknownResources",docblock:"Remove from the selected resources those which are not known resources in regard of the current resources list",modifiers:["async"],params:[],returns:null,description:"Remove from the selected resources those which are not known resources in regard of the current resources list"},{name:"redirectAfterSelection",docblock:"Navigate to the appropriate url after some resources selection operation",modifiers:[],params:[],returns:null,description:"Navigate to the appropriate url after some resources selection operation"},{name:"updateSorter",docblock:"Update the resources sorter given a property name\n@param propertyName",modifiers:["async"],params:[{name:"propertyName",optional:!1}],returns:null,description:"Update the resources sorter given a property name"},{name:"resetSorter",docblock:"Reset the user sorter",modifiers:["async"],params:[],returns:null,description:"Reset the user sorter"},{name:"sort",docblock:"Sort the resources given the current sorter",modifiers:["async"],params:[],returns:null,description:"Sort the resources given the current sorter"},{name:"detailFolder",docblock:"Set the details focus on the given folder\n@param folder The folder to focus on",modifiers:["async"],params:[{name:"folder",description:"The folder to focus on",optional:!1}],returns:null,description:"Set the details focus on the given folder"},{name:"detailResource",docblock:"Set the details focus on the given resource\n@param resource The resource to focus on",modifiers:["async"],params:[{name:"resource",description:"The resource to focus on",optional:!1}],returns:null,description:"Set the details focus on the given resource"},{name:"detailNothing",docblock:"Remove the details on something",modifiers:["async"],params:[],returns:null,description:"Remove the details on something"},{name:"detailsResourceIfSingleSelection",docblock:"Set the details focus on the selected resource if it's the only one selected\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Set the details focus on the selected resource if it's the only one selected"},{name:"updateDetails",docblock:"Update the current details with the current list of resources or folders",modifiers:["async"],params:[],returns:null,description:"Update the current details with the current list of resources or folders"},{name:"scrollToResource",docblock:"Set the resource to scroll to\n@param resource A resource",modifiers:["async"],params:[{name:"resource",description:"A resource",optional:!1}],returns:null,description:"Set the resource to scroll to"},{name:"scrollToFolder",docblock:"Set the folder to scroll to\n@param folder A folder",modifiers:["async"],params:[{name:"folder",description:"A folder",optional:!1}],returns:null,description:"Set the folder to scroll to"},{name:"scrollNothing",docblock:"Unset the resource to scroll to",modifiers:["async"],params:[],returns:null,description:"Unset the resource to scroll to"},{name:"refreshSelectedResourceActivities",docblock:"Refresh the activities of the current selected resource",modifiers:["async"],params:[],returns:null,description:"Refresh the activities of the current selected resource"},{name:"setResourceActivitiesAsRefreshed",docblock:"Set the resources activitie as refreshed",modifiers:["async"],params:[],returns:null,description:"Set the resources activitie as refreshed"},{name:"refreshSelectedResourcePermissions",docblock:"Refresh the permissions of the current selected  resources",modifiers:["async"],params:[],returns:null,description:"Refresh the permissions of the current selected  resources"},{name:"setResourcesPermissionsAsRefreshed",docblock:"Set the resources permissions as refreshed",modifiers:["async"],params:[],returns:null,description:"Set the resources permissions as refreshed"},{name:"import",docblock:"Import the given resource file\n@param resourceFile A resource file to import",modifiers:["async"],params:[{name:"resourceFile",description:"A resource file to import",optional:!1}],returns:null,description:"Import the given resource file"},{name:"updateImportResult",docblock:"Update the resource file import result\n@param result The import result",modifiers:["async"],params:[{name:"result",description:"The import result",optional:!1}],returns:null,description:"Update the resource file import result"},{name:"updateResourcesToExport",docblock:"Update the resources / folders to export\n@param resourcesIds The resources ids to export\n@param foldersIds The folders ids to export",modifiers:["async"],params:[{name:"{resourcesIds, foldersIds}",optional:!1}],returns:null,description:"Update the resources / folders to export"},{name:"loadGridResourceSetting",docblock:"Handle the columns resources configuration\n\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the columns resources configuration"},{name:"resetGridColumnsSettings",docblock:"Reset the columns settings\n\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Reset the columns settings"},{name:"handleChangeColumnView",docblock:"Handle change column view\n@param id The column id\n@param show The boolean to show or hide column",modifiers:["async"],params:[{name:"id",description:"The column id",optional:!1},{name:"show",description:"The boolean to show or hide column",optional:!1}],returns:null,description:"Handle change column view"},{name:"handleChangeColumnsSettings",docblock:"Handle change columns setting\n@param columns",modifiers:["async"],params:[{name:"columns",optional:!1}],returns:null,description:"Handle change columns setting"},{name:"onChangeRowSettingsHeight",docblock:"Handle change columns setting\n@param {RowsSettingEntity} rowsSetting",modifiers:[],params:[{name:"rowsSettingHeight",optional:!1}],returns:null,description:"Handle change columns setting"},{name:"updateGridSetting",docblock:"Update the columns setting\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Update the columns setting"}],displayName:"ResourceWorkspaceContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},location:{description:"",type:{name:"object"},required:!1},match:{description:"",type:{name:"object"},required:!1},history:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},passwordExpiryContext:{description:"",type:{name:"object"},required:!1},rbacContext:{description:"",type:{name:"any"},required:!1},loadingContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}},"./src/shared/models/entity/resource/columnsResourceSettingCollection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _columnSetting_columnsSettingCollection__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/models/entity/columnSetting/columnsSettingCollection.js");class ColumnsResourceSettingCollection extends _columnSetting_columnsSettingCollection__WEBPACK_IMPORTED_MODULE_0__.A{static get DEFAULT(){return new _columnSetting_columnsSettingCollection__WEBPACK_IMPORTED_MODULE_0__.A([{id:"favorite",label:"Favorite",position:1,show:!0},{id:"icon",label:"Icon",position:2,show:!0,excludeFromWidthComputation:!0},{id:"name",label:"Name",position:3,show:!0},{id:"username",label:"Username",position:4,show:!0},{id:"password",label:"Password",position:5,show:!0},{id:"totp",label:"TOTP",position:6,show:!0},{id:"uri",label:"URI",position:7,show:!0},{id:"expired",label:"Expiry",position:8,show:!0},{id:"modified",label:"Modified",position:9,show:!0},{id:"location",label:"Location",position:10,show:!0}])}}const __WEBPACK_DEFAULT_EXPORT__=ColumnsResourceSettingCollection},"./src/shared/utils/assertions.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B9:()=>isValidEmail,Ew:()=>isValidUuid,sF:()=>isValidSecurityToken});var xregexp__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/xregexp/lib/index.js"),xregexp__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(xregexp__WEBPACK_IMPORTED_MODULE_0__);const UUID_REGEXP=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[0-5][a-fA-F0-9]{3}-[089aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$/,SECURITY_TOKEN__REGEXP=/^[a-zA-Z0-9-_]{3}$/,isValidEmail=data=>new(xregexp__WEBPACK_IMPORTED_MODULE_0___default())("^[\\p{L}0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\p{L}0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[_\\p{L}0-9][-_\\p{L}0-9]*\\.)*(?:[\\p{L}0-9][-\\p{L}0-9]{0,62})\\.(?:(?:[a-z]{2}\\.)?[a-z]{2,})$").test(data),isValidUuid=data=>new(xregexp__WEBPACK_IMPORTED_MODULE_0___default())(UUID_REGEXP).test(data),isValidSecurityToken=data=>new(xregexp__WEBPACK_IMPORTED_MODULE_0___default())(SECURITY_TOKEN__REGEXP).test(data)}}]);