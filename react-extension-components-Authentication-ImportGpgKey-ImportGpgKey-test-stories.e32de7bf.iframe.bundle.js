/*! For license information please see react-extension-components-Authentication-ImportGpgKey-ImportGpgKey-test-stories.e32de7bf.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[3793],{"./src/react-extension/components/Authentication/ImportGpgKey/ImportGpgKey.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Recover:()=>Recover,Setup:()=>Setup,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ImportGpgKey_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const ImportGpgKeyVariations_SETUP="Setup",ImportGpgKeyVariations_RECOVER="Recover";class ImportGpgKey extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.bindEventHandlers(),this.createReferences()}get defaultState(){return{selectedFile:null,privateKey:"",actions:{processing:!1},hasBeenValidated:!1,errors:{emptyPrivateKey:!1,invalidPrivateKey:!1},errorMessage:"",keyHasAnExpirationDate:!1}}get areActionsAllowed(){return!this.state.actions.processing}get isValid(){return Object.values(this.state.errors).every((value=>!value))}get isProcessing(){return this.state.actions.processing}get hasErrors(){return this.state.errors.emptyPrivateKey||this.state.errors.invalidPrivateKey}bindEventHandlers(){this.handleSubmit=this.handleSubmit.bind(this),this.handleChangePrivateKey=this.handleChangePrivateKey.bind(this),this.handleSelectPrivateKeyFile=this.handleSelectPrivateKeyFile.bind(this),this.handleSelectFile=this.handleSelectFile.bind(this),this.checkExpiryDate=this.checkExpiryDate.bind(this)}createReferences(){this.privateKeyInputRef=react.createRef(),this.fileUploaderRef=react.createRef()}async handleSubmit(event){event.preventDefault(),await this.validate(),this.isValid&&(this.toggleProcessing(),await this.save())}async checkExpiryDate(privateKey){if(!this.props.hasKeyExpirationDate)return;const keyHasAnExpirationDate=await this.props.hasKeyExpirationDate(privateKey).catch((()=>!1));this.setState({keyHasAnExpirationDate})}async handleChangePrivateKey(event){const privateKey=event.target.value;this.setState({privateKey}),await this.checkExpiryDate(privateKey),this.state.hasBeenValidated&&await this.validate()}handleSelectFile(){this.fileUploaderRef.current.click()}get selectedFilename(){return this.state.selectedFile?this.state.selectedFile.name:""}async handleSelectPrivateKeyFile(event){const[privateKeyFile]=event.target.files,privateKey=await this.readPrivateKeyFile(privateKeyFile);await this.checkExpiryDate(privateKey),this.setState({privateKey,selectedFile:privateKeyFile}),this.state.hasBeenValidated&&await this.validate()}async save(){await this.props.onComplete(this.state.privateKey).catch(this.onSaveFailure.bind(this))}onSaveFailure(error){if(this.toggleProcessing(),"GpgKeyError"!==error.name)throw error;this.setState({errors:{invalidPrivateKey:!0},errorMessage:error.message})}readPrivateKeyFile(privateKeyFile){const reader=new FileReader;return new Promise(((resolve,reject)=>{reader.onloadend=()=>{try{resolve(reader.result)}catch(e){reject(e)}},reader.readAsText(privateKeyFile)}))}async validate(){const{privateKey}=this.state,emptyPrivateKey=""===privateKey.trim();if(emptyPrivateKey)return void this.setState({hasBeenValidated:!0,errors:{emptyPrivateKey}});let invalidPrivateKey=!1,errorMessage="";try{await this.props.validatePrivateGpgKey(privateKey)}catch(e){invalidPrivateKey=!0,errorMessage=e.message}this.setState({hasBeenValidated:!0,errors:{invalidPrivateKey},errorMessage})}toggleProcessing(){this.setState({actions:{processing:!this.state.actions.processing}})}get translate(){return this.props.t}render(){const processingClassName=this.isProcessing?"processing":"";return react.createElement("div",{className:"import-private-key"},react.createElement("h1",null,{[ImportGpgKeyVariations_SETUP]:react.createElement(es.x6,null,"Please enter your private key to continue."),[ImportGpgKeyVariations_RECOVER]:react.createElement(es.x6,null,"Welcome back, please enter your private key to begin the recovery process.")}[this.props.displayAs]),react.createElement("form",{acceptCharset:"utf-8",onSubmit:this.handleSubmit},react.createElement("div",{className:`input textarea required openpgp-key ${this.hasErrors?"error":""} ${this.areActionsAllowed?"":"disabled"}`},react.createElement("label",{htmlFor:"private-key"},react.createElement(es.x6,null,"Private key")),react.createElement("textarea",{name:"private-key","aria-required":!0,ref:this.privateKeyInputRef,placeholder:this.translate("Your OpenPGP private key block"),value:this.state.privateKey,onChange:this.handleChangePrivateKey,disabled:!this.areActionsAllowed})),react.createElement("div",{className:"input file "+(this.areActionsAllowed?"":"disabled")},react.createElement("input",{type:"file",ref:this.fileUploaderRef,disabled:!this.areActionsAllowed,onChange:this.handleSelectPrivateKeyFile,accept:"text/plain,.key,.asc"}),react.createElement("div",{className:"input-file-inline"},react.createElement("input",{type:"text",disabled:!0,placeholder:this.translate("No key file selected"),value:this.selectedFilename}),react.createElement("button",{className:"button primary",type:"button",onClick:this.handleSelectFile,disabled:!this.areActionsAllowed},react.createElement("span",null,react.createElement(es.x6,null,"Choose a file")))),this.state.keyHasAnExpirationDate&&react.createElement("div",{className:"warning-message"},react.createElement(es.x6,null,"The private key should not have an expiry date."),"Â ",react.createElement(es.x6,null,"Once expired you will not be able to connect to your account.")),this.state.hasBeenValidated&&react.createElement(react.Fragment,null,this.state.errors.emptyPrivateKey&&react.createElement("div",{className:"empty-private-key error-message"},react.createElement(es.x6,null,"The private key should not be empty.")),this.state.errors.invalidPrivateKey&&react.createElement("div",{className:"invalid-private-key error-message"},this.state.errorMessage))),react.createElement("div",{className:"form-actions"},react.createElement("button",{type:"submit",className:`button primary big full-width ${processingClassName}`,disabled:this.isProcessing},react.createElement(es.x6,null,"Next")),this.props.onSecondaryActionClick&&react.createElement("button",{className:"link",type:"button",onClick:this.props.onSecondaryActionClick},{[ImportGpgKeyVariations_SETUP]:react.createElement(es.x6,null,"Or generate a new private key."),[ImportGpgKeyVariations_RECOVER]:react.createElement(es.x6,null,"Help, I lost my private key.")}[this.props.displayAs]))))}}ImportGpgKey.defaultProps={displayAs:ImportGpgKeyVariations_SETUP},ImportGpgKey.propTypes={context:prop_types_default().object,onComplete:prop_types_default().func.isRequired,displayAs:prop_types_default().oneOf([ImportGpgKeyVariations_SETUP,ImportGpgKeyVariations_RECOVER]),onSecondaryActionClick:prop_types_default().func,t:prop_types_default().func,validatePrivateGpgKey:prop_types_default().func,hasKeyExpirationDate:prop_types_default().func};const ImportGpgKey_ImportGpgKey=(0,AppContext.L)((0,es.CI)("common")(ImportGpgKey));function defaultProps(props){const defaultProps={displayAs:ImportGpgKeyVariations_SETUP,onComplete:jest.fn((()=>Promise.resolve())),onSecondaryActionClick:jest.fn((()=>Promise.resolve())),context:{port:{request:jest.fn((async()=>({})))}},validatePrivateGpgKey:jest.fn(),shouldShowExpiryDateWarning:jest.fn((()=>Promise.resolve(!1)))};return Object.assign(defaultProps,props||{})}ImportGpgKey.__docgenInfo={description:"This component allows the user to import his Gpg key",methods:[{name:"defaultState",docblock:"Returns the default state",modifiers:["get"],params:[],returns:null,description:"Returns the default state"},{name:"areActionsAllowed",docblock:"Returns true if the user can perform actions on the component",modifiers:["get"],params:[],returns:null,description:"Returns true if the user can perform actions on the component"},{name:"isValid",docblock:"Returns true if the passphrase is valid",modifiers:["get"],params:[],returns:null,description:"Returns true if the passphrase is valid"},{name:"isProcessing",docblock:"Returns true if the component must be in a processing mode",modifiers:["get"],params:[],returns:null,description:"Returns true if the component must be in a processing mode"},{name:"hasErrors",docblock:"Return true if there are errors",modifiers:["get"],params:[],returns:null,description:"Return true if there are errors"},{name:"bindEventHandlers",docblock:"Handle component event handlers",modifiers:[],params:[],returns:null,description:"Handle component event handlers"},{name:"createReferences",docblock:"Creates the references",modifiers:[],params:[],returns:null,description:"Creates the references"},{name:"handleSubmit",docblock:"Whenever the users submits his gpg key\n@param event Dom event",modifiers:["async"],params:[{name:"event",description:"Dom event",optional:!1}],returns:null,description:"Whenever the users submits his gpg key"},{name:"checkExpiryDate",docblock:"Check the expiration date of the given private key.\nIf the key has an expiry date, it shows a warning to the user.\n@param {string} privateKey",modifiers:["async"],params:[{name:"privateKey",type:{name:"string"},optional:!1}],returns:null,description:"Check the expiration date of the given private key.\nIf the key has an expiry date, it shows a warning to the user."},{name:"handleChangePrivateKey",docblock:"Whenever the user changes the private key\n@param event An input event",modifiers:["async"],params:[{name:"event",description:"An input event",optional:!1}],returns:null,description:"Whenever the user changes the private key"},{name:"handleSelectFile",docblock:"Handle the selection of a file by file explorer",modifiers:[],params:[],returns:null,description:"Handle the selection of a file by file explorer"},{name:"selectedFilename",docblock:"Returns the selected file's name",modifiers:["get"],params:[],returns:null,description:"Returns the selected file's name"},{name:"handleSelectPrivateKeyFile",docblock:"Whenever the user select a private key file\n@param event The file dom event",modifiers:["async"],params:[{name:"event",description:"The file dom event",optional:!1}],returns:null,description:"Whenever the user select a private key file"},{name:"save",docblock:"Verify and save the private gpg key",modifiers:["async"],params:[],returns:null,description:"Verify and save the private gpg key"},{name:"onSaveFailure",docblock:"Whenever the gpg key import failed\n@param {Error} error The error\n@throw {Error} If an unexpected errors hits the component. Errors not of type: InvalidMasterPasswordError.",modifiers:[],params:[{name:"error",description:"The error",type:{name:"Error"},optional:!1}],returns:null,description:"Whenever the gpg key import failed"},{name:"readPrivateKeyFile",docblock:"Read the selected private key file and returns its content in a base 64\n@param privateKeyFile A private key file",modifiers:[],params:[{name:"privateKeyFile",description:"A private key file",optional:!1}],returns:null,description:"Read the selected private key file and returns its content in a base 64"},{name:"validate",docblock:"Validate the imported private key",modifiers:["async"],params:[],returns:null,description:"Validate the imported private key"},{name:"toggleProcessing",docblock:"Toggle the processing mode",modifiers:[],params:[],returns:null,description:"Toggle the processing mode"},{name:"translate",docblock:"Get the translate function\n@returns {function(...[*]=)}",modifiers:["get"],params:[],returns:{},description:"Get the translate function"}],displayName:"ImportGpgKey",props:{displayAs:{defaultValue:{value:"'Setup'",computed:!1},description:"",type:{name:"enum",value:[{value:"'Setup'",computed:!1},{value:"'Recover'",computed:!1}]},required:!1},context:{description:"",type:{name:"object"},required:!1},onComplete:{description:"",type:{name:"func"},required:!0},onSecondaryActionClick:{description:"",type:{name:"func"},required:!1},t:{description:"",type:{name:"func"},required:!1},validatePrivateGpgKey:{description:"",type:{name:"func"},required:!1},hasKeyExpirationDate:{description:"",type:{name:"func"},required:!1}}};const ImportGpgKey_test_stories={title:"Components/Authentication/ImportGpgKey",component:ImportGpgKey_ImportGpgKey},Template=args=>react.createElement("div",{id:"container",className:"container page login"},react.createElement("div",{className:"content"},react.createElement("div",{className:"login-form"},react.createElement(react_router.fS,{initialEntries:["/"]},react.createElement(react_router.qh,{component:routerProps=>react.createElement(ImportGpgKey_ImportGpgKey,{...args,...routerProps})}))))),defaultParameters={css:"ext_authentication"},Setup=Template.bind({});Setup.args=defaultProps({displayAs:ImportGpgKeyVariations_SETUP}),Setup.parameters=defaultParameters;const Recover=Template.bind({});Recover.args=defaultProps({displayAs:ImportGpgKeyVariations_RECOVER}),Recover.parameters=defaultParameters;const __namedExportsOrder=["Setup","Recover"];Setup.parameters={...Setup.parameters,docs:{...Setup.parameters?.docs,source:{originalSource:'args => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <MemoryRouter initialEntries={[\'/\']}>\n          <Route component={routerProps => <ImportGpgKey {...args} {...routerProps} />} />\n        </MemoryRouter>\n      </div>\n    </div>\n  </div>',...Setup.parameters?.docs?.source}}},Recover.parameters={...Recover.parameters,docs:{...Recover.parameters?.docs,source:{originalSource:'args => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <MemoryRouter initialEntries={[\'/\']}>\n          <Route component={routerProps => <ImportGpgKey {...args} {...routerProps} />} />\n        </MemoryRouter>\n      </div>\n    </div>\n  </div>',...Recover.parameters?.docs?.source}}}}}]);