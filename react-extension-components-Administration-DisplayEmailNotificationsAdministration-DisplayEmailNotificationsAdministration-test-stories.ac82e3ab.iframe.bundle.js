/*! For license information please see react-extension-components-Administration-DisplayEmailNotificationsAdministration-DisplayEmailNotificationsAdministration-test-stories.ac82e3ab.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[4117],{"./src/react-extension/components/Administration/DisplayEmailNotificationsAdministration/DisplayEmailNotificationsAdministration.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllNotifications:()=>AllNotifications,AllNotificationsForCE:()=>AllNotificationsForCE,BothSourcesExist:()=>BothSourcesExist,OnlyFileSettingExist:()=>OnlyFileSettingExist,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayEmailNotificationsAdministration_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),DisplayEmailNotificationsAdministration=__webpack_require__("./src/react-extension/components/Administration/DisplayEmailNotificationsAdministration/DisplayEmailNotificationsAdministration.js"),mockApiResponse=__webpack_require__("./test/mocks/mockApiResponse.js"),MockFetch=__webpack_require__("./src/react-extension/test/mock/MockFetch.js"),ApiAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ApiAppContext.test.data.js");function defaultProps(data={}){const defaultProps1={context:(0,ApiAppContext_test_data.s)(data?.context),administrationWorkspaceContext:{setDisplayAdministrationWorkspaceAction:jest.fn(),resetDisplayAdministrationWorkspaceAction:jest.fn()},actionFeedbackContext:{displaySuccess:()=>jest.fn(),displayError:jest.fn()}};return Object.assign(defaultProps1,data)}const mockResult={send_password_create:!0,send_password_share:!0,send_password_update:!0,send_password_delete:!0,send_folder_create:!0,send_folder_update:!0,send_folder_delete:!0,send_folder_share:!0,send_comment_add:!0,send_group_delete:!0,send_group_user_add:!0,send_group_user_delete:!0,send_group_user_update:!0,send_group_manager_update:!0,send_group_manager_requestAddUser:!0,send_user_create:!0,send_user_recover:!0,send_user_recoverComplete:!0,send_admin_user_recover_abort:!0,send_admin_user_recover_complete:!0,send_admin_user_setup_completed:!0,show_description:!0,show_secret:!0,show_uri:!0,show_username:!0,show_comment:!0,send_accountRecovery_request_user:!0,send_accountRecovery_request_admin:!0,send_accountRecovery_request_guessing:!0,send_accountRecovery_response_user_approved:!0,send_accountRecovery_response_user_rejected:!0,send_accountRecovery_response_created_admin:!0,send_accountRecovery_response_created_allAdmins:!0,send_accountRecovery_policy_update:!0,send_password_expire:!0,sources_database:!0,sources_file:!1};function defaultEmailNotificationSettings(data={}){return{...mockResult,...data}}var AdministrationEmailNotificationContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationEmailNotification/AdministrationEmailNotificationContext.js"),RbacContext=__webpack_require__("./src/shared/context/Rbac/RbacContext.js");const DisplayEmailNotificationsAdministration_test_stories={title:"Components/Administration/DisplayEmailNotificationsAdministration",component:DisplayEmailNotificationsAdministration.A};let currentStory=null;(new MockFetch.A).addGetFetchRequest(/settings\/emails\/notifications\.json/,(async()=>{switch(currentStory){case"components-administration-displayemailnotificationsadministration--all-notifications":case"components-administration-displayemailnotificationsadministration--all-notifications-for-ce":return(0,mockApiResponse._)(defaultEmailNotificationSettings());case"components-administration-displayemailnotificationsadministration--both-sources-exist":return(0,mockApiResponse._)(function withFileSourceSettings(data={}){return{...Object.assign({},mockResult,{sources_file:!0}),...data}}());case"components-administration-displayemailnotificationsadministration--only-file-setting-exist":return(0,mockApiResponse._)(function withoutDatabaseSourceSettings(data={}){return{...Object.assign({},mockResult,{sources_file:!0,sources_database:!1}),...data}}())}throw new Error("Unsupported story")}));const decorators=[(Story,context)=>(currentStory=context.id,react.createElement(react.Fragment,null,react.createElement(Story,null)))],Template=args=>react.createElement(AdministrationEmailNotificationContext.FP,args,react.createElement(RbacContext.Ay,null,react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(DisplayEmailNotificationsAdministration.A,args))))),AllNotifications=Template.bind({});AllNotifications.args=defaultProps(),AllNotifications.decorators=decorators;const BothSourcesExist=Template.bind({});BothSourcesExist.args=defaultProps(),BothSourcesExist.decorators=decorators;const OnlyFileSettingExist=Template.bind({});OnlyFileSettingExist.args=defaultProps(),OnlyFileSettingExist.decorators=decorators;const AllNotificationsForCE=Template.bind({});AllNotificationsForCE.args=function defaultPropsCE(data={}){const defaultPropsCE1=defaultProps();return defaultPropsCE1.context.siteSettings.canIUse=()=>!1,Object.assign(defaultPropsCE1,data)}(),AllNotificationsForCE.decorators=decorators;const __namedExportsOrder=["AllNotifications","BothSourcesExist","OnlyFileSettingExist","AllNotificationsForCE"];AllNotifications.parameters={...AllNotifications.parameters,docs:{...AllNotifications.parameters?.docs,source:{originalSource:'args => <AdminEmailNotificationContextProvider {...args}>\n    <RbacContextProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayEmailNotificationsAdministration {...args} />\n        </div>\n      </div>\n    </RbacContextProvider>\n  </AdminEmailNotificationContextProvider>',...AllNotifications.parameters?.docs?.source}}},BothSourcesExist.parameters={...BothSourcesExist.parameters,docs:{...BothSourcesExist.parameters?.docs,source:{originalSource:'args => <AdminEmailNotificationContextProvider {...args}>\n    <RbacContextProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayEmailNotificationsAdministration {...args} />\n        </div>\n      </div>\n    </RbacContextProvider>\n  </AdminEmailNotificationContextProvider>',...BothSourcesExist.parameters?.docs?.source}}},OnlyFileSettingExist.parameters={...OnlyFileSettingExist.parameters,docs:{...OnlyFileSettingExist.parameters?.docs,source:{originalSource:'args => <AdminEmailNotificationContextProvider {...args}>\n    <RbacContextProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayEmailNotificationsAdministration {...args} />\n        </div>\n      </div>\n    </RbacContextProvider>\n  </AdminEmailNotificationContextProvider>',...OnlyFileSettingExist.parameters?.docs?.source}}},AllNotificationsForCE.parameters={...AllNotificationsForCE.parameters,docs:{...AllNotificationsForCE.parameters?.docs,source:{originalSource:'args => <AdminEmailNotificationContextProvider {...args}>\n    <RbacContextProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayEmailNotificationsAdministration {...args} />\n        </div>\n      </div>\n    </RbacContextProvider>\n  </AdminEmailNotificationContextProvider>',...AllNotificationsForCE.parameters?.docs?.source}}}},"./src/react-extension/test/mock/MockFetch.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var fetch_mock__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/fetch-mock/esm/client.js");const __WEBPACK_DEFAULT_EXPORT__=class MockFetch{async addGetFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.get(name,callback)}async addPostFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.post(name,callback)}async addPutFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.put(name,callback)}async addDeleteFetchRequest(name,callback){await fetch_mock__WEBPACK_IMPORTED_MODULE_0__.A.delete(name,callback)}}},"./src/shared/lib/Error/PassboltApiFetchError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltApiFetchError extends Error{constructor(message,data){super(message),this.name="PassboltApiFetchError",this.data=data||{}}}const __WEBPACK_DEFAULT_EXPORT__=PassboltApiFetchError},"./src/shared/lib/Error/PassboltServiceUnavailableError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class PassboltServiceUnavailableError extends Error{constructor(message){super(message=message||"The service is unavailable"),this.name="PassboltServiceUnavailableError"}}const __WEBPACK_DEFAULT_EXPORT__=PassboltServiceUnavailableError},"./src/shared/lib/apiClient/apiClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ApiClient});var PassboltApiFetchError=__webpack_require__("./src/shared/lib/Error/PassboltApiFetchError.js");class PassboltBadResponseError extends Error{constructor(){super("An internal error occurred. The server response could not be parsed. Please contact your administrator."),this.name="PassboltBadResponseError"}}const Error_PassboltBadResponseError=PassboltBadResponseError;var PassboltServiceUnavailableError=__webpack_require__("./src/shared/lib/Error/PassboltServiceUnavailableError.js");const SUPPORTED_METHODS=["GET","POST","PUT","DELETE"];class ApiClient{constructor(options){if(this.options=options,!this.options.getBaseUrl())throw new TypeError("ApiClient constructor error: baseUrl is required.");if(!this.options.getResourceName())throw new TypeError("ApiClient constructor error: resourceName is required.");try{let rawBaseUrl=this.options.getBaseUrl().toString();rawBaseUrl.endsWith("/")&&(rawBaseUrl=rawBaseUrl.slice(0,-1));let resourceName=this.options.getResourceName();resourceName.startsWith("/")&&(resourceName=resourceName.slice(1)),resourceName.endsWith("/")&&(resourceName=resourceName.slice(0,-1)),this.baseUrl=`${rawBaseUrl}/${resourceName}`,this.baseUrl=new URL(this.baseUrl)}catch(typeError){throw new TypeError("ApiClient constructor error: b.")}this.apiVersion="api-version=v2"}getDefaultHeaders(){return{Accept:"application/json","content-type":"application/json"}}async buildFetchOptions(){const optionHeaders=await this.options.getHeaders();return{credentials:"include",headers:{...this.getDefaultHeaders(),...optionHeaders}}}async get(id,urlOptions){this.assertValidId(id);const url=this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async delete(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("DELETE",url,bodyString)}async findAll(urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{});return this.fetchAndHandleResponse("GET",url)}async create(body,urlOptions){const url=this.buildUrl(this.baseUrl.toString(),urlOptions||{}),bodyString=this.buildBody(body);return this.fetchAndHandleResponse("POST",url,bodyString)}async update(id,body,urlOptions,dryRun){let url;this.assertValidId(id),void 0===dryRun&&(dryRun=!1),url=dryRun?this.buildUrl(`${this.baseUrl}/${id}/dry-run`,urlOptions||{}):this.buildUrl(`${this.baseUrl}/${id}`,urlOptions||{});let bodyString=null;return body&&(bodyString=this.buildBody(body)),this.fetchAndHandleResponse("PUT",url,bodyString)}async updateAll(body,urlOptions={}){const url=this.buildUrl(this.baseUrl.toString(),urlOptions),bodyString=body?this.buildBody(body):null;return this.fetchAndHandleResponse("PUT",url,bodyString)}assertValidId(id){if(!id)throw new TypeError("ApiClient.assertValidId error: id cannot be empty");if("string"!=typeof id)throw new TypeError("ApiClient.assertValidId error: id should be a string")}assertMethod(method){if("string"!=typeof method)throw new TypeError("ApiClient.assertValidMethod method should be a string.");if(SUPPORTED_METHODS.indexOf(method.toUpperCase())<0)throw new TypeError(`ApiClient.assertValidMethod error: method ${method} is not supported.`)}assertUrl(url){if(!url)throw new TypeError("ApliClient.assertUrl error: url is required.");if(!(url instanceof URL))throw new TypeError("ApliClient.assertUrl error: url should be a valid URL object.");if("https:"!==url.protocol&&"http:"!==url.protocol)throw new TypeError("ApliClient.assertUrl error: url protocol should only be https or http.")}assertBody(body){if(!(body instanceof FormData)&&"string"!=typeof body)throw new TypeError("ApiClient.assertBody error: body should be a string or a FormData.")}buildBody(body){return JSON.stringify(body)}buildUrl(url,urlOptions){if("string"!=typeof url)throw new TypeError("ApiClient.buildUrl error: url should be a string.");const urlObj=new URL(`${url}.json?${this.apiVersion}`);urlOptions=urlOptions||{};for(const[key,value]of Object.entries(urlOptions)){if("string"!=typeof key)throw new TypeError("ApiClient.buildUrl error: urlOptions key should be a string.");if("string"==typeof value)urlObj.searchParams.append(key,value);else{if(!Array.isArray(value))throw new TypeError("ApiClient.buildUrl error: urlOptions value should be a string or array.");value.forEach((v=>{urlObj.searchParams.append(key,v)}))}}return urlObj}async sendRequest(method,url,body,options){this.assertUrl(url),this.assertMethod(method),body&&this.assertBody(body);const fetchStrategy="undefined"!=typeof customApiClientFetch?customApiClientFetch:fetch,fetchOptions={...await this.buildFetchOptions(),...options};fetchOptions.method=method,body&&(fetchOptions.body=body);try{return await fetchStrategy(url.toString(),fetchOptions)}catch(error){throw console.error(error),navigator.onLine?new PassboltServiceUnavailableError.A("Unable to reach the server, an unexpected error occurred"):new PassboltServiceUnavailableError.A("Unable to reach the server, you are not connected to the network")}}async fetchAndHandleResponse(method,url,body,options){const response=await this.sendRequest(method,url,body,options);return this.parseResponseJson(response)}async parseResponseJson(response){let responseJson;try{responseJson=await response.json()}catch(error){throw console.debug(response.url.toString(),error),new Error_PassboltBadResponseError(error,response)}if(!response.ok){const message=responseJson.header.message;throw new PassboltApiFetchError.A(message,{code:response.status,body:responseJson.body})}return responseJson}}},"./src/shared/models/entity/role/roleEntity.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _abstract_entityV2__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/models/entity/abstract/entityV2.js");class RoleEntity extends _abstract_entityV2__WEBPACK_IMPORTED_MODULE_0__.A{static getSchema(){return{type:"object",required:["id","name"],properties:{id:{type:"string",format:"uuid"},name:{type:"string",enum:[RoleEntity.ROLE_ADMIN,RoleEntity.ROLE_USER,RoleEntity.ROLE_GUEST,RoleEntity.ROLE_ROOT]},description:{type:"string",maxLength:255},created:{type:"string",format:"date-time"},modified:{type:"string",format:"date-time"}}}}get id(){return this._props.id}get name(){return this._props.name}get description(){return this._props.description||null}get created(){return this._props.created||null}get modified(){return this._props.modified||null}isAdmin(){return this.name===RoleEntity.ROLE_ADMIN}static get ENTITY_NAME(){return"Role"}static get ROLE_ADMIN(){return"admin"}static get ROLE_USER(){return"user"}static get ROLE_GUEST(){return"guest"}static get ROLE_ROOT(){return"root"}}const __WEBPACK_DEFAULT_EXPORT__=RoleEntity},"./src/shared/utils/portals.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>createSafePortal});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-dom/index.js");function createSafePortal(children,domNode,key){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,domNode&&(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children,domNode,key))}createSafePortal.__docgenInfo={description:'Create a portal in a "safe" mode.\n"Safe" mode only means that if the given HTML element doesn\'t exist, the method doesn\'t crash.\nIt will simply ignore the rendering if it happens.\n@param {ReactNode} children the elements to render in the portal\n@param {Element | DocumentFragment} domNode the target where to render the children.\n@param {null | string} [key] a React compatible key to be passed to `createPortal` if any\n@returns {JSX}',methods:[],displayName:"createSafePortal"}},"./test/mocks/mockApiResponse.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>mockApiResponse});const mockApiResponse=(body={},header={})=>Promise.resolve(JSON.stringify({header,body}))},"./node_modules/validator/es/lib/util/assertString.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function assertString(input){if(!("string"==typeof input||input instanceof String)){var invalidType=_typeof(input);throw null===input?invalidType="null":"object"===invalidType&&(invalidType=input.constructor.name),new TypeError("Expected a string but received a ".concat(invalidType))}}__webpack_require__.d(__webpack_exports__,{A:()=>assertString})}}]);