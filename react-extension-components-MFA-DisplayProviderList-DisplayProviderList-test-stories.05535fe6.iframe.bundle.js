/*! For license information please see react-extension-components-MFA-DisplayProviderList-DisplayProviderList-test-stories.05535fe6.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[6597],{"./src/react-extension/components/MFA/DisplayProviderList/DisplayProviderList.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,NotHttps:()=>NotHttps,WithoutMfaProvidersAllowed:()=>WithoutMfaProvidersAllowed,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayProviderList_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),MockTranslationProvider=__webpack_require__("./src/react-extension/test/mock/components/Internationalisation/MockTranslationProvider.js"),DisplayProviderList_test_data=__webpack_require__("./src/react-extension/components/MFA/DisplayProviderList/DisplayProviderList.test.data.js"),MFAContext=__webpack_require__("./src/react-extension/contexts/MFAContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),Icon=__webpack_require__("./src/shared/components/Icons/Icon.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),MfaProviders_data=__webpack_require__("./src/react-extension/components/MFA/DisplayProviderList/MfaProviders.data.js"),RbacContext=__webpack_require__("./src/shared/context/Rbac/RbacContext.js"),uiActionEnumeration=__webpack_require__("./src/shared/services/rbacs/uiActionEnumeration.js"),NavigationContext=__webpack_require__("./src/react-extension/contexts/NavigationContext.js");class DisplayProviderList extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleProviderClick=this.handleProviderClick.bind(this)}async componentDidMount(){await this.getMfaSettings()}async getMfaSettings(){await this.props.mfaContext.findMfaSettings()}get isRunningUnderHttps(){const trustedDomain=this.props.context.userSettings.getTrustedDomain();return"https:"===new URL(trustedDomain).protocol}get organisationMfaProviders(){const providers=this.props.mfaContext.getMfaOrganisationSettings();return this.canUseDuoProvider||delete providers.duo,providers}get userMfaSettings(){const settings=this.props.mfaContext.getMfaUserSettings();return this.canUseDuoProvider||delete settings.duo,settings}getProvider(provider){return MfaProviders_data.A.find((mfaProvider=>mfaProvider.id===provider))}get isProcessing(){return this.props.mfaContext.isProcessing()}get canUseDuoProvider(){return this.props.rbacContext.canIUseUiAction(uiActionEnumeration.e.DUO_CONFIGURATION)}handleProviderClick(provider){const mfaUserSettings=this.props.mfaContext.getMfaUserSettings();if(this.props.mfaContext.setProvider(provider),mfaUserSettings[provider])this.props.mfaContext.navigate(MFAContext.hx.VIEWCONFIGURATION);else switch(provider){case MFAContext.bb.TOTP:this.props.mfaContext.navigate(MFAContext.hx.TOTPOVERVIEW);break;case MFAContext.bb.DUO:this.props.navigationContext.onGoToUserSettingsDuoSetupRequested();break;case MFAContext.bb.YUBIKEY:this.props.mfaContext.navigate(MFAContext.hx.SETUPYUBIKEY)}}render(){return react.createElement("div",{className:"grid grid-responsive-12"},react.createElement("div",{className:"row mfa-provider-list"},react.createElement("div",{className:"mfa-setup col8 main-column"},react.createElement("h3",null,react.createElement(es.x6,null,"Multi factor authentication")),!this.isProcessing&&react.createElement(react.Fragment,null,!this.isRunningUnderHttps&&react.createElement("p",{className:"description"},react.createElement(es.x6,null,"Sorry the multi factor authentication feature is only available in a secure context (HTTPS).")),this.isRunningUnderHttps&&!this.props.mfaContext.hasMfaOrganisationSettings()&&react.createElement(react.Fragment,null,react.createElement("h4",{className:"no-border"},react.createElement(es.x6,null,"Sorry no multi factor authentication is enabled for this organization.")),react.createElement("p",{className:"description"},react.createElement(es.x6,null,"Please contact your administrator to enable multi-factor authentication."))),this.isRunningUnderHttps&&this.props.mfaContext.hasMfaOrganisationSettings()&&react.createElement(react.Fragment,null,react.createElement("h4",{className:"no-border"},react.createElement(es.x6,null,"Please select a provider")),react.createElement("ul",{className:"mfa-providers"},this.organisationMfaProviders.totp&&react.createElement("li",{id:"totp"},react.createElement("a",{href:"#",onClick:()=>this.handleProviderClick("totp")},react.createElement("div",{className:"provider-img"},this.getProvider("totp").icon),react.createElement("span",{className:"provider-name"},this.getProvider("totp").name)),react.createElement("div",{className:`mfa-provider-status ${this.userMfaSettings.totp}`},this.userMfaSettings.totp?react.createElement(es.x6,null,"Enabled"):react.createElement(es.x6,null,"Disabled"))),this.organisationMfaProviders.duo&&react.createElement("li",{id:"duo"},react.createElement("a",{href:"#",onClick:()=>this.handleProviderClick("duo")},react.createElement("div",{className:"provider-img"},this.getProvider("duo").icon),react.createElement("span",{className:"provider-name"},this.getProvider("duo").name)),react.createElement("div",{className:`mfa-provider-status ${this.userMfaSettings.duo}`},this.userMfaSettings.duo?react.createElement(es.x6,null,"Enabled"):react.createElement(es.x6,null,"Disabled"))),this.organisationMfaProviders.yubikey&&react.createElement("li",{id:"yubikey"},react.createElement("a",{href:"#",onClick:()=>this.handleProviderClick("yubikey")},react.createElement("div",{className:"provider-img"},this.getProvider("yubikey").icon),react.createElement("span",{className:"provider-name"},this.getProvider("yubikey").name)),react.createElement("div",{className:`mfa-provider-status ${this.userMfaSettings.yubikey}`},this.userMfaSettings.yubikey?react.createElement(es.x6,null,"Enabled"):react.createElement(es.x6,null,"Disabled"))))))),react.createElement("div",{className:"col4 last"},react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"What is multi-factor authentication?")),react.createElement("p",{className:"description"},react.createElement(es.x6,null,"Multi-factor authentication (MFA) is a method of confirming a user's identity that requires presenting two or more pieces of evidence (or factor).")),react.createElement("a",{className:"button",href:"https://help.passbolt.com/start",target:"_blank",rel:"noopener noreferrer"},react.createElement(Icon.A,{name:"document"}),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation")))))))}}DisplayProviderList.propTypes={context:prop_types_default().object,t:prop_types_default().func,mfaContext:prop_types_default().object,rbacContext:prop_types_default().any,navigationContext:prop_types_default().any};const DisplayProviderList_DisplayProviderList=(0,AppContext.L)((0,MFAContext.dg)((0,RbacContext.x6)((0,NavigationContext.qN)((0,es.CI)("common")(DisplayProviderList)))));DisplayProviderList.__docgenInfo={description:"This component will display the Mfa provider enabled/disabled and allowed",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"getMfaSettings",docblock:"retrieve the mfa policies and settings",modifiers:["async"],params:[],returns:null,description:"retrieve the mfa policies and settings"},{name:"isRunningUnderHttps",docblock:"Returns true if the current URL is using the protocol HTTPS\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the current URL is using the protocol HTTPS"},{name:"organisationMfaProviders",docblock:"Return the allowed providers by organization",modifiers:["get"],params:[],returns:null,description:"Return the allowed providers by organization"},{name:"userMfaSettings",docblock:"Return the mfa settings from the user",modifiers:["get"],params:[],returns:null,description:"Return the mfa settings from the user"},{name:"getProvider",docblock:"Return the provider\n@param {string} provider",modifiers:[],params:[{name:"provider",type:{name:"string"},optional:!1}],returns:null,description:"Return the provider"},{name:"isProcessing",docblock:"Returns true if the component must be in a processing mode",modifiers:["get"],params:[],returns:null,description:"Returns true if the component must be in a processing mode"},{name:"canUseDuoProvider",docblock:"Can the user confige a dup provider.\n@returns {bool}",modifiers:["get"],params:[],returns:{type:{name:"bool"}},description:"Can the user confige a dup provider."},{name:"handleProviderClick",docblock:"handle provider click\n@param {string} provider",modifiers:[],params:[{name:"provider",type:{name:"string"},optional:!1}],returns:null,description:"handle provider click"}],displayName:"DisplayProviderList",props:{context:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1},mfaContext:{description:"",type:{name:"object"},required:!1},rbacContext:{description:"",type:{name:"any"},required:!1},navigationContext:{description:"",type:{name:"any"},required:!1}}};const DisplayProviderList_test_stories={title:"Components/MFA/DisplayProviderList",component:DisplayProviderList_DisplayProviderList},Template=args=>react.createElement(MFAContext.N8,args,react.createElement(MockTranslationProvider.A,null,react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(DisplayProviderList_DisplayProviderList,args)))),";"),Default=Template.bind({});Default.args=(0,DisplayProviderList_test_data.dG)();const WithoutMfaProvidersAllowed=Template.bind({});WithoutMfaProvidersAllowed.args=(0,DisplayProviderList_test_data.rC)();const NotHttps=Template.bind({});NotHttps.args=(0,DisplayProviderList_test_data.Gs)();const __namedExportsOrder=["Default","WithoutMfaProvidersAllowed","NotHttps"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => <MfaContextProvider {...args}>\n    <MockTranslationProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayProviderList {...args} />\n        </div>\n      </div>\n    </MockTranslationProvider>;\n  </MfaContextProvider>',...Default.parameters?.docs?.source}}},WithoutMfaProvidersAllowed.parameters={...WithoutMfaProvidersAllowed.parameters,docs:{...WithoutMfaProvidersAllowed.parameters?.docs,source:{originalSource:'args => <MfaContextProvider {...args}>\n    <MockTranslationProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayProviderList {...args} />\n        </div>\n      </div>\n    </MockTranslationProvider>;\n  </MfaContextProvider>',...WithoutMfaProvidersAllowed.parameters?.docs?.source}}},NotHttps.parameters={...NotHttps.parameters,docs:{...NotHttps.parameters?.docs,source:{originalSource:'args => <MfaContextProvider {...args}>\n    <MockTranslationProvider>\n      <div className="panel middle">\n        <div className="grid grid-responsive-12">\n          <DisplayProviderList {...args} />\n        </div>\n      </div>\n    </MockTranslationProvider>;\n  </MfaContextProvider>',...NotHttps.parameters?.docs?.source}}}}}]);