/*! For license information please see 7930.ae191d06.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[7930],{"./src/img/svg/file.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,_path2,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgFile(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:18,height:18,fill:"none",viewBox:"0 0 18 18"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M11.25 1.5H4.5A1.5 1.5 0 0 0 3 3v12a1.5 1.5 0 0 0 1.5 1.5h9A1.5 1.5 0 0 0 15 15V5.25z"})),_path2||(_path2=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"var(--icon-color)",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M10.5 1.5v3A1.5 1.5 0 0 0 12 6h3"})))}},"./src/react-extension/components/Administration/DisplayEmailNotificationsAdministration/DisplayEmailNotificationsAdministration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>DisplayEmailNotificationsAdministration_DisplayEmailNotificationsAdministration});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),file=__webpack_require__("./src/img/svg/file.svg"),AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),AdministrationEmailNotificationContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationEmailNotification/AdministrationEmailNotificationContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js");class DisplayAdministrationEmailNotificationActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}async handleSaveClick(){try{await this.props.adminEmailNotificationContext.save(),this.handleSaveSuccess()}catch(error){this.handleSaveError(error)}finally{this.props.adminEmailNotificationContext.setProcessing(!1)}}isSaveEnabled(){return!this.props.adminEmailNotificationContext.isProcessing()&&this.props.adminEmailNotificationContext.hasSettingsChanges()}bindCallbacks(){this.handleSaveClick=this.handleSaveClick.bind(this)}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The email notification settings were updated."))}async handleSaveError(error){"UserAbortsOperationError"!==error.name&&(console.error(error),await this.handleError(error))}async handleError(error){await this.props.actionFeedbackContext.displayError(error.message)}render(){return react.createElement("div",{className:"actions-wrapper"},react.createElement("button",{className:"button primary form",type:"button",disabled:!this.isSaveEnabled(),onClick:this.handleSaveClick,id:"save-settings"},react.createElement("span",null,react.createElement(es.x6,null,"Save"))))}}DisplayAdministrationEmailNotificationActions.propTypes={adminEmailNotificationContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationEmailNotificationActions_DisplayAdministrationEmailNotificationActions=(0,AdministrationEmailNotificationContext.t3)((0,ActionFeedbackContext.ot)((0,es.CI)("common")(DisplayAdministrationEmailNotificationActions)));DisplayAdministrationEmailNotificationActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"handleSaveClick",docblock:"Handle save settings",modifiers:["async"],params:[],returns:null,description:"Handle save settings"},{name:"isSaveEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleSaveSuccess",docblock:"Handle save operation success.",modifiers:["async"],params:[],returns:null,description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:null,description:"Handle save operation error."},{name:"handleError",docblock:"handle error to display the error dialog\n@param error",modifiers:["async"],params:[{name:"error",optional:!1}],returns:null,description:"handle error to display the error dialog"}],displayName:"DisplayAdministrationEmailNotificationActions",props:{adminEmailNotificationContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var portals=__webpack_require__("./src/shared/utils/portals.js");class DisplayEmailNotificationsAdministration extends react.Component{constructor(props){super(props),this.bindCallbacks()}async componentDidMount(){this.props.adminEmailNotificationContext.findEmailNotificationSettings()}componentWillUnmount(){this.props.administrationWorkspaceContext.resetDisplayAdministrationWorkspaceAction(),this.props.adminEmailNotificationContext.clearContext()}bindCallbacks(){this.handleInputChange=this.handleInputChange.bind(this)}handleInputChange(event){const value=event.target.checked,name=event.target.name;this.props.adminEmailNotificationContext.setSettings(name,value)}hasAllInputDisabled(){return this.props.adminEmailNotificationContext.isProcessing()}hasDatabaseSetting(){return this.props.adminEmailNotificationContext.getSettings().hasDatabaseSetting}hasFileConfigSetting(){return this.props.adminEmailNotificationContext.getSettings().hasFileConfigSetting}canUseFolders(){return this.props.context.siteSettings.canIUse("folders")}canUseAccountRecovery(){return this.props.context.siteSettings.canIUse("accountRecovery")}canUsePasswordExpiry(){return this.props.context.siteSettings.canIUse("passwordExpiry")||this.props.context.siteSettings.canIUse("passwordExpiryPolicies")}canUsePasswordExpiryAdvancedSettings(){return this.props.context.siteSettings.canIUse("passwordExpiryPolicies")}get settingsSource(){return this.hasDatabaseSetting()?"db":this.hasFileConfigSetting()?"file":"env"}get configurationSource(){return{env:this.props.t("environment variables"),file:this.props.t("file"),db:this.props.t("database")}[this.settingsSource]||this.props.t("unknown")}render(){const settings=this.props.adminEmailNotificationContext.getSettings(),hasSettingsChanges=settings&&this.props.adminEmailNotificationContext.hasSettingsChanges(),hasFileConfigSettings=settings&&this.hasFileConfigSetting(),hasDatabaseConfigSettings=settings&&this.hasDatabaseSetting(),hasWarning=hasFileConfigSettings||hasSettingsChanges;return react.createElement("div",{className:"row"},react.createElement("div",{className:"email-notification-settings main-column"},react.createElement("div",{className:"main-content"},react.createElement("h3",{className:"title"},react.createElement(es.x6,null,"Email delivery")),react.createElement("div",{className:"divider"}),react.createElement("p",null,react.createElement(es.x6,null,"In this section you can choose which email notifications will be sent.")),react.createElement("div",{className:"section"},react.createElement("div",{className:"password-section"},react.createElement("label",null,react.createElement(es.x6,null,"Passwords")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordCreate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.passwordCreate,id:"send-password-create-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-password-create-toggle-button"},react.createElement(es.x6,null,"When a password is created, notify its creator."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordUpdate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.passwordUpdate,id:"send-password-update-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-password-update-toggle-button"},react.createElement(es.x6,null,"When a password is updated, notify the users who have access to it."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordDelete",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.passwordDelete,id:"send-password-delete-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-password-delete-toggle-button"},react.createElement(es.x6,null,"When a password is deleted, notify the users who had access to it."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordShare",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.passwordShare,id:"send-password-share-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-password-share-toggle-button"},react.createElement(es.x6,null,"When a password is shared, notify the users who gain access to it.")))),this.canUseFolders()&&react.createElement("div",{className:"folder-section"},react.createElement("label",null,react.createElement(es.x6,null,"Folders")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"folderCreate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.folderCreate,id:"send-folder-create-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-folder-create-toggle-button"},react.createElement(es.x6,null,"When a folder is created, notify its creator."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"folderUpdate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.folderUpdate,id:"send-folder-update-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-folder-update-toggle-button"},react.createElement(es.x6,null,"When a folder is updated, notify the users who have access to it."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"folderDelete",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.folderDelete,id:"send-folder-delete-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-folder-delete-toggle-button"},react.createElement(es.x6,null,"When a folder is deleted, notify the users who had access to it."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"folderShare",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.folderShare,id:"send-folder-share-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-folder-share-toggle-button"},react.createElement(es.x6,null,"When a folder is shared, notify the users who gain access to it."))))),react.createElement("div",{className:"section"},react.createElement("div",{className:"comment-section"},react.createElement("label",null,react.createElement(es.x6,null,"Comments")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"commentAdd",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.commentAdd,id:"send-comment-add-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-comment-add-toggle-button"},react.createElement(es.x6,null,"When a comment is posted on a password, notify the users who have access to this password."))))),react.createElement("div",{className:"section"},react.createElement("div",{className:"group-section"},react.createElement("label",null,react.createElement(es.x6,null,"Group membership")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupDelete",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupDelete,id:"send-group-delete-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-delete-toggle-button"},react.createElement(es.x6,null,"When a group is deleted, notify the users who were members of it."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupUserAdd",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupUserAdd,id:"send-group-user-add-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-user-add-toggle-button"},react.createElement(es.x6,null,"When users are added to a group, notify them."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupUserDelete",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupUserDelete,id:"send-group-user-delete-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-user-delete-toggle-button"},react.createElement(es.x6,null,"When users are removed from a group, notify them."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupUserUpdate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupUserUpdate,id:"send-group-user-update-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-user-update-toggle-button"},react.createElement(es.x6,null,"When user roles change in a group, notify the corresponding users.")))),react.createElement("div",{className:"group-admin-section"},react.createElement("label",null,react.createElement(es.x6,null,"Group manager")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupManagerUpdate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupManagerUpdate,id:"send-group-manager-update-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-manager-update-toggle-button"},react.createElement(es.x6,null,"When members of a group change, notify the group manager(s)."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"groupManagerRequestAddUser",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.groupManagerRequestAddUser,id:"send-group-manager-request-add-user-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-group-manager-request-add-user-toggle-button"},react.createElement(es.x6,null,"When group managers are requested to add users to a group, notify them."))))),react.createElement("h3",{className:"title"},react.createElement(es.x6,null,"Registration & Recovery")),react.createElement("div",{className:"divider"}),react.createElement("div",{className:"section"},react.createElement("div",{className:"admin-section"},react.createElement("label",null,react.createElement(es.x6,null,"Admin")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userSetupCompleteAdmin",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userSetupCompleteAdmin,id:"user-setup-complete-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"user-setup-complete-admin-toggle-button"},react.createElement(es.x6,null,"When a user completed a setup, notify all the administrators."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userRecoverCompleteAdmin",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userRecoverCompleteAdmin,id:"user-recover-complete-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"user-recover-complete-admin-toggle-button"},react.createElement(es.x6,null,"When a user completed a recover, notify all the administrators."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userRecoverAbortAdmin",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userRecoverAbortAdmin,id:"user-recover-abort-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"user-recover-abort-admin-toggle-button"},react.createElement(es.x6,null,"When a user aborted a recover, notify all the administrators.")))),react.createElement("div",{className:"user-section"},react.createElement("label",null,react.createElement(es.x6,null,"User")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userCreate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userCreate,id:"send-user-create-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-user-create-toggle-button"},react.createElement(es.x6,null,"When new users are invited to passbolt, notify them."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userRecover",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userRecover,id:"send-user-recover-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"send-user-recover-toggle-button"},react.createElement(es.x6,null,"When users try to recover their account, notify them."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"userRecoverComplete",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.userRecoverComplete,id:"user-recover-complete-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"user-recover-complete-toggle-button"},react.createElement(es.x6,null,"When users completed the recover of their account, notify them."))))),this.canUseAccountRecovery()&&react.createElement(react.Fragment,null,react.createElement("h3",{className:"title"},react.createElement(es.x6,null,"Account recovery")),react.createElement("div",{className:"divider"}),react.createElement("div",{className:"section"},react.createElement("div",{className:"admin-section"},react.createElement("label",null,react.createElement(es.x6,null,"Admin")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestAdmin",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestAdmin,id:"account-recovery-request-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-request-admin-toggle-button"},react.createElement(es.x6,null,"When an account recovery is requested, notify all the administrators."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestPolicyUpdate",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestPolicyUpdate,id:"account-recovery-policy-update-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-policy-update-toggle-button"},react.createElement(es.x6,null,"When an account recovery policy is updated, notify all the administrators."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestCreatedAmin",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestCreatedAmin,id:"account-recovery-response-created-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-response-created-admin-toggle-button"},react.createElement(es.x6,null,"When an administrator answered to an account recovery request, notify the administrator at the origin of the action."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestCreatedAllAdmins",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestCreatedAllAdmins,id:"account-recovery-response-created-all-admin-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-response-created-all-admin-toggle-button"},react.createElement(es.x6,null,"When an administrator answered to an account recovery request, notify all the administrators.")))),react.createElement("div",{className:"user-section"},react.createElement("label",null,react.createElement(es.x6,null,"User")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestUser",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestUser,id:"account-recovery-request-user-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-request-user-toggle-button"},react.createElement(es.x6,null,"When an account recovery is requested, notify the user."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestUserApproved",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestUserApproved,id:"account-recovery-response-user-approved-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-response-user-approved-toggle-button"},react.createElement(es.x6,null,"When an account recovery is approved, notify the user."))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"accountRecoveryRequestUserRejected",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.accountRecoveryRequestUserRejected,id:"account-recovery-response-user-rejected-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"account-recovery-response-user-rejected-toggle-button"},react.createElement(es.x6,null,"When an account recovery is rejected, notify the user.")))))),this.canUsePasswordExpiry()&&react.createElement(react.Fragment,null,react.createElement("h3",{className:"title"},react.createElement(es.x6,null,"Password expiry")),react.createElement("div",{className:"divider"}),react.createElement("div",{className:"section"},react.createElement("div",{className:"password-expiry-section"},react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordExpiryExpiredUser",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.passwordExpiryExpiredUser,id:"password-expiry-expired-user-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"password-expiry-expired-user-toggle-button"},react.createElement(es.x6,null,"When a permission is revoked on a consumed password, notify the owner(s) to change it.")))))),react.createElement("h3",{className:"title"},react.createElement(es.x6,null,"Email content visibility")),react.createElement("div",{className:"divider"}),react.createElement("p",null,react.createElement(es.x6,null,"In this section you can adjust the composition of the emails, e.g. which information will be included in the notification.")),react.createElement("div",{className:"section"},react.createElement("div",{className:"password-section"},react.createElement("label",null,react.createElement(es.x6,null,"Passwords")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"showUsername",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.showUsername,id:"show-username-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"show-username-toggle-button"},react.createElement(es.x6,null,"Username"))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"showUri",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.showUri,id:"show-uri-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"show-uri-toggle-button"},react.createElement(es.x6,null,"URI"))),react.createElement("span",{className:"input toggle-switch form-element ready"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"showSecret",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.showSecret,id:"show-secret-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"show-secret-toggle-button"},react.createElement(es.x6,null,"Encrypted secret"))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"showDescription",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.showDescription,id:"show-description-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"show-description-toggle-button"},react.createElement(es.x6,null,"Description")))),react.createElement("div",{className:"comment-section"},react.createElement("label",null,react.createElement(es.x6,null,"Comments")),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"showComment",disabled:this.hasAllInputDisabled(),onChange:this.handleInputChange,checked:settings.showComment,id:"show-comment-toggle-button"}),react.createElement("label",{className:"text",htmlFor:"show-comment-toggle-button"},react.createElement(es.x6,null,"Comment content")))))),hasWarning&&react.createElement("div",{className:"warning message"},hasSettingsChanges&&react.createElement("div",{id:"email-notification-save-banner"},react.createElement("p",null,react.createElement(es.x6,null,"Don't forget to save your settings to apply your modification."))),hasFileConfigSettings&&!hasDatabaseConfigSettings&&react.createElement("div",{id:"email-notification-fileconfig-exists-banner"},react.createElement("p",null,react.createElement(es.x6,null,"You seem to have Email Notification Settings defined in your passbolt.php (or via environment variables).")," ",react.createElement(es.x6,null,"Submitting the form will overwrite those settings with the ones you choose in the form below."))),hasFileConfigSettings&&hasDatabaseConfigSettings&&react.createElement("div",{id:"email-notification-setting-overridden-banner"},react.createElement("p",null,react.createElement(es.x6,null,"Settings have been found in your database as well as in your passbolt.php (or environment variables).")," ",react.createElement(es.x6,null,"The settings displayed in the form below are the one stored in your database and have precedence over others."))))),react.createElement(DisplayAdministrationEmailNotificationActions_DisplayAdministrationEmailNotificationActions,null),(0,portals.m)(react.createElement(react.Fragment,null,react.createElement("div",{className:"sidebar-help-section",id:"email-notifications-source"},react.createElement("h3",null,react.createElement(es.x6,null,"Configuration source")),react.createElement("p",null,react.createElement(es.x6,null,"This current configuration source is: "),this.configurationSource,".")),react.createElement("div",{className:"sidebar-help-section"},react.createElement("h3",null,react.createElement(es.x6,null,"Need some help?")),react.createElement("p",null,react.createElement(es.x6,null,"For more information about email notification, checkout the dedicated page on the help website.")),react.createElement("a",{className:"button",href:"https://passbolt.com/docs/admin/emails/email-notifications/",target:"_blank",rel:"noopener noreferrer"},react.createElement(file.A,null),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))),document.getElementById("administration-help-panel")))}}DisplayEmailNotificationsAdministration.propTypes={context:prop_types_default().any,administrationWorkspaceContext:prop_types_default().object,adminEmailNotificationContext:prop_types_default().object,t:prop_types_default().func};const DisplayEmailNotificationsAdministration_DisplayEmailNotificationsAdministration=(0,AppContext.L)((0,AdministrationEmailNotificationContext.t3)((0,AdministrationWorkspaceContext.Kk)((0,es.CI)("common")(DisplayEmailNotificationsAdministration))));DisplayEmailNotificationsAdministration.__docgenInfo={description:"This component allows to display the email notifications for the administration",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleInputChange",docblock:"Handle form input changes.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle form input changes."},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if processing actions\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if processing actions"},{name:"hasDatabaseSetting",docblock:"Has database setting\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Has database setting"},{name:"hasFileConfigSetting",docblock:"Has file config setting\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Has file config setting"},{name:"canUseFolders",docblock:"Can use folders\n@returns {*}",modifiers:[],params:[],returns:{type:{name:"mixed"}},description:"Can use folders"},{name:"canUseAccountRecovery",docblock:"Can use account recovery\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Can use account recovery"},{name:"canUsePasswordExpiry",docblock:"Can use password expiry\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Can use password expiry"},{name:"canUsePasswordExpiryAdvancedSettings",docblock:"Can use password expiry advanced settings\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Can use password expiry advanced settings"},{name:"settingsSource",docblock:"Returns the source of the current settings\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current settings"},{name:"configurationSource",docblock:"Returns the source of the current configuration\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current configuration"}],displayName:"DisplayEmailNotificationsAdministration",props:{context:{description:"",type:{name:"any"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},adminEmailNotificationContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}},"./src/react-extension/contexts/Administration/AdministrationEmailNotification/AdministrationEmailNotificationContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{FP:()=>AdminEmailNotificationContextProvider,t3:()=>withAdminEmailNotification});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),apiClient=__webpack_require__("./src/shared/lib/apiClient/apiClient.js");const emailNotification_EmailNotificationService=class EmailNotificationService{constructor(apiClientOptions){apiClientOptions.setResourceName("settings/emails/notifications"),this.apiClient=new apiClient.O(apiClientOptions)}async find(){return(await this.apiClient.findAll()).body}async save(emailNotificationSetting){return(await this.apiClient.create(emailNotificationSetting)).body}};const emailNotification_EmailNotificationModel=class EmailNotificationModel{constructor(emailNotificationDTO={}){this.hasDatabaseSetting="sources_database"in emailNotificationDTO&&emailNotificationDTO.sources_database,this.hasFileConfigSetting="sources_file"in emailNotificationDTO&&emailNotificationDTO.sources_file,this.passwordCreate=!("send_password_create"in emailNotificationDTO)||emailNotificationDTO.send_password_create,this.passwordShare=!("send_password_share"in emailNotificationDTO)||emailNotificationDTO.send_password_share,this.passwordUpdate=!("send_password_update"in emailNotificationDTO)||emailNotificationDTO.send_password_update,this.passwordDelete=!("send_password_delete"in emailNotificationDTO)||emailNotificationDTO.send_password_delete,this.folderCreate=!("send_folder_create"in emailNotificationDTO)||emailNotificationDTO.send_folder_create,this.folderUpdate=!("send_folder_update"in emailNotificationDTO)||emailNotificationDTO.send_folder_update,this.folderDelete=!("send_folder_delete"in emailNotificationDTO)||emailNotificationDTO.send_folder_delete,this.folderShare=!("send_folder_share"in emailNotificationDTO)||emailNotificationDTO.send_folder_share,this.commentAdd=!("send_comment_add"in emailNotificationDTO)||emailNotificationDTO.send_comment_add,this.groupDelete=!("send_group_delete"in emailNotificationDTO)||emailNotificationDTO.send_group_delete,this.groupUserAdd=!("send_group_user_add"in emailNotificationDTO)||emailNotificationDTO.send_group_user_add,this.groupUserDelete=!("send_group_user_delete"in emailNotificationDTO)||emailNotificationDTO.send_group_user_delete,this.groupUserUpdate=!("send_group_user_update"in emailNotificationDTO)||emailNotificationDTO.send_group_user_update,this.groupManagerUpdate=!("send_group_manager_update"in emailNotificationDTO)||emailNotificationDTO.send_group_manager_update,this.groupManagerRequestAddUser=!("send_group_manager_requestAddUser"in emailNotificationDTO)||emailNotificationDTO.send_group_manager_requestAddUser,this.userCreate=!("send_user_create"in emailNotificationDTO)||emailNotificationDTO.send_user_create,this.userRecover=!("send_user_recover"in emailNotificationDTO)||emailNotificationDTO.send_user_recover,this.userRecoverComplete=!("send_user_recoverComplete"in emailNotificationDTO)||emailNotificationDTO.send_user_recoverComplete,this.userRecoverAbortAdmin=!("send_admin_user_recover_abort"in emailNotificationDTO)||emailNotificationDTO.send_admin_user_recover_abort,this.userRecoverCompleteAdmin=!("send_admin_user_recover_complete"in emailNotificationDTO)||emailNotificationDTO.send_admin_user_recover_complete,this.userSetupCompleteAdmin=!("send_admin_user_setup_completed"in emailNotificationDTO)||emailNotificationDTO.send_admin_user_setup_completed,this.showDescription=!("show_description"in emailNotificationDTO)||emailNotificationDTO.show_description,this.showSecret=!("show_secret"in emailNotificationDTO)||emailNotificationDTO.show_secret,this.showUri=!("show_uri"in emailNotificationDTO)||emailNotificationDTO.show_uri,this.showUsername=!("show_username"in emailNotificationDTO)||emailNotificationDTO.show_username,this.showComment=!("show_comment"in emailNotificationDTO)||emailNotificationDTO.show_comment,this.accountRecoveryRequestUser=!("send_accountRecovery_request_user"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_request_user,this.accountRecoveryRequestAdmin=!("send_accountRecovery_request_admin"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_request_admin,this.accountRecoveryRequestGuessing=!("send_accountRecovery_request_guessing"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_request_guessing,this.accountRecoveryRequestUserApproved=!("send_accountRecovery_response_user_approved"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_response_user_approved,this.accountRecoveryRequestUserRejected=!("send_accountRecovery_response_user_rejected"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_response_user_rejected,this.accountRecoveryRequestCreatedAmin=!("send_accountRecovery_response_created_admin"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_response_created_admin,this.accountRecoveryRequestCreatedAllAdmins=!("send_accountRecovery_response_created_allAdmins"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_response_created_allAdmins,this.accountRecoveryRequestPolicyUpdate=!("send_accountRecovery_policy_update"in emailNotificationDTO)||emailNotificationDTO.send_accountRecovery_policy_update,this.passwordExpiryExpiredUser=!("send_password_expire"in emailNotificationDTO)||emailNotificationDTO.send_password_expire}};const emailNotification_EmailNotificationDTO=class EmailNotificationDTO{constructor(emailNotificationModel={}){this.sources_database="hasDatabaseSetting"in emailNotificationModel&&emailNotificationModel.hasDatabaseSetting,this.sources_file="hasFileConfigSetting"in emailNotificationModel&&emailNotificationModel.hasFileConfigSetting,this.send_password_create=!("passwordCreate"in emailNotificationModel)||emailNotificationModel.passwordCreate,this.send_password_share=!("passwordShare"in emailNotificationModel)||emailNotificationModel.passwordShare,this.send_password_update=!("passwordUpdate"in emailNotificationModel)||emailNotificationModel.passwordUpdate,this.send_password_delete=!("passwordDelete"in emailNotificationModel)||emailNotificationModel.passwordDelete,this.send_folder_create=!("folderCreate"in emailNotificationModel)||emailNotificationModel.folderCreate,this.send_folder_update=!("folderUpdate"in emailNotificationModel)||emailNotificationModel.folderUpdate,this.send_folder_delete=!("folderDelete"in emailNotificationModel)||emailNotificationModel.folderDelete,this.send_folder_share=!("folderShare"in emailNotificationModel)||emailNotificationModel.folderShare,this.send_comment_add=!("commentAdd"in emailNotificationModel)||emailNotificationModel.commentAdd,this.send_group_delete=!("groupDelete"in emailNotificationModel)||emailNotificationModel.groupDelete,this.send_group_user_add=!("groupUserAdd"in emailNotificationModel)||emailNotificationModel.groupUserAdd,this.send_group_user_delete=!("groupUserDelete"in emailNotificationModel)||emailNotificationModel.groupUserDelete,this.send_group_user_update=!("groupUserUpdate"in emailNotificationModel)||emailNotificationModel.groupUserUpdate,this.send_group_manager_update=!("groupManagerUpdate"in emailNotificationModel)||emailNotificationModel.groupManagerUpdate,this.send_group_manager_requestAddUser=!("groupManagerRequestAddUser"in emailNotificationModel)||emailNotificationModel.groupManagerRequestAddUser,this.send_user_create=!("userCreate"in emailNotificationModel)||emailNotificationModel.userCreate,this.send_user_recover=!("userRecover"in emailNotificationModel)||emailNotificationModel.userRecover,this.send_user_recoverComplete=!("userRecoverComplete"in emailNotificationModel)||emailNotificationModel.userRecoverComplete,this.send_admin_user_setup_completed=!("userSetupCompleteAdmin"in emailNotificationModel)||emailNotificationModel.userSetupCompleteAdmin,this.send_admin_user_recover_abort=!("userRecoverAbortAdmin"in emailNotificationModel)||emailNotificationModel.userRecoverAbortAdmin,this.send_admin_user_recover_complete=!("userRecoverCompleteAdmin"in emailNotificationModel)||emailNotificationModel.userRecoverCompleteAdmin,this.send_accountRecovery_request_user=!("accountRecoveryRequestUser"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestUser,this.send_accountRecovery_request_admin=!("accountRecoveryRequestAdmin"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestAdmin,this.send_accountRecovery_request_guessing=!("accountRecoveryRequestGuessing"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestGuessing,this.send_accountRecovery_response_user_approved=!("accountRecoveryRequestUserApproved"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestUserApproved,this.send_accountRecovery_response_user_rejected=!("accountRecoveryRequestUserRejected"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestUserRejected,this.send_accountRecovery_response_created_admin=!("accountRecoveryRequestCreatedAmin"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestCreatedAmin,this.send_accountRecovery_response_created_allAdmins=!("accountRecoveryRequestCreatedAllAdmins"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestCreatedAllAdmins,this.send_accountRecovery_policy_update=!("accountRecoveryRequestPolicyUpdate"in emailNotificationModel)||emailNotificationModel.accountRecoveryRequestPolicyUpdate,this.show_description=!("showDescription"in emailNotificationModel)||emailNotificationModel.showDescription,this.show_secret=!("showSecret"in emailNotificationModel)||emailNotificationModel.showSecret,this.show_uri=!("showUri"in emailNotificationModel)||emailNotificationModel.showUri,this.show_username=!("showUsername"in emailNotificationModel)||emailNotificationModel.showUsername,this.show_comment=!("showComment"in emailNotificationModel)||emailNotificationModel.showComment,this.send_password_expire=!("passwordExpiryExpiredUser"in emailNotificationModel)||emailNotificationModel.passwordExpiryExpiredUser}},AdminEmailNotificationContext=react.createContext({getCurrentSettings:()=>{},getSettings:()=>{},setSettings:()=>{},hasSettingsChanges:()=>{},findEmailNotificationSettings:()=>{},save:()=>{},setProcessing:()=>{},isProcessing:()=>{},clearContext:()=>{}});class AdminEmailNotificationContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState;const apiClientOptions=props.context.getApiClientOptions();this.emailNotificationService=new emailNotification_EmailNotificationService(apiClientOptions)}get defaultState(){return{currentSettings:null,settings:new emailNotification_EmailNotificationModel,processing:!0,getCurrentSettings:this.getCurrentSettings.bind(this),getSettings:this.getSettings.bind(this),setSettings:this.setSettings.bind(this),findEmailNotificationSettings:this.findEmailNotificationSettings.bind(this),hasSettingsChanges:this.hasSettingsChanges.bind(this),isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),save:this.save.bind(this),clearContext:this.clearContext.bind(this)}}async findEmailNotificationSettings(){this.setProcessing(!0);const result=await this.emailNotificationService.find(),currentSettings=new emailNotification_EmailNotificationModel(result);this.setState({currentSettings}),this.setState({settings:Object.assign({},currentSettings)}),this.setProcessing(!1)}getCurrentSettings(){return this.state.currentSettings}getSettings(){return this.state.settings}setSettings(key,value){const newSettings=Object.assign({},this.state.settings,{[key]:value});this.setState({settings:newSettings})}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}hasSettingsChanges(){return this.state.currentSettings&&JSON.stringify(this.state.currentSettings)!==JSON.stringify(this.state.settings)}clearContext(){const{currentSettings,settings,processing}=this.defaultState;this.setState({currentSettings,settings,processing})}async save(){this.setProcessing(!0);const newSettings=new emailNotification_EmailNotificationDTO(this.state.settings);await this.emailNotificationService.save(newSettings),await this.findEmailNotificationSettings()}render(){return react.createElement(AdminEmailNotificationContext.Provider,{value:this.state},this.props.children)}}AdminEmailNotificationContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any};(0,AppContext.L)(AdminEmailNotificationContextProvider);function withAdminEmailNotification(WrappedComponent){return class WithAdminEmailNotification extends react.Component{render(){return react.createElement(AdminEmailNotificationContext.Consumer,null,(adminEmailNotificationContext=>react.createElement(WrappedComponent,{adminEmailNotificationContext,...this.props})))}}}AdminEmailNotificationContextProvider.__docgenInfo={description:"The Administration Email Notification context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findEmailNotificationSettings",docblock:"Find the email notification settings\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the email notification settings"},{name:"getCurrentSettings",docblock:"Returns the setting actually saved inside DB\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the setting actually saved inside DB"},{name:"getSettings",docblock:"Returns the Email Notification settings that have been fetch previously.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the Email Notification settings that have been fetch previously."},{name:"setSettings",docblock:"Handle settings changes.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"key",optional:!1},{name:"value",optional:!1}],returns:{type:{name:"void"}},description:"Handle settings changes."},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"hasSettingsChanges",docblock:"Check if there are changes to apply\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"Check if there are changes to apply"},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."},{name:"save",docblock:"Whenever the save has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the save has been requested"}],displayName:"AdminEmailNotificationContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}}}}]);