/*! For license information please see 7444.9221773e.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[7444],{"./src/react-extension/components/Administration/DisplayLoadingDialog/DisplayLoadingDialog.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__),_Common_Dialog_DialogWrapper_DialogWrapper__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/react-extension/components/Common/Dialog/DialogWrapper/DialogWrapper.js"),react_i18next__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),_img_svg_spinner_svg__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/img/svg/spinner.svg");class DisplayLoadingDialog extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.infiniteTimerUpdateIntervalId=null,this.state=this.defaultState}get defaultState(){return{infiniteTimer:0}}componentDidMount(){this.startInfiniteTimerUpdateProgress()}componentWillUnmount(){this.resetInterval()}resetInterval(){this.infiniteTimerUpdateIntervalId&&(clearInterval(this.infiniteTimerUpdateIntervalId),this.infiniteTimerUpdateIntervalId=null)}startInfiniteTimerUpdateProgress(){this.infiniteTimerUpdateIntervalId=setInterval((()=>{const infiniteTimer=this.state.infiniteTimer+2;this.setState({infiniteTimer})}),500)}calculateInfiniteProgress(){return 100-100/Math.pow(1.1,this.state.infiniteTimer)}handleClose(){this.props.onClose()}render(){const progress=this.calculateInfiniteProgress(),progressBarStyle={width:`${progress}%`};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Common_Dialog_DialogWrapper_DialogWrapper__WEBPACK_IMPORTED_MODULE_1__.A,{className:"loading-dialog",title:this.props.title,onClose:this.handleClose,disabled:!0},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"form-content"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("label",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_2__.x6,null,"Take a deep breath and enjoy being in the present moment...")),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"progress-bar-wrapper"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"progress-bar"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"progress "+(100===progress?"completed":""),style:progressBarStyle})))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"submit-wrapper clearfix"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{type:"submit",disabled:!0,className:"processing"},"Submit",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_img_svg_spinner_svg__WEBPACK_IMPORTED_MODULE_3__.A,null))))}}DisplayLoadingDialog.propTypes={onClose:prop_types__WEBPACK_IMPORTED_MODULE_4___default().func,title:prop_types__WEBPACK_IMPORTED_MODULE_4___default().string};const __WEBPACK_DEFAULT_EXPORT__=(0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.CI)("common")(DisplayLoadingDialog);DisplayLoadingDialog.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:"Returns the component default state\n@return {object}",modifiers:["get"],params:[],returns:{type:{name:"object"}},description:"Returns the component default state"},{name:"resetInterval",docblock:"Reset interval",modifiers:[],params:[],returns:null,description:"Reset interval"},{name:"startInfiniteTimerUpdateProgress",docblock:"Start the infinite timer update.\n@return {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Start the infinite timer update."},{name:"calculateInfiniteProgress",docblock:"Calculate the infinite progress\n@return {number}",modifiers:[],params:[],returns:{type:{name:"number"}},description:"Calculate the infinite progress"},{name:"handleClose",docblock:"Handle close button click.\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Handle close button click."}],displayName:"DisplayLoadingDialog",props:{onClose:{description:"",type:{name:"func"},required:!1},title:{description:"",type:{name:"string"},required:!1}}}},"./src/react-extension/contexts/Administration/AdministrationUserDirectory/AdministrationUserDirectoryContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{uA:()=>AdminUserDirectoryContextProvider,Ay:()=>AdministrationUserDirectoryContext,e$:()=>withAdminUserDirectory});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),DialogContext=__webpack_require__("./src/react-extension/contexts/DialogContext.js"),apiClient_apiClient=__webpack_require__("./src/shared/lib/apiClient/apiClient.js");const userDirectory_UserDirectoryService=class UserDirectoryService{constructor(apiClientOptions){this.apiClientOptions=apiClientOptions,apiClientOptions.setResourceName("directorysync")}async findAll(){this.apiClientOptions.setResourceName("directorysync/settings");const apiClient=new apiClient_apiClient.O(this.apiClientOptions);return(await apiClient.findAll()).body}async update(userDirectoryDto){this.apiClientOptions.setResourceName("directorysync");const apiClient=new apiClient_apiClient.O(this.apiClientOptions);return(await apiClient.update("settings",userDirectoryDto)).body}async delete(){this.apiClientOptions.setResourceName("directorysync");return new apiClient_apiClient.O(this.apiClientOptions).delete("settings")}async test(usersDirectory){this.apiClientOptions.setResourceName("directorysync/settings/test");return new apiClient_apiClient.O(this.apiClientOptions).create(usersDirectory)}async simulate(){this.apiClientOptions.setResourceName("directorysync");const apiClient=new apiClient_apiClient.O(this.apiClientOptions);return(await apiClient.get("synchronize/dry-run")).body}async synchronize(){this.apiClientOptions.setResourceName("directorysync/synchronize");const apiClient=new apiClient_apiClient.O(this.apiClientOptions);return(await apiClient.create({})).body}};const user_UserService=class UserService{constructor(apiClientOptions){this.apiClientOptions=apiClientOptions,apiClientOptions.setResourceName("users")}async findAll(){const apiClient=new apiClient_apiClient.O(this.apiClientOptions);return(await apiClient.findAll()).body}};class UserDirectoryModel{constructor(userDirectoryDTO=[],userId=""){if(!userDirectoryDTO||0===userDirectoryDTO?.length)return void this.setDefaut(userId);const defaultDomain=userDirectoryDTO.domains?.org_domain;this.openCredentials=!0,this.openDirectoryConfiguration=!1,this.openSynchronizationOptions=!1,this.source=userDirectoryDTO.source,this.authenticationType=defaultDomain?.authentication_type||"basic",this.directoryType=defaultDomain?.directory_type||"ad",this.connectionType=defaultDomain?.connection_type||"plain",this.host=defaultDomain?.hosts?.length>0?defaultDomain?.hosts[0]:"",this.hostError=null,this.port=defaultDomain?.port?.toString()||"389",this.portError=null,this.username=defaultDomain?.username||"",this.password=defaultDomain?.password||"",this.domain=defaultDomain?.domain_name||"",this.domainError=null,this.baseDn=defaultDomain?.base_dn||"",this.groupPath=userDirectoryDTO.group_path||"",this.userPath=userDirectoryDTO.user_path||"",this.groupCustomFilters=userDirectoryDTO.group_custom_filters||"",this.userCustomFilters=userDirectoryDTO.user_custom_filters||"",this.groupObjectClass=userDirectoryDTO.group_object_class||"",this.userObjectClass=userDirectoryDTO.user_object_class||"",this.useEmailPrefix=userDirectoryDTO.use_email_prefix_suffix||!1,this.emailPrefix=userDirectoryDTO.email_prefix||"",this.emailSuffix=userDirectoryDTO.email_suffix||"",this.fieldsMapping=UserDirectoryModel.defaultFieldsMapping(userDirectoryDTO.fields_mapping),this.fallbackFields=UserDirectoryModel.defaultFallbackFields(userDirectoryDTO.field_fallbacks),this.defaultAdmin=userDirectoryDTO.default_user||userId,this.defaultGroupAdmin=userDirectoryDTO.default_group_admin_user||userId,this.groupsParentGroup=userDirectoryDTO.groups_parent_group||"",this.usersParentGroup=userDirectoryDTO.users_parent_group||"",this.enabledUsersOnly=Boolean(userDirectoryDTO.enabled_users_only),this.createUsers=Boolean(userDirectoryDTO.sync_users_create),this.deleteUsers=Boolean(userDirectoryDTO.sync_users_delete),this.updateUsers=Boolean(userDirectoryDTO.sync_users_update),this.createGroups=Boolean(userDirectoryDTO.sync_groups_create),this.deleteGroups=Boolean(userDirectoryDTO.sync_groups_delete),this.updateGroups=Boolean(userDirectoryDTO.sync_groups_update),this.deleteUserBehavior=userDirectoryDTO.delete_user_behavior||"delete",this.userDirectoryToggle=Boolean(this.port)&&Boolean(this.host)&&userDirectoryDTO?.enabled}setDefaut(userId){this.openCredentials=!0,this.openDirectoryConfiguration=!1,this.openSynchronizationOptions=!1,this.source="default",this.authenticationType="basic",this.directoryType="ad",this.connectionType="plain",this.host="",this.hostError=null,this.port="389",this.portError=null,this.username="",this.password="",this.domain="",this.domainError=null,this.baseDn="",this.groupPath="",this.userPath="",this.groupCustomFilters="",this.userCustomFilters="",this.groupObjectClass="",this.userObjectClass="",this.useEmailPrefix=!1,this.emailPrefix="",this.emailSuffix="",this.fieldsMapping=UserDirectoryModel.defaultFieldsMapping(),this.fallbackFields=UserDirectoryModel.defaultFallbackFields(),this.defaultAdmin=userId,this.defaultGroupAdmin=userId,this.groupsParentGroup="",this.usersParentGroup="",this.enabledUsersOnly=!1,this.createUsers=!0,this.deleteUsers=!0,this.updateUsers=!0,this.createGroups=!0,this.deleteGroups=!0,this.updateGroups=!0,this.deleteUserBehavior="delete",this.userDirectoryToggle=!1}static defaultFieldsMapping(data={}){return{ad:{user:Object.assign({id:"objectGuid",firstname:"givenName",lastname:"sn",username:"mail",created:"whenCreated",modified:"whenChanged",groups:"memberOf",enabled:"userAccountControl"},data?.ad?.user),group:Object.assign({id:"objectGuid",name:"cn",created:"whenCreated",modified:"whenChanged",users:"member"},data?.ad?.group)},openldap:{user:Object.assign({id:"entryUuid",firstname:"givenname",lastname:"sn",username:"mail",created:"createtimestamp",modified:"modifytimestamp"},data?.openldap?.user),group:Object.assign({id:"entryUuid",name:"cn",created:"createtimestamp",modified:"modifytimestamp",users:"uniqueMember"},data?.openldap?.group)}}}static defaultFallbackFields(data={}){return{ad:Object.assign({username:""},data?.ad)}}static get DEFAULT_AD_FIELDS_MAPPING_USER_USERNAME_VALUE(){return"mail"}static get DEFAULT_OPENLDAP_FIELDS_MAPPING_GROUP_USERS_VALUE(){return"uniqueMember"}}const userDirectory_UserDirectoryModel=UserDirectoryModel;const userDirectory_UserDirectoryDTO=class UserDirectoryDTO{constructor(userDirectoryModel){const directoryType=userDirectoryModel.directoryType,isBasicAuthType=!userDirectoryModel.authenticationType||"basic"===userDirectoryModel.authenticationType;this.enabled=userDirectoryModel.userDirectoryToggle,this.group_path=userDirectoryModel.groupPath,this.user_path=userDirectoryModel.userPath,this.group_custom_filters=userDirectoryModel.groupCustomFilters,this.user_custom_filters=userDirectoryModel.userCustomFilters,this.group_object_class="openldap"===directoryType?userDirectoryModel.groupObjectClass:"",this.user_object_class="openldap"===directoryType?userDirectoryModel.userObjectClass:"",this.use_email_prefix_suffix="openldap"===directoryType&&userDirectoryModel.useEmailPrefix,this.email_prefix="openldap"===directoryType&&this.useEmailPrefix?userDirectoryModel.emailPrefix:"",this.email_suffix="openldap"===directoryType&&this.useEmailPrefix?userDirectoryModel.emailSuffix:"",this.default_user=userDirectoryModel.defaultAdmin,this.default_group_admin_user=userDirectoryModel.defaultGroupAdmin,this.groups_parent_group=userDirectoryModel.groupsParentGroup,this.users_parent_group=userDirectoryModel.usersParentGroup,this.enabled_users_only=userDirectoryModel.enabledUsersOnly,this.sync_users_create=userDirectoryModel.createUsers,this.sync_users_delete=userDirectoryModel.deleteUsers,this.sync_users_update=userDirectoryModel.updateUsers,this.sync_groups_create=userDirectoryModel.createGroups,this.sync_groups_delete=userDirectoryModel.deleteGroups,this.sync_groups_update=userDirectoryModel.updateGroups,this.fields_mapping=userDirectoryModel.fieldsMapping,this.field_fallbacks=userDirectoryModel.fallbackFields,this.delete_user_behavior=userDirectoryModel.deleteUserBehavior,this.domains={org_domain:{connection_type:userDirectoryModel.connectionType,authentication_type:userDirectoryModel.authenticationType,directory_type:directoryType,domain_name:userDirectoryModel.domain,username:isBasicAuthType?userDirectoryModel.username:void 0,password:isBasicAuthType?userDirectoryModel.password:void 0,base_dn:userDirectoryModel.baseDn,hosts:[userDirectoryModel.host],port:parseInt(userDirectoryModel.port,10)}}}};var NotifyError=__webpack_require__("./src/react-extension/components/Common/Error/NotifyError/NotifyError.js");const AdminUserDirectoryContext=react.createContext({getCurrentSettings:()=>{},getSettings:()=>{},setSettings:()=>{},setAdUserFieldsMappingSettings:()=>{},setOpenLdapGroupFieldsMappingSettings:()=>{},setAdFallbackFieldsSettings:()=>{},hadDisabledSettings:()=>{},getUsers:()=>{},hasSettingsChanges:()=>{},findUserDirectorySettings:()=>{},save:()=>{},delete:()=>{},test:()=>{},setProcessing:()=>{},isProcessing:()=>{},getErrors:()=>{},setError:()=>{},simulateUsers:()=>{},requestSynchronization:()=>{},mustOpenSynchronizePopUp:()=>{},synchronizeUsers:()=>{},isSubmitted:()=>{},setSubmitted:()=>{},setErrors:()=>{},clearContext:()=>{}});class AdminUserDirectoryContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.userDirectoryService=new userDirectory_UserDirectoryService(props.context.getApiClientOptions()),this.userService=new user_UserService(props.context.getApiClientOptions())}get defaultState(){return{users:[],errors:this.initErrors(),mustSynchronize:!1,currentSettings:null,settings:new userDirectory_UserDirectoryModel,submitted:!1,processing:!0,getCurrentSettings:this.getCurrentSettings.bind(this),getSettings:this.getSettings.bind(this),setSettings:this.setSettings.bind(this),setAdUserFieldsMappingSettings:this.setAdUserFieldsMappingSettings.bind(this),setOpenLdapGroupFieldsMappingSettings:this.setOpenLdapGroupFieldsMappingSettings.bind(this),setAdFallbackFieldsSettings:this.setAdFallbackFieldsSettings.bind(this),hadDisabledSettings:this.hadDisabledSettings.bind(this),findUserDirectorySettings:this.findUserDirectorySettings.bind(this),hasSettingsChanges:this.hasSettingsChanges.bind(this),isProcessing:this.isProcessing.bind(this),isSubmitted:this.isSubmitted.bind(this),setSubmitted:this.setSubmitted.bind(this),setProcessing:this.setProcessing.bind(this),simulateUsers:this.simulateUsers.bind(this),synchronizeUsers:this.synchronizeUsers.bind(this),save:this.save.bind(this),delete:this.delete.bind(this),test:this.test.bind(this),getErrors:this.getErrors.bind(this),setError:this.setError.bind(this),setErrors:this.setErrors.bind(this),getUsers:this.getUsers.bind(this),requestSynchronization:this.requestSynchronization.bind(this),mustOpenSynchronizePopUp:this.mustOpenSynchronizePopUp.bind(this),clearContext:this.clearContext.bind(this)}}initErrors(){return{hostError:null,portError:null,domainError:null}}async findUserDirectorySettings(){this.setProcessing(!0);let userDirectorySettings=[];try{userDirectorySettings=await this.userDirectoryService.findAll()}catch(e){this.handleError(e)}const users=await this.userService.findAll(),userLogged=users.find((user=>this.props.context.loggedInUser.id===user.id)),currentSettings=new userDirectory_UserDirectoryModel(userDirectorySettings,userLogged.id);this.setState({users:this.sortUsers(users),currentSettings,settings:Object.assign({},currentSettings),processing:!1})}sortUsers(users){const getUserFullName=user=>`${user.profile.first_name} ${user.profile.last_name}`;return users.sort(((u1,u2)=>getUserFullName(u1).localeCompare(getUserFullName(u2))))}getCurrentSettings(){return this.state.currentSettings}getSettings(){return this.state.settings}requestSynchronization(result){this.setState({mustSynchronize:result})}mustOpenSynchronizePopUp(){return this.state.mustSynchronize}setSettings(key,value){const newSettings=Object.assign({},this.state.settings,{[key]:value});this.isAdFieldsMappingUserUsernameResetNeeded(key,value)&&(newSettings.fieldsMapping.ad.user.username=userDirectory_UserDirectoryModel.DEFAULT_AD_FIELDS_MAPPING_USER_USERNAME_VALUE,this.setError("fieldsMappingAdUserUsernameError",null),this.setError("fieldsMappingAdUserUsernameFallbackeError",null)),this.isOpenLdapFieldsMappingGroupUsersResetNeeded(key,value)&&(newSettings.fieldsMapping.openldap.group.users=userDirectory_UserDirectoryModel.DEFAULT_OPENLDAP_FIELDS_MAPPING_GROUP_USERS_VALUE,this.setError("fieldsMappingOpenLdapGroupUsersError",null)),this.setState({settings:newSettings})}isAdFieldsMappingUserUsernameResetNeeded(key,value){return"directoryType"===key&&"openldap"===value}isOpenLdapFieldsMappingGroupUsersResetNeeded(key,value){return"directoryType"===key&&"ad"===value}setAdUserFieldsMappingSettings(key,value){const newSettings=Object.assign({},this.state.settings);newSettings.fieldsMapping.ad.user[key]=value,this.setState({settings:newSettings})}setOpenLdapGroupFieldsMappingSettings(key,value){const newSettings=Object.assign({},this.state.settings);newSettings.fieldsMapping.openldap.group[key]=value,this.setState({settings:newSettings})}setAdFallbackFieldsSettings(key,value){const newSettings=Object.assign({},this.state.settings);newSettings.fallbackFields.ad[key]=value,this.setState({settings:newSettings})}hadDisabledSettings(){const settings=this.getCurrentSettings();return Boolean(settings?.port)&&Boolean(settings?.host)&&!settings?.userDirectoryToggle}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}hasSettingsChanges(){return JSON.stringify(this.state.currentSettings)!==JSON.stringify(this.state.settings)}isSubmitted(){return this.state.submitted}setSubmitted(submitted){this.setState({submitted})}clearContext(){const{currentSettings,settings,processing}=this.defaultState;this.setState({currentSettings,settings,processing})}async save(){this.setProcessing(!0);const newSettings=new userDirectory_UserDirectoryDTO(this.state.settings);await this.userDirectoryService.update(newSettings),await this.findUserDirectorySettings()}async delete(){this.setProcessing(!0),await this.userDirectoryService.delete(),await this.findUserDirectorySettings()}async test(){this.setProcessing(!0);const newSettings=new userDirectory_UserDirectoryDTO(this.state.settings),result=await this.userDirectoryService.test(newSettings);return this.setProcessing(!1),result}async simulateUsers(){return this.userDirectoryService.simulate()}async synchronizeUsers(){return this.userDirectoryService.synchronize()}getErrors(){return this.state.errors}setError(key,value){const errors=Object.assign({},this.state.errors,{[key]:value});this.setState({errors})}getUsers(){return this.state.users}setErrors(newErrors,callback=()=>{}){const errors=Object.assign({},this.state.errors,newErrors);return this.setState({errors},callback)}handleError(error){const errorDialogProps={error};this.props.dialogContext.open(NotifyError.A,errorDialogProps)}render(){return react.createElement(AdminUserDirectoryContext.Provider,{value:this.state},this.props.children)}}AdminUserDirectoryContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any,dialogContext:prop_types_default().object};const AdministrationUserDirectoryContext=(0,AppContext.L)((0,DialogContext.z9)(AdminUserDirectoryContextProvider));function withAdminUserDirectory(WrappedComponent){return class WithAdminUserDirectory extends react.Component{render(){return react.createElement(AdminUserDirectoryContext.Consumer,null,(adminUserDirectoryContext=>react.createElement(WrappedComponent,{adminUserDirectoryContext,...this.props})))}}}AdminUserDirectoryContextProvider.__docgenInfo={description:"The Administration user directory context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"initErrors",docblock:"init the errors object\n@return {Promise<void>}",modifiers:[],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"init the errors object"},{name:"findUserDirectorySettings",docblock:"Find the User directory settings\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the User directory settings"},{name:"sortUsers",docblock:"sort users\n@param {Array<User>} users\n@return {Promise<void>}",modifiers:[],params:[{name:"users",type:{name:"Array",elements:[{name:"User"}]},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"sort users"},{name:"getCurrentSettings",docblock:"Returns the setting actually saved inside DB\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the setting actually saved inside DB"},{name:"getSettings",docblock:"Returns the User directory settings that have been fetch previously.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the User directory settings that have been fetch previously."},{name:"requestSynchronization",docblock:"Request to open the synchronization popup\n@returns {object}",modifiers:[],params:[{name:"result",optional:!1}],returns:{type:{name:"object"}},description:"Request to open the synchronization popup"},{name:"mustOpenSynchronizePopUp",docblock:"Return the mustSynchronize value\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Return the mustSynchronize value"},{name:"setSettings",docblock:"Handle settings changes.\n@param {string} key the field to change\n@param {string} value the value to change the field with\n@returns {void}",modifiers:[],params:[{name:"key",description:"the field to change",type:{name:"string"},optional:!1},{name:"value",description:"the value to change the field with",type:{name:"string"},optional:!1}],returns:{type:{name:"void"}},description:"Handle settings changes."},{name:"isAdFieldsMappingUserUsernameResetNeeded",docblock:"Returns true if the user username under AD's field mapping needs to be resetted.\n@param {string} key the field name that changed\n@param {string} value the value of the field that changed\n@returns {boolean}",modifiers:[],params:[{name:"key",description:"the field name that changed",type:{name:"string"},optional:!1},{name:"value",description:"the value of the field that changed",type:{name:"string"},optional:!1}],returns:{type:{name:"boolean"}},description:"Returns true if the user username under AD's field mapping needs to be resetted."},{name:"isOpenLdapFieldsMappingGroupUsersResetNeeded",docblock:"Returns true if the gropu users openldap's field mapping needs to be resetted.\n@param {string} key the field name that changed\n@param {string} value the value of the field that changed\n@returns {boolean}",modifiers:[],params:[{name:"key",description:"the field name that changed",type:{name:"string"},optional:!1},{name:"value",description:"the value of the field that changed",type:{name:"string"},optional:!1}],returns:{type:{name:"boolean"}},description:"Returns true if the gropu users openldap's field mapping needs to be resetted."},{name:"setAdUserFieldsMappingSettings",docblock:"Handles active directory's user field mapping settings changes.\n@param {string} key the field to change\n@param {string} value the value to change the field with\n@returns {void}",modifiers:[],params:[{name:"key",description:"the field to change",type:{name:"string"},optional:!1},{name:"value",description:"the value to change the field with",type:{name:"string"},optional:!1}],returns:{type:{name:"void"}},description:"Handles active directory's user field mapping settings changes."},{name:"setOpenLdapGroupFieldsMappingSettings",docblock:"Handles open ldap's group field mapping settings changes.\n@param {string} key the field to change\n@param {string} value the value to change the field with\n@returns {void}",modifiers:[],params:[{name:"key",description:"the field to change",type:{name:"string"},optional:!1},{name:"value",description:"the value to change the field with",type:{name:"string"},optional:!1}],returns:{type:{name:"void"}},description:"Handles open ldap's group field mapping settings changes."},{name:"setAdFallbackFieldsSettings",docblock:"Handles open ldap's group field mapping settings changes.\n@param {string} key the field to change\n@param {string} value the value to change the field with\n@returns {void}",modifiers:[],params:[{name:"key",description:"the field to change",type:{name:"string"},optional:!1},{name:"value",description:"the value to change the field with",type:{name:"string"},optional:!1}],returns:{type:{name:"void"}},description:"Handles open ldap's group field mapping settings changes."},{name:"hadDisabledSettings",docblock:"returns true if the config is present even if disabled\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"returns true if the config is present even if disabled"},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"hasSettingsChanges",docblock:"Check if there are changes to apply\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"Check if there are changes to apply"},{name:"isSubmitted",docblock:"return true if the form has been submitted\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"return true if the form has been submitted"},{name:"setSubmitted",docblock:"rchange value for submitted\n@returns {Boolean}",modifiers:[],params:[{name:"submitted",optional:!1}],returns:{type:{name:"Boolean"}},description:"rchange value for submitted"},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."},{name:"save",docblock:"Whenever the save has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the save has been requested"},{name:"delete",docblock:"Whenever the delete has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the delete has been requested"},{name:"test",docblock:"Whenever the test has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the test has been requested"},{name:"simulateUsers",docblock:"Whenever the simulate users has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the simulate users has been requested"},{name:"synchronizeUsers",docblock:"Whenever the synchronize users has been requested",modifiers:["async"],params:[],returns:null,description:"Whenever the synchronize users has been requested"},{name:"getErrors",docblock:"return the errors object",modifiers:[],params:[],returns:null,description:"return the errors object"},{name:"setError",docblock:"set an error to object",modifiers:[],params:[{name:"key",optional:!1},{name:"value",optional:!1}],returns:null,description:"set an error to object"},{name:"getUsers",docblock:"return the users object",modifiers:[],params:[],returns:null,description:"return the users object"},{name:"setErrors",docblock:"set errors to object",modifiers:[],params:[{name:"newErrors",optional:!1},{name:"callback",optional:!0}],returns:null,description:"set errors to object"},{name:"handleError",docblock:"handle error to display the error dialog\n@param error",modifiers:[],params:[{name:"error",optional:!1}],returns:null,description:"handle error to display the error dialog"}],displayName:"AdminUserDirectoryContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},dialogContext:{description:"",type:{name:"object"},required:!1}}}}}]);