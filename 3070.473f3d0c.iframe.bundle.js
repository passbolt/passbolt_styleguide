/*! For license information please see 3070.473f3d0c.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[3070],{"./src/react-extension/components/Administration/DisplayPasswordPoliciesAdministration/DisplayPasswordPoliciesAdministration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>DisplayPasswordPoliciesAdministration_DisplayPasswordPoliciesAdministration});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),AdministrationPasswordPoliciesContext=__webpack_require__("./src/react-extension/contexts/Administration/AdministrationPasswordPoliciesContext/AdministrationPasswordPoliciesContext.js");class DisplayAdministrationPasswordPoliciesActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleSave=this.handleSave.bind(this)}get isActionEnabled(){return!this.props.adminPasswordPoliciesContext.isProcessing()}async handleSave(){if(this.isActionEnabled&&this.props.adminPasswordPoliciesContext.validateData())try{await this.props.adminPasswordPoliciesContext.save(),await this.handleSaveSuccess()}catch(error){await this.handleSaveError(error)}}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The password policy settings were updated."))}async handleSaveError(error){console.error(error),await this.props.actionFeedbackContext.displayError(error.message)}render(){const isDisabled=!this.isActionEnabled;return react.createElement("div",{className:"actions-wrapper"},react.createElement("button",{type:"button",className:"button primary form",disabled:isDisabled,id:"save-settings",onClick:this.handleSave},react.createElement("span",null,react.createElement(es.x6,null,"Save"))))}}DisplayAdministrationPasswordPoliciesActions.propTypes={adminPasswordPoliciesContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationPasswordPoliciesActions_DisplayAdministrationPasswordPoliciesActions=(0,AdministrationPasswordPoliciesContext.NF)((0,ActionFeedbackContext.ot)((0,es.CI)("common")(DisplayAdministrationPasswordPoliciesActions)));DisplayAdministrationPasswordPoliciesActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"isActionEnabled",docblock:"Is save button enable\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Is save button enable"},{name:"handleSave",docblock:"Handle the save action.\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle the save action."},{name:"handleSaveSuccess",docblock:"Handle save operation success.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation error."}],displayName:"DisplayAdministrationPasswordPoliciesActions",props:{adminPasswordPoliciesContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};var Select=__webpack_require__("./src/react-extension/components/Common/Select/Select.js"),PasswordComplexity=__webpack_require__("./src/shared/components/PasswordComplexity/PasswordComplexity.js"),portals=__webpack_require__("./src/shared/utils/portals.js"),buoy=__webpack_require__("./src/img/svg/buoy.svg"),caret_down=__webpack_require__("./src/img/svg/caret_down.svg"),caret_right=__webpack_require__("./src/img/svg/caret_right.svg");class DisplayPasswordPoliciesAdministration extends react.Component{constructor(props){super(props),this.state={showPasswordSection:!1,showPassphraseSection:!1},this.bindCallbacks()}async componentDidMount(){await this.props.adminPasswordPoliciesContext.findSettings()}componentWillUnmount(){this.props.adminPasswordPoliciesContext.clearContext()}bindCallbacks(){this.handleCheckboxInputChange=this.handleCheckboxInputChange.bind(this),this.handleMaskToggled=this.handleMaskToggled.bind(this),this.handlePasswordSectionToggle=this.handlePasswordSectionToggle.bind(this),this.handlePassphraseSectionToggle=this.handlePassphraseSectionToggle.bind(this),this.handleInputChange=this.handleInputChange.bind(this),this.handleSliderInputChange=this.handleSliderInputChange.bind(this),this.handleLengthChange=this.handleLengthChange.bind(this)}handlePasswordSectionToggle(){this.setState({showPasswordSection:!this.state.showPasswordSection})}handlePassphraseSectionToggle(){this.setState({showPassphraseSection:!this.state.showPassphraseSection})}get wordCaseList(){return[{value:"lowercase",label:this.props.t("Lower case")},{value:"uppercase",label:this.props.t("Upper case")},{value:"camelcase",label:this.props.t("Camel case")}]}get providerList(){return[{value:"password",label:this.props.t("Password")},{value:"passphrase",label:this.props.t("Passphrase")}]}handleCheckboxInputChange(event){const name=event.target.name;this.props.adminPasswordPoliciesContext.setSettings(name,event.target.checked)}handleSliderInputChange(event){const value=parseInt(event.target.value,10),name=event.target.name;this.props.adminPasswordPoliciesContext.setSettings(name,value)}handleInputChange(event){const target=event.target,value=target.value,name=target.name;this.props.adminPasswordPoliciesContext.setSettings(name,value)}handleLengthChange(event){const target=event.target,value=parseInt(target.value,10),name=target.name;this.props.adminPasswordPoliciesContext.setSettings(name,value)}handleMaskToggled(name){const value=!this.props.adminPasswordPoliciesContext.getSettings()[name];this.props.adminPasswordPoliciesContext.setSettings(name,value)}hasAllInputDisabled(){return this.props.adminPasswordPoliciesContext.isProcessing()}get settingsSource(){return this.props.adminPasswordPoliciesContext?.getSettings()?.source}get configurationSource(){return{legacyEnv:this.props.t("environment variables (legacy)"),env:this.props.t("environment variables"),legacyFile:this.props.t("file (legacy)"),file:this.props.t("file"),db:this.props.t("database"),default:this.props.t("default configuration")}[this.settingsSource]||this.props.t("unknown")}render(){const adminContext=this.props.adminPasswordPoliciesContext,settings=adminContext.getSettings(),errors=adminContext.getSettingsErrors(),minimalAdvisedEntropy=adminContext.getMinimalAdvisedEntropy(),passwordEntropy=adminContext.getEntropyForPasswordConfiguration(),passphraseEntropy=adminContext.getEntropyForPassphraseConfiguration(),masks=adminContext.getPasswordGeneratorMasks(),isPasswordEntropyTooLow=passwordEntropy<minimalAdvisedEntropy,isPassphraseEntropyTooLow=passphraseEntropy<minimalAdvisedEntropy,hasWarnings=adminContext.isSourceChanging()||adminContext.hasSettingsChanges()||isPasswordEntropyTooLow||isPassphraseEntropyTooLow;return react.createElement("div",{className:"row"},react.createElement("div",{className:"password-policies-settings main-column"},react.createElement("div",{className:"main-content"},react.createElement("h3",{className:"title",id:"password-policies-settings-title"},react.createElement(es.x6,null,"Password Policy")),react.createElement("form",{className:"form"},react.createElement("h4",null,react.createElement(es.x6,null,"Password generator default settings")),react.createElement("p",null,react.createElement(es.x6,null,"You can modify the default settings of the passwords generator."),react.createElement(es.x6,null,"Note that this will not prevent a user from customizing the settings while generating a password.")),react.createElement("label",null,react.createElement(es.x6,null,"Default password type")),react.createElement("div",{className:"singleline"},react.createElement("span",null,react.createElement(es.x6,null,"The default type is"),"Â "),react.createElement(Select.A,{id:"configure-passphrase-default-generator",name:"provider",className:"inline",items:this.providerList,value:settings.provider,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled()})),react.createElement("div",{className:"accordion-header"},react.createElement("button",{id:"accordion-toggle-password",className:"link no-border",type:"button",onClick:this.handlePasswordSectionToggle},this.state.showPasswordSection?react.createElement(caret_down.A,{className:"caret-down"}):react.createElement(caret_right.A,{className:"caret-right"}),react.createElement(es.x6,null,"Passwords settings"))),this.state.showPasswordSection&&react.createElement("div",{className:"passwords-settings"},react.createElement("div",{className:"estimated-entropy input"},react.createElement("label",null,react.createElement(es.x6,null,"Estimated entropy")),react.createElement(PasswordComplexity.A,{entropy:passwordEntropy}),errors.passwordMinimalRequiredEntropy&&react.createElement("div",{className:"error-message"},errors.passwordMinimalRequiredEntropy)),react.createElement("div",{className:"input text "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",{htmlFor:"configure-password-generator-form-length"},react.createElement(es.x6,null,"Length")),react.createElement("div",{className:"slider"},react.createElement("input",{name:"passwordLength",min:"8",max:"128",value:settings.passwordLength,step:"1",type:"range",onChange:this.handleSliderInputChange,disabled:this.hasAllInputDisabled()}),react.createElement("input",{id:"configure-password-generator-form-length",type:"number",name:"passwordLength",min:"8",max:"128",value:settings.passwordLength,onChange:this.handleLengthChange,disabled:this.hasAllInputDisabled()})),errors.passwordLength&&react.createElement("div",{id:"passwordLength-error",className:"error-message"},errors.passwordLength)),react.createElement("p",null,react.createElement(es.x6,null,"You can set the default length for the passwords that are generated randomly by passbolt in the password generator.")),react.createElement("div",{className:"input text "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",{htmlFor:"configure-password-generator-form-masks"},react.createElement(es.x6,null,"Selected set of characters")),react.createElement("div",{className:"button-group button-group--nowrap"},Object.entries(masks).map((([maskName,mask])=>react.createElement("button",{type:"button",key:maskName,className:"button button-toggle "+(settings[maskName]?"selected":""),onClick:()=>this.handleMaskToggled(maskName),disabled:this.hasAllInputDisabled()},mask.label)))),errors.masks&&react.createElement("div",{id:"password-mask-error",className:"error-message"},errors.masks),react.createElement("div",{className:"input checkbox"},react.createElement("input",{id:"configure-password-generator-form-exclude-look-alike",type:"checkbox",name:"excludeLookAlikeCharacters",checked:settings.excludeLookAlikeCharacters,onChange:this.handleCheckboxInputChange,disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"configure-password-generator-form-exclude-look-alike"},react.createElement(es.x6,null,"Exclude look-alike characters"))),react.createElement("p",null,react.createElement(es.x6,null,"You can select the set of characters used for the passwords that are generated randomly by passbolt in the password generator.")))),react.createElement("div",{className:"accordion-header"},react.createElement("button",{id:"accordion-toggle-passphrase",className:"link no-border",type:"button",onClick:this.handlePassphraseSectionToggle},this.state.showPassphraseSection?react.createElement(caret_down.A,{className:"caret-down"}):react.createElement(caret_right.A,{className:"caret-right"}),react.createElement(es.x6,null,"Passphrase settings"))),this.state.showPassphraseSection&&react.createElement("div",{className:"passphrase-settings"},react.createElement("div",{className:"estimated-entropy input"},react.createElement("label",null,react.createElement(es.x6,null,"Estimated entropy")),react.createElement(PasswordComplexity.A,{entropy:passphraseEntropy}),errors.passphraseMinimalRequiredEntropy&&react.createElement("div",{className:"error-message"},errors.passphraseMinimalRequiredEntropy)),react.createElement("div",{className:"input text "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",{htmlFor:"configure-passphrase-generator-form-word-count"},react.createElement(es.x6,null,"Number of words")),react.createElement("div",{className:"slider"},react.createElement("input",{name:"wordsCount",min:"4",max:"40",value:settings.wordsCount,type:"range",onChange:this.handleSliderInputChange,disabled:this.hasAllInputDisabled()}),react.createElement("input",{type:"number",id:"configure-passphrase-generator-form-word-count",name:"wordsCount",min:"4",max:"40",value:settings.wordsCount,onChange:this.handleLengthChange,disabled:this.hasAllInputDisabled()})),errors.wordsCount&&react.createElement("div",{id:"wordsCount-error",className:"error-message"},errors.wordsCount)),react.createElement("p",null,react.createElement(es.x6,null,"You can set the default length for the passphrases that are generated randomly by passbolt in the password generator.")),react.createElement("div",{className:"input text "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",{htmlFor:"configure-passphrase-generator-form-words-separator"},react.createElement(es.x6,null,"Words separator")),react.createElement("input",{type:"text",id:"configure-passphrase-generator-form-words-separator",name:"wordsSeparator",value:settings.wordsSeparator,onChange:this.handleInputChange,placeholder:this.props.t("Type one or more characters"),disabled:this.hasAllInputDisabled()}),errors.wordsSeparator&&react.createElement("div",{className:"error-message"},errors.wordsSeparator)),react.createElement("div",{className:"select-wrapper input "+(this.hasAllInputDisabled()?"disabled":"")},react.createElement("label",{htmlFor:"configure-passphrase-generator-form-words-case"},react.createElement(es.x6,null,"Words case")),react.createElement(Select.A,{id:"configure-passphrase-generator-form-words-case",name:"wordCase",items:this.wordCaseList,value:settings.wordCase,onChange:this.handleInputChange,disabled:this.hasAllInputDisabled()}))),react.createElement("h4",{id:"password-policies-external-services-subtitle"},react.createElement("span",{className:"input toggle-switch form-element ready"},react.createElement("input",{id:"passphrase-policy-external-services-toggle-button",type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"policyPassphraseExternalServices",onChange:this.handleCheckboxInputChange,checked:settings?.policyPassphraseExternalServices,disabled:this.hasAllInputDisabled()}),react.createElement("label",{htmlFor:"passphrase-policy-external-services-toggle-button"},react.createElement(es.x6,null,"External services")))),react.createElement("span",{className:"input toggle-switch form-element"},react.createElement(es.x6,null,"Allow passbolt to access external services to check if a password has been compromised.")))),hasWarnings&&react.createElement("div",{className:"warning message"},adminContext.isSourceChanging()&&react.createElement("div",{id:"password-policies-setting-source-changing-banner"},react.createElement("p",null,react.createElement(es.x6,null,"The current configuration comes from a file or environment variables. If you save them, they will be overwritten and come from the database instead."))),adminContext.hasSettingsChanges()&&react.createElement("div",{id:"password-policies-setting-banner"},react.createElement("p",null,react.createElement(es.x6,null,"Don't forget to save your settings to apply your modification."))),isPasswordEntropyTooLow&&react.createElement("div",{id:"minimal-password-entropy-advised-banner"},react.createElement("p",null,react.createElement(es.x6,null,"The current password configuration generates passwords that are not strong enough."),react.createElement("br",null),react.createElement(es.x6,null,"Passbolt recommends a minimum of ",{minimalAdvisedEntropy}," bits to be safe."))),isPassphraseEntropyTooLow&&react.createElement("div",{id:"minimal-passphrase-entropy-advised-banner"},react.createElement("p",null,react.createElement(es.x6,null,"The current passphrase configuration generates passphrases that are not strong enough."),react.createElement("br",null),react.createElement(es.x6,null,"Passbolt recommends a minimum of ",{minimalAdvisedEntropy}," bits to be safe."))))),react.createElement(DisplayAdministrationPasswordPoliciesActions_DisplayAdministrationPasswordPoliciesActions,null),(0,portals.m)(react.createElement(react.Fragment,null,react.createElement("div",{className:"sidebar-help-section",id:"password-policies-source"},react.createElement("h3",null,react.createElement(es.x6,null,"Configuration source")),react.createElement("p",null,react.createElement(es.x6,null,"This current configuration source is: "),this.configurationSource,".")),react.createElement("div",{className:"sidebar-help-section"},react.createElement("h3",null,react.createElement(es.x6,null,"What is password policy?")),react.createElement("p",null,react.createElement(es.x6,null,"For more information about the password policy settings, checkout the dedicated page on the help website.")),react.createElement("a",{className:"button",href:"https://passbolt.com/docs/admin/password-configuration/password-policy/",target:"_blank",rel:"noopener noreferrer"},react.createElement(buoy.A,null),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))),document.getElementById("administration-help-panel")))}}DisplayPasswordPoliciesAdministration.propTypes={context:prop_types_default().object,administrationWorkspaceContext:prop_types_default().object,adminPasswordPoliciesContext:prop_types_default().object,t:prop_types_default().func};const DisplayPasswordPoliciesAdministration_DisplayPasswordPoliciesAdministration=(0,AppContext.L)((0,AdministrationWorkspaceContext.Kk)((0,AdministrationPasswordPoliciesContext.NF)((0,es.CI)("common")(DisplayPasswordPoliciesAdministration))));DisplayPasswordPoliciesAdministration.__docgenInfo={description:"",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handlePasswordSectionToggle",docblock:"Handle change visibility of password configuration block",modifiers:[],params:[],returns:null,description:"Handle change visibility of password configuration block"},{name:"handlePassphraseSectionToggle",docblock:"Handle change visibility of passphrase configuration block",modifiers:[],params:[],returns:null,description:"Handle change visibility of passphrase configuration block"},{name:"wordCaseList",docblock:"Get word case list\n@returns {Array<{label: string, value: string}>}",modifiers:["get"],params:[],returns:{type:{name:"Array",elements:[]}},description:"Get word case list"},{name:"providerList",docblock:"Get word case list\n@returns {Array<{label: string, value: string}>}",modifiers:["get"],params:[],returns:{type:{name:"Array",elements:[]}},description:"Get word case list"},{name:"handleCheckboxInputChange",docblock:"Handle external services checkbox input change.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle external services checkbox input change."},{name:"handleSliderInputChange",docblock:"Handle external services checkbox input change.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle external services checkbox input change."},{name:"handleInputChange",docblock:"Handle change of generic form input.\n@param {object} event",modifiers:[],params:[{name:"event",type:{name:"object"},optional:!1}],returns:null,description:"Handle change of generic form input."},{name:"handleLengthChange",docblock:"Handle change of generic form input.\n@param {object} event",modifiers:[],params:[{name:"event",type:{name:"object"},optional:!1}],returns:null,description:"Handle change of generic form input."},{name:"handleMaskToggled",docblock:"Handle toggle of a password mask.\n@param {string} name name of the mask",modifiers:[],params:[{name:"name",description:"name of the mask",type:{name:"string"},optional:!1}],returns:null,description:"Handle toggle of a password mask."},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"},{name:"settingsSource",docblock:"Returns the source of the current settings\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current settings"},{name:"configurationSource",docblock:"Returns the source of the current configuration\n@returns {string}",modifiers:["get"],params:[],returns:{type:{name:"string"}},description:"Returns the source of the current configuration"}],displayName:"DisplayPasswordPoliciesAdministration",props:{context:{description:"",type:{name:"object"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},adminPasswordPoliciesContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}}},"./src/react-extension/contexts/Administration/AdministrationPasswordPoliciesContext/AdministrationPasswordPoliciesContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$I:()=>AdminPasswordPoliciesContextProvider,Ay:()=>AdministrationPasswordPoliciesContext,NF:()=>withAdminPasswordPolicies});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const passwordPolicies_PasswordPoliciesDto=class PasswordPoliciesDto{constructor(settings={}){this.default_generator=settings.provider,this.external_dictionary_check=settings.policyPassphraseExternalServices,this.password_generator_settings={length:settings.passwordLength,mask_upper:settings.mask_upper,mask_lower:settings.mask_lower,mask_digit:settings.mask_digit,mask_parenthesis:settings.mask_parenthesis,mask_char1:settings.mask_char1,mask_char2:settings.mask_char2,mask_char3:settings.mask_char3,mask_char4:settings.mask_char4,mask_char5:settings.mask_char5,mask_emoji:settings.mask_emoji,exclude_look_alike_chars:settings.excludeLookAlikeCharacters},this.passphrase_generator_settings={words:settings.wordsCount,word_separator:settings.wordsSeparator,word_case:settings.wordCase},this.source=settings.source}};const passwordPolicies_PasswordPoliciesViewModel=class PasswordPoliciesViewModel{constructor(settings={}){this.provider="passphrase"===settings?.default_generator?"passphrase":"password",this.policyPassphraseExternalServices=Boolean(settings?.external_dictionary_check),this.source=settings?.source??"default";const passwordSettings=settings?.password_generator_settings;this.passwordLength=passwordSettings?.length??18,this.mask_upper=passwordSettings?.mask_upper??!1,this.mask_lower=passwordSettings?.mask_lower??!1,this.mask_digit=passwordSettings?.mask_digit??!1,this.mask_parenthesis=passwordSettings?.mask_parenthesis??!1,this.mask_char1=passwordSettings?.mask_char1??!1,this.mask_char2=passwordSettings?.mask_char2??!1,this.mask_char3=passwordSettings?.mask_char3??!1,this.mask_char4=passwordSettings?.mask_char4??!1,this.mask_char5=passwordSettings?.mask_char5??!1,this.mask_emoji=passwordSettings?.mask_emoji??!1,this.excludeLookAlikeCharacters=passwordSettings?.exclude_look_alike_chars??!1;const passphraseSettings=settings?.passphrase_generator_settings;this.wordsCount=passphraseSettings?.words??9,this.wordsSeparator=passphraseSettings?.word_separator??" ",this.wordCase=passphraseSettings?.word_case??"lowercase"}};var es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),SecretGeneratorComplexity=__webpack_require__("./src/shared/lib/SecretGenerator/SecretGeneratorComplexity.js");const AdminPasswordPoliciesContext=react.createContext({getSettings:()=>{},getSettingsErrors:()=>{},setSettings:()=>{},hasSettingsChanges:()=>{},findSettings:()=>{},setProcessing:()=>{},isProcessing:()=>{},isDataValid:()=>{},clearContext:()=>{},save:()=>{},validateData:()=>{},getPasswordGeneratorMasks:()=>{},getEntropyForPassphraseConfiguration:()=>{},getEntropyForPasswordConfiguration:()=>{},getMinimalRequiredEntropy:()=>{},getMinimalAdvisedEntropy:()=>{},isSourceChanging:()=>{}});class AdminPasswordPoliciesContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.hasDataBeenValidated=!1}get defaultState(){return{settings:new passwordPolicies_PasswordPoliciesViewModel,errors:{},currentSettings:new passwordPolicies_PasswordPoliciesViewModel,processing:!0,getSettings:this.getSettings.bind(this),getSettingsErrors:this.getSettingsErrors.bind(this),setSettings:this.setSettings.bind(this),findSettings:this.findSettings.bind(this),hasSettingsChanges:this.hasSettingsChanges.bind(this),isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),clearContext:this.clearContext.bind(this),save:this.save.bind(this),validateData:this.validateData.bind(this),getPasswordGeneratorMasks:this.getPasswordGeneratorMasks.bind(this),getEntropyForPassphraseConfiguration:this.getEntropyForPassphraseConfiguration.bind(this),getEntropyForPasswordConfiguration:this.getEntropyForPasswordConfiguration.bind(this),getMinimalRequiredEntropy:this.getMinimalRequiredEntropy.bind(this),getMinimalAdvisedEntropy:this.getMinimalAdvisedEntropy.bind(this),isSourceChanging:this.isSourceChanging.bind(this)}}async findSettings(callback=()=>{}){this.setProcessing(!0);const result=await this.props.context.port.request("passbolt.password-policies.get-admin-settings"),currentSettings=new passwordPolicies_PasswordPoliciesViewModel(result);this.setState({currentSettings,settings:currentSettings},callback),this.setProcessing(!1)}validateData(){this.hasDataBeenValidated=!0;let isValid=!0;const errors={},settings=this.state.settings;settings.mask_upper||settings.mask_lower||settings.mask_digit||settings.mask_parenthesis||settings.mask_char1||settings.mask_char2||settings.mask_char3||settings.mask_char4||settings.mask_char5||settings.mask_emoji||(isValid=!1,errors.masks=this.props.t("At least 1 set of characters must be selected")),settings.passwordLength<8&&(isValid=!1,errors.passwordLength=this.props.t("The password length must be set to 8 at least")),settings.wordsCount<4&&(isValid=!1,errors.wordsCount=this.props.t("The passphrase word count must be set to 4 at least")),settings.wordsSeparator.length>10&&(isValid=!1,errors.wordsSeparator=this.props.t("The words separator should be at a maximum of 10 characters long"));const minimalEntropyRequired=this.getMinimalRequiredEntropy();return this.getEntropyForPassphraseConfiguration()<minimalEntropyRequired&&(isValid=!1,errors.passphraseMinimalRequiredEntropy=this.props.t("The passphrase generator will not generate strong enough passphrase. Minimum of {{minimum}}bits is required",{minimum:minimalEntropyRequired})),this.getEntropyForPasswordConfiguration()<minimalEntropyRequired&&(isValid=!1,errors.passwordMinimalRequiredEntropy=this.props.t("The password generator will not generate strong enough password. Minimum of {{minimum}}bits is required",{minimum:minimalEntropyRequired})),this.setState({errors}),isValid}getEntropyForPassphraseConfiguration(){const settings=this.getSettings();return SecretGeneratorComplexity.CH.entropyPassphrase(settings.wordsCount,settings.wordsSeparator)}getEntropyForPasswordConfiguration(){const passwordGeneratorSettings=new passwordPolicies_PasswordPoliciesDto(this.getSettings()).password_generator_settings;return SecretGeneratorComplexity.CH.evaluateMaxPasswordEntropy(passwordGeneratorSettings)}getPasswordGeneratorMasks(){return SecretGeneratorComplexity.MU}getMinimalRequiredEntropy(){return 80}getMinimalAdvisedEntropy(){return 112}async save(){this.setProcessing(!0);try{const newSettings=new passwordPolicies_PasswordPoliciesDto(this.state.settings),result=await this.props.context.port.request("passbolt.password-policies.save",newSettings),currentSettings=new passwordPolicies_PasswordPoliciesViewModel(result);this.setState({currentSettings,settings:currentSettings})}finally{this.setProcessing(!1)}}getSettings(){return this.state.settings}getSettingsErrors(){return this.state.errors}setSettings(key,value){const newSettings=Object.assign({},this.state.settings,{[key]:value});this.setState({settings:newSettings},(()=>{this.hasDataBeenValidated&&this.validateData()}))}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}hasSettingsChanges(){return JSON.stringify(this.state.currentSettings)!==JSON.stringify(this.state.settings)}isSourceChanging(){return"db"!==this.state.currentSettings?.source&&"default"!==this.state.currentSettings?.source}clearContext(){const{currentSettings,settings,processing}=this.defaultState;this.setState({currentSettings,settings,processing})}render(){return react.createElement(AdminPasswordPoliciesContext.Provider,{value:this.state},this.props.children)}}AdminPasswordPoliciesContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any,t:prop_types_default().any,actionFeedbackContext:prop_types_default().object};const AdministrationPasswordPoliciesContext=(0,AppContext.L)((0,es.CI)("common")(AdminPasswordPoliciesContextProvider));function withAdminPasswordPolicies(WrappedComponent){return class WithAdminPasswordPolicies extends react.Component{render(){return react.createElement(AdminPasswordPoliciesContext.Consumer,null,(adminPasswordPoliciesContext=>react.createElement(WrappedComponent,{adminPasswordPoliciesContext,...this.props})))}}}AdminPasswordPoliciesContextProvider.__docgenInfo={description:"The Administration password policies context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findSettings",docblock:"Find the self registration settings\n@return {Promise<void>}",modifiers:["async"],params:[{name:"callback",optional:!0}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the self registration settings"},{name:"validateData",docblock:"Returns true if the password policies data is valid.\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the password policies data is valid."},{name:"getEntropyForPassphraseConfiguration",docblock:"Returns the maximum entropy a secret can be with the current passphrase default configuration.\n@returns {number}",modifiers:[],params:[],returns:{type:{name:"number"}},description:"Returns the maximum entropy a secret can be with the current passphrase default configuration."},{name:"getEntropyForPasswordConfiguration",docblock:"Returns the maximum entropy a secret can be with the current password default configuration.\n@returns {number}",modifiers:[],params:[],returns:{type:{name:"number"}},description:"Returns the maximum entropy a secret can be with the current password default configuration."},{name:"getPasswordGeneratorMasks",docblock:"Returns all the available password masks.\n@returns {Object}",modifiers:[],params:[],returns:{type:{name:"Object"}},description:"Returns all the available password masks."},{name:"getMinimalRequiredEntropy",docblock:"Returns the minimal entropy a generator must follow that Passbolt requires\n@returns {number};",modifiers:[],params:[],returns:{description:";",type:{name:"number"}},description:"Returns the minimal entropy a generator must follow that Passbolt requires"},{name:"getMinimalAdvisedEntropy",docblock:"Returns the minimal entropy advised by Passbolt to have a secredt considered strong\n@returns {number};",modifiers:[],params:[],returns:{description:";",type:{name:"number"}},description:"Returns the minimal entropy advised by Passbolt to have a secredt considered strong"},{name:"save",docblock:"Whenever the save has been requested\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Whenever the save has been requested"},{name:"getSettings",docblock:"Returns the settings that have been fetch previously.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the settings that have been fetch previously."},{name:"getSettingsErrors",docblock:"Returns the settings error from the latest data validation.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the settings error from the latest data validation."},{name:"setSettings",docblock:"Handle settings changes.\n@param {string} key the name of the changed field\n@param {*} value the new value to set\n@returns {void}",modifiers:[],params:[{name:"key",description:"the name of the changed field",type:{name:"string"},optional:!1},{name:"value",description:"the new value to set",type:{name:"mixed"},optional:!1}],returns:{type:{name:"void"}},description:"Handle settings changes."},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@param {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",description:"value",type:{name:"Boolean"},optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"hasSettingsChanges",docblock:"Check if there are changes to apply\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"Check if there are changes to apply"},{name:"isSourceChanging",docblock:"Returns true if the source of the configuration was 'env'\n@returns {Boolean}",modifiers:[],params:[],returns:{type:{name:"Boolean"}},description:"Returns true if the source of the configuration was 'env'"},{name:"clearContext",docblock:"Puts the state to its default in order to avoid keeping the data users didn't want to save.",modifiers:[],params:[],returns:null,description:"Puts the state to its default in order to avoid keeping the data users didn't want to save."}],displayName:"AdminPasswordPoliciesContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"any"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1}}}},"./src/shared/components/PasswordComplexity/PasswordComplexity.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__),react_i18next__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),_lib_SecretGenerator_SecretGeneratorComplexity__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/shared/lib/SecretGenerator/SecretGeneratorComplexity.js"),_react_extension_components_Common_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/react-extension/components/Common/Tooltip/Tooltip.js"),_img_svg_info_svg__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/img/svg/info.svg");const COLOR_GRADIENT={COLOR_1:hexToRgb("#BA2809"),COLOR_2:hexToRgb("#FFA724"),COLOR_3:hexToRgb("#0EAA00")};function hexToRgb(hex){const result=new RegExp("^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$","i").exec(hex.trim());if(result){return{red:parseInt(result[1],16),green:parseInt(result[2],16),blue:parseInt(result[3],16)}}return null}class PasswordComplexity extends react__WEBPACK_IMPORTED_MODULE_0__.Component{get entropy(){return(this.props.entropy||0).toFixed(1)}get tooltipMessage(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_1__.x6,null,"Entropy:")," ",this.entropy," bits")}get passwordStrengthLabel(){if(!(this.hasEntropy()||this.hasError()))return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_1__.x6,null,"Quality");const strength=_lib_SecretGenerator_SecretGeneratorComplexity__WEBPACK_IMPORTED_MODULE_2__.CH.strength(this.props.entropy);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,strength.label)}hasEntropy(){return null!==this.props.entropy&&void 0!==this.props.entropy}hasError(){return this.props.error}getProgresseBarStyle(){const relativePositionForEntropy=this.getRelativeEntropyPosition();return{width:`${relativePositionForEntropy}%`,backgroundColor:this.colorGradient(relativePositionForEntropy)}}colorGradient(fadeFraction){let rgbColor1,rgbColor2,fade=fadeFraction/100*2;fade>=1?(fade-=1,rgbColor1=COLOR_GRADIENT.COLOR_2,rgbColor2=COLOR_GRADIENT.COLOR_3):(rgbColor1=COLOR_GRADIENT.COLOR_1,rgbColor2=COLOR_GRADIENT.COLOR_2);return`rgb(${Math.floor(rgbColor1.red+(rgbColor2.red-rgbColor1.red)*fade)},${Math.floor(rgbColor1.green+(rgbColor2.green-rgbColor1.green)*fade)},${Math.floor(rgbColor1.blue+(rgbColor2.blue-rgbColor1.blue)*fade)})`}getRelativeEntropyPosition(){return 100-99/(1+Math.pow(this.props.entropy/90,10))}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"password-complexity"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"complexity-text"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_react_extension_components_Common_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__.A,{message:this.tooltipMessage},this.passwordStrengthLabel," ",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_img_svg_info_svg__WEBPACK_IMPORTED_MODULE_4__.A,null))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"progress"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"progress-bar background"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{className:"progress-bar foreground "+(this.hasError()?"error":""),style:this.hasEntropy()?this.getProgresseBarStyle(this.props.entropy):null})))}}PasswordComplexity.defaultProps={entropy:null},PasswordComplexity.propTypes={entropy:prop_types__WEBPACK_IMPORTED_MODULE_5___default().number,error:prop_types__WEBPACK_IMPORTED_MODULE_5___default().bool};const __WEBPACK_DEFAULT_EXPORT__=(0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.CI)("common")(PasswordComplexity);PasswordComplexity.__docgenInfo={description:"This component represents a password complexity with the strength, an entropy and a bar",methods:[{name:"entropy",docblock:"Get the entropy value formatted for display.\n@returns {number}",modifiers:["get"],params:[],returns:{type:{name:"number"}},description:"Get the entropy value formatted for display."},{name:"tooltipMessage",docblock:"Get the translated tooltip message.\n@returns {JSX}",modifiers:["get"],params:[],returns:{type:{name:"JSX"}},description:"Get the translated tooltip message."},{name:"passwordStrengthLabel",docblock:"Get the password strength label to display based on the actual entropy or error state.\n@returns {JSX};",modifiers:["get"],params:[],returns:{description:";",type:{name:"JSX"}},description:"Get the password strength label to display based on the actual entropy or error state."},{name:"hasEntropy",docblock:"Has entropy\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Has entropy"},{name:"hasError",docblock:"Has error\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Has error"},{name:"getProgresseBarStyle",docblock:"Get the dynamic part style of the entropy progression bar.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Get the dynamic part style of the entropy progression bar."},{name:"colorGradient",docblock:"Get the rgb color at a specific position in percentage\n@param {number} fadeFraction The fade fraction\n@returns {string} the color in rgb(0,0,0)",modifiers:[],params:[{name:"fadeFraction",description:"The fade fraction",type:{name:"number"},optional:!1}],returns:{description:"the color in rgb(0,0,0)",type:{name:"string"}},description:"Get the rgb color at a specific position in percentage"},{name:"getRelativeEntropyPosition",docblock:"Return a percentage value matching the position of the given entropy compared to the full value possible.\n@returns {number}",modifiers:[],params:[],returns:{type:{name:"number"}},description:"Return a percentage value matching the position of the given entropy compared to the full value possible."}],displayName:"PasswordComplexity",props:{entropy:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"number"},required:!1},error:{description:"",type:{name:"bool"},required:!1}}}}}]);