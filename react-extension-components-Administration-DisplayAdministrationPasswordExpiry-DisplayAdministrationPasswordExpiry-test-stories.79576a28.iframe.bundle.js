/*! For license information please see react-extension-components-Administration-DisplayAdministrationPasswordExpiry-DisplayAdministrationPasswordExpiry-test-stories.79576a28.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[3461],{"./src/react-extension/components/Administration/DisplayAdministrationPasswordExpiry/DisplayAdministrationPasswordExpiry.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CeVersion:()=>CeVersion,ProVersion:()=>ProVersion,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DisplayAdministrationPasswordExpiry_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),ActionFeedbackContext_test_data=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.test.data.js"),AdministrationWorkspaceContext_test_data=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.test.data.js"),ExtAppContext_test_data=__webpack_require__("./src/react-extension/contexts/ExtAppContext.test.data.js"),DialogContext_test_data=__webpack_require__("./src/react-extension/contexts/DialogContext.test.data.js");function defaultPropsPro(data={}){const defaultData={context:(0,ExtAppContext_test_data.dO)(),dialogContext:(0,DialogContext_test_data.L)(),administrationWorkspaceContext:(0,AdministrationWorkspaceContext_test_data.M)(),actionFeedbackContext:(0,ActionFeedbackContext_test_data.M)(),t:text=>text};return defaultData.context.siteSettings.canIUse=()=>!0,Object.assign(defaultData,data)}var AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),abstract_entityValidationError=__webpack_require__("./src/shared/models/entity/abstract/entityValidationError.js"),entitySchema=__webpack_require__("./src/shared/models/entity/abstract/entitySchema.js"),entity=__webpack_require__("./src/shared/models/entity/abstract/entity.js");class PasswordExpirySettingsEntity extends entity.A{constructor(PasswordExpirySettingsDto,options={}){super(entitySchema.A.validate(PasswordExpirySettingsEntity.ENTITY_NAME,PasswordExpirySettingsDto,PasswordExpirySettingsEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["automatic_expiry","automatic_update"],properties:{id:{type:"string",format:"uuid"},default_expiry_period:{type:"null"},policy_override:{type:"boolean"},automatic_expiry:{type:"boolean"},automatic_update:{type:"boolean"},created:{type:"string",format:"date-time"},created_by:{type:"string",format:"uuid"},modified:{type:"string",format:"date-time"},modified_by:{type:"string",format:"uuid"}}}}static get ENTITY_NAME(){return"PasswordExpirySettings"}static createFromDefault(data={}){const dto={default_expiry_period:null,policy_override:!1,automatic_expiry:!1,automatic_update:!1,...data};return new PasswordExpirySettingsEntity(dto)}}const passwordExpirySettingsEntity=PasswordExpirySettingsEntity;class PasswordExpiryProSettingsEntity extends entity.A{constructor(PasswordExpirySettingsDto,options={}){super(entitySchema.A.validate(PasswordExpiryProSettingsEntity.ENTITY_NAME,PasswordExpirySettingsDto,PasswordExpiryProSettingsEntity.getSchema()),options)}static getSchema(){return{type:"object",required:["automatic_expiry","automatic_update","policy_override"],properties:{id:{type:"string",format:"uuid"},default_expiry_period:{type:"integer",minimum:1,maximum:999,nullable:!0},policy_override:{type:"boolean"},automatic_expiry:{type:"boolean"},automatic_update:{type:"boolean"},created:{type:"string",format:"date-time"},created_by:{type:"string",format:"uuid"},modified:{type:"string",format:"date-time"},modified_by:{type:"string",format:"uuid"}}}}static get ENTITY_NAME(){return"passwordExpiryProSettingsEntity"}static createFromDefault(data={}){const dto={default_expiry_period:null,policy_override:!1,automatic_expiry:!0,automatic_update:!0,...data};return new PasswordExpiryProSettingsEntity(dto)}}const passwordExpiryProSettingsEntity=PasswordExpiryProSettingsEntity;class PasswordExpirySettingsViewModel{constructor(settings={}){this.automatic_update=Boolean(settings?.automatic_update),this.policy_override=Boolean(settings?.policy_override),this.automatic_expiry=Boolean(settings?.automatic_expiry);const defaultExpiryPeriod=parseInt(settings?.default_expiry_period,10);this.default_expiry_period=isNaN(defaultExpiryPeriod)?null:defaultExpiryPeriod,this.default_expiry_period_toggle=void 0!==settings?.default_expiry_period_toggle?Boolean(settings.default_expiry_period_toggle):Boolean(this.default_expiry_period),settings?.id&&(this.id=settings?.id)}static getSchema(isAvanced=!1){const baseEntitySchema=isAvanced?passwordExpiryProSettingsEntity.getSchema():passwordExpirySettingsEntity.getSchema();return this.getDefaultSchema(baseEntitySchema,isAvanced)}static getDefaultSchema(baseEntitySchema,isAdvanced=!1){const schema={type:"object",required:["automatic_expiry","automatic_update"],properties:{id:baseEntitySchema.properties.id,automatic_expiry:baseEntitySchema.properties.automatic_expiry,automatic_update:baseEntitySchema.properties.automatic_update,policy_override:baseEntitySchema.properties.policy_override,default_expiry_period:baseEntitySchema.properties.default_expiry_period}};return isAdvanced&&schema.required.push("policy_override"),schema}static fromEntityDto(entityDto){const data={automatic_expiry:Boolean(entityDto?.automatic_expiry),automatic_update:Boolean(entityDto?.automatic_update),policy_override:Boolean(entityDto?.policy_override),default_expiry_period:null!==entityDto?.default_expiry_period?parseInt(entityDto?.default_expiry_period,10):null};return entityDto?.id&&(data.id=entityDto.id),new PasswordExpirySettingsViewModel(data)}static isDataDifferent(a,b){return["automatic_expiry","automatic_update","policy_override","default_expiry_period"].some((key=>a[key]!==b[key]))}toEntityDto(){const default_expiry_period=this.default_expiry_period_toggle?this.default_expiry_period:null;return{automatic_expiry:this.automatic_expiry,automatic_update:this.automatic_update,policy_override:this.policy_override,default_expiry_period}}cloneWithMutation(field,value){const clone={...this,[field]:value};return new PasswordExpirySettingsViewModel(clone)}validate(isAdvanced=!1){const entityValidationError=new abstract_entityValidationError.A,schema=PasswordExpirySettingsViewModel.getSchema(isAdvanced);try{entitySchema.A.validate(this.constructor.name,this,schema),this.validateFormInput(entityValidationError,isAdvanced)}catch(e){if(!(e instanceof abstract_entityValidationError.A))throw e;return this.validateFormInput(e,isAdvanced),e}return entityValidationError}validateFormInput(entityValidationError,isAdvanced){isAdvanced&&this.default_expiry_period_toggle&&null===this.default_expiry_period&&entityValidationError.addError("default_expiry_period","required","The default_expiry_period is required.")}get isSettingsDisabled(){return!this.id}}const passwordExpirySettings_PasswordExpirySettingsViewModel=PasswordExpirySettingsViewModel,AdministrationPasswordExpiryContext=react.createContext({getSettings:()=>{},get:()=>{},setSettingsBulk:()=>{},findSettings:()=>{},isProcessing:()=>{},validateData:()=>{},save:()=>{},getErrors:()=>{},isFeatureToggleEnabled:()=>{},setFeatureToggle:()=>{},hasSettingsChanges:()=>{},isSubmitted:()=>{},setSubmitted:()=>{},setDefaultExpiryToggle:()=>{}});class AdministrationPasswordExpiryContextProvider extends react.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{processing:!1,errors:null,hasBeenValidated:!1,isDataModified:!1,submitted:!1,currentSettings:new passwordExpirySettings_PasswordExpirySettingsViewModel,featureToggleEnabled:!1,settings:new passwordExpirySettings_PasswordExpirySettingsViewModel,findSettings:this.findSettings.bind(this),getSettings:this.getSettings.bind(this),setSettingsBulk:this.setSettingsBulk.bind(this),isProcessing:this.isProcessing.bind(this),validateData:this.validateData.bind(this),save:this.save.bind(this),getErrors:this.getErrors.bind(this),hasSettingsChanges:this.hasSettingsChanges.bind(this),isFeatureToggleEnabled:this.isFeatureToggleEnabled.bind(this),setFeatureToggle:this.setFeatureToggle.bind(this),setDefaultExpiryToggle:this.setDefaultExpiryToggle.bind(this),isSubmitted:this.isSubmitted.bind(this),setSubmitted:this.setSubmitted.bind(this)}}async findSettings(){this.setState({processing:!0}),this.setState({submitted:!1});const result=await this.props.context.port.request("passbolt.password-expiry.get-or-find",!0),settings=passwordExpirySettings_PasswordExpirySettingsViewModel.fromEntityDto(result);this.setState({toggleEnabled:settings?.id,settings,currentSettings:settings,processing:!1})}setDefaultExpiryToggle(value){let default_expiry_period=this.state.settings.default_expiry_period;value&&null===this.state.settings.default_expiry_period&&(default_expiry_period=90),this.setSettingsBulk({default_expiry_period_toggle:value,default_expiry_period})}getSettings(){return this.state.settings}setSubmitted(value){this.setState({submitted:value})}isSubmitted(){return this.state.submitted}setSettingsBulk(keyValuePairs){let newSettings=this.state.settings;const keys=Object.keys(keyValuePairs);for(let i=0;i<keys.length;i++){const key=keys[i];newSettings=newSettings.cloneWithMutation(key,keyValuePairs[key])}const isDataModified=passwordExpirySettings_PasswordExpirySettingsViewModel.isDataDifferent(newSettings,this.state.currentSettings);if(!this.state.hasBeenValidated)return void this.setState({settings:newSettings,isDataModified});const isAdvanced=this.props.context.siteSettings.canIUse("passwordExpiryPolicies"),errors=newSettings.validate(isAdvanced);this.setState({errors,settings:newSettings,isDataModified})}isProcessing(){return this.state.processing}isFeatureToggleEnabled(){return this.state.toggleEnabled}setFeatureToggle(toggleEnabled){this.props.context.siteSettings.canIUse("passwordExpiryPolicies")||this.setSettingsBulk({automatic_expiry:toggleEnabled,automatic_update:toggleEnabled}),this.setState({toggleEnabled})}validateData(){const isAdvanced=this.props.context.siteSettings.canIUse("passwordExpiryPolicies"),validationError=this.state.settings.validate(isAdvanced),hasErrors=validationError.hasErrors(),errors=hasErrors?validationError:null;return this.setState({errors,hasBeenValidated:!0}),!hasErrors}async save(){if(!this.isFeatureToggleEnabled()&&!this.state.settings.id)return;this.setState({processing:!0});const newState={processing:!1};try{const newSettings=!this.isFeatureToggleEnabled()&&Boolean(this.state.settings.id)?await this.doDeleteSettings():await this.doSaveSettings();newState.settings=newSettings,newState.currentSettings=newSettings,newState.isDataModified=!1,newState.submitted=!1}finally{this.setState(newState)}}async doDeleteSettings(){return this.props.context.port.request("passbolt.password-expiry.delete",this.state.settings.id),this.props.context.siteSettings.canIUse("passwordExpiryPolicies")?new passwordExpirySettings_PasswordExpirySettingsViewModel(passwordExpiryProSettingsEntity.createFromDefault().toDto()):new passwordExpirySettings_PasswordExpirySettingsViewModel}async doSaveSettings(){const isAdvanced=this.props.context.siteSettings.canIUse("passwordExpiryPolicies"),settings=this.state.settings.toEntityDto();isAdvanced&&!this.state.settings.default_expiry_period_toggle&&(settings.default_expiry_period=null);const passwordExpirySettingsEntityDto=await this.props.context.port.request("passbolt.password-expiry.save",settings);return new passwordExpirySettings_PasswordExpirySettingsViewModel(passwordExpirySettingsEntityDto)}getErrors(){return this.state.errors}hasSettingsChanges(){return this.state.isDataModified}render(){return react.createElement(AdministrationPasswordExpiryContext.Provider,{value:this.state},this.props.children)}}AdministrationPasswordExpiryContextProvider.propTypes={context:prop_types_default().any,children:prop_types_default().any,t:prop_types_default().any};const AdministrationPaswordExpiryContext=(0,AppContext.L)((0,es.CI)("common")(AdministrationPasswordExpiryContextProvider));function withAdminPasswordExpiry(WrappedComponent){return class WithAdminPasswordExpiryContext extends react.Component{render(){return react.createElement(AdministrationPasswordExpiryContext.Consumer,null,(adminPasswordExpiryContext=>react.createElement(WrappedComponent,{adminPasswordExpiryContext,...this.props})))}}}AdministrationPasswordExpiryContextProvider.__docgenInfo={description:"The Administration User passphrase Policies context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"findSettings",docblock:"Find the password expiry settings\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Find the password expiry settings"},{name:"setDefaultExpiryToggle",docblock:"Set the defaultExpiry toggle\n@returns {void}",modifiers:[],params:[{name:"value",optional:!1}],returns:{type:{name:"void"}},description:"Set the defaultExpiry toggle"},{name:"getSettings",docblock:"Returns the settings that have been fetch previously.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns the settings that have been fetch previously."},{name:"setSubmitted",docblock:"Set submitted variable\n@returns {object}",modifiers:[],params:[{name:"value",optional:!1}],returns:{type:{name:"object"}},description:"Set submitted variable"},{name:"isSubmitted",docblock:"Returns if the form has been submitted.\n@returns {object}",modifiers:[],params:[],returns:{type:{name:"object"}},description:"Returns if the form has been submitted."},{name:"setSettingsBulk",docblock:"Set given fields with the given values.",modifiers:[],params:[{name:"keyValuePairs",optional:!1}],returns:null,description:"Set given fields with the given values."},{name:"isProcessing",docblock:"Returns true if data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if data is under processing"},{name:"isFeatureToggleEnabled",docblock:"Returns true if the main toggle is enable\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the main toggle is enable"},{name:"setFeatureToggle",docblock:"Enable or disable the feature by the users\n@param toggleEnabled the toggle state\n@returns {boolean}",modifiers:[],params:[{name:"toggleEnabled",description:"the toggle state",optional:!1}],returns:{type:{name:"boolean"}},description:"Enable or disable the feature by the users"},{name:"validateData",docblock:"runs the current data validation\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"runs the current data validation"},{name:"save",docblock:"Saves the data on the API.\nCan actually save the current settings, or can ask for deletion of settings if the feature is disabled.\nIf an admin tries to delete the settings when there is no settings yet, nothing happens.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Saves the data on the API.\nCan actually save the current settings, or can ask for deletion of settings if the feature is disabled.\nIf an admin tries to delete the settings when there is no settings yet, nothing happens."},{name:"doDeleteSettings",docblock:"Deletes the current settings\n@returns {Promise<PasswordExpirySettingsViewModel>}\n@private",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"PasswordExpirySettingsViewModel"}]}},description:"Deletes the current settings"},{name:"doSaveSettings",docblock:"Saves the current settings\n@returns {Promise<PasswordExpirySettingsViewModel>}\n@private",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"PasswordExpirySettingsViewModel"}]}},description:"Saves the current settings"},{name:"getErrors",docblock:"Returns the latest validation errors available\n@returns {EntityValidationError|null}",modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"EntityValidationError"}]}},description:"Returns the latest validation errors available"},{name:"hasSettingsChanges",docblock:"Returns true if the data has changed\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true if the data has changed"}],displayName:"AdministrationPasswordExpiryContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"any"},required:!1}}};var Icon=__webpack_require__("./src/shared/components/Icons/Icon.js"),AdministrationWorkspaceContext=__webpack_require__("./src/react-extension/contexts/AdministrationWorkspaceContext.js"),DialogContext=__webpack_require__("./src/react-extension/contexts/DialogContext.js"),ActionFeedbackContext=__webpack_require__("./src/react-extension/contexts/ActionFeedbackContext.js"),NotifyError=__webpack_require__("./src/react-extension/components/Common/Error/NotifyError/NotifyError.js");class DisplayAdministrationPasswordExpiryActions extends react.Component{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleSave=this.handleSave.bind(this)}get isActionEnabled(){return!this.props.adminPasswordExpiryContext.isProcessing()}async handleSave(){if(this.props.adminPasswordExpiryContext.setSubmitted(!0),this.isActionEnabled&&this.props.adminPasswordExpiryContext.validateData())try{await this.props.adminPasswordExpiryContext.save(),await this.handleSaveSuccess()}catch(error){await this.handleSaveError(error)}}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The password expiry settings were updated."))}async handleSaveError(error){console.error(error),await this.props.actionFeedbackContext.displayError(error.message),this.props.dialogContext.open(NotifyError.A,{error})}render(){const isDisabled=!this.isActionEnabled;return react.createElement("div",{className:"col2_3 actions-wrapper"},react.createElement("div",{className:"actions"},react.createElement("ul",null,react.createElement("li",null,react.createElement("button",{type:"button",disabled:isDisabled,id:"save-settings",onClick:this.handleSave},react.createElement(Icon.A,{name:"save"}),react.createElement("span",null,react.createElement(es.x6,null,"Save settings")))))))}}DisplayAdministrationPasswordExpiryActions.propTypes={adminPasswordExpiryContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,dialogContext:prop_types_default().any,t:prop_types_default().func};const DisplayAdministrationPasswordExpiryActions_DisplayAdministrationPasswordExpiryActions=(0,ActionFeedbackContext.ot)(withAdminPasswordExpiry((0,DialogContext.z9)((0,es.CI)("common")(DisplayAdministrationPasswordExpiryActions))));DisplayAdministrationPasswordExpiryActions.__docgenInfo={description:"This component is a container of multiple actions applicable on setting",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"isActionEnabled",docblock:"Is save button enabled\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Is save button enabled"},{name:"handleSave",docblock:"Handles the save action.\n@return {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handles the save action."},{name:"handleSaveSuccess",docblock:"Handle save operation success.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation error."}],displayName:"DisplayAdministrationPasswordExpiryActions",props:{adminPasswordExpiryContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},dialogContext:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};class DisplayAdministrationPasswordExpiryAdvanced extends react.PureComponent{constructor(props){super(props),this.bindCallbacks()}bindCallbacks(){this.handleFormSubmit=this.handleFormSubmit.bind(this),this.handleInputChange=this.handleInputChange.bind(this),this.handleExpiryPeriodToggleClick=this.handleExpiryPeriodToggleClick.bind(this)}handleInputChange(event){const{type,checked,value,name}=event.target,filedValue="checkbox"===type?checked:parseInt(value,10);this.props.adminPasswordExpiryContext.setSettingsBulk({[name]:filedValue})}handleExpiryPeriodToggleClick(event){const value=event.target.checked;this.props.adminPasswordExpiryContext.setDefaultExpiryToggle(value)}async handleFormSubmit(event){if(event.preventDefault(),this.props.adminPasswordExpiryContext.setSubmitted(!0),!this.props.adminPasswordExpiryContext.isProcessing()&&this.props.adminPasswordExpiryContext.validateData())try{await this.props.adminPasswordExpiryContext.save(),await this.handleSaveSuccess()}catch(error){await this.handleSaveError(error)}}async handleSaveSuccess(){await this.props.actionFeedbackContext.displaySuccess(this.props.t("The password expiry settings were updated."))}async handleSaveError(error){await this.props.actionFeedbackContext.displayError(error.message),this.props.dialogContext.open(NotifyError.A,{error})}hasAllInputDisabled(){return this.props.adminPasswordExpiryContext.isProcessing()}get settings(){return this.props.adminPasswordExpiryContext.getSettings()}get errors(){const errors=this.props.adminPasswordExpiryContext.getErrors();return errors?.details}render(){const isSubmitted=this.props.adminPasswordExpiryContext.isSubmitted(),defaultExpiryPeriod=this.settings.default_expiry_period||"",isDefaultExpiryPeriodToggleChecked=Boolean(this.settings?.default_expiry_period_toggle);return react.createElement("div",{id:"password-expiry-form-advanced"},react.createElement("form",{className:"form",onSubmit:this.handleFormSubmit},react.createElement("h4",{className:"no-border",id:"expiry-policies-subtitle"},react.createElement(es.x6,null,"Expiry Policies")),react.createElement("p",{id:"expiry-policies-description"},react.createElement(es.x6,null,"In this section you can choose the default behaviour of password expiry policy for all users.")),react.createElement("div",{className:"togglelist-alt"},react.createElement("span",{id:"default-expiry-period",className:"input toggle-switch form-element "+(this.errors?.default_expiry_period&&isSubmitted?"has-error":"")},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"defaultExpiryPeriodToggle",onChange:this.handleExpiryPeriodToggleClick,checked:isDefaultExpiryPeriodToggleChecked,disabled:this.hasAllInputDisabled(),id:"default-expiry-period-toggle"}),react.createElement("label",{htmlFor:"defaultExpiryPeriodToggle"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Default password expiry period")),react.createElement("span",{className:"info-input"},react.createElement(es.x6,null,react.createElement("span",null,"When a user creates a resource, a default expiry date is set to "),react.createElement("input",{type:"text",className:"toggle-input",id:"default-expiry-period-input",name:"default_expiry_period",onChange:this.handleInputChange,maxLength:3,value:defaultExpiryPeriod,disabled:this.hasAllInputDisabled()||!isDefaultExpiryPeriodToggleChecked,placeholder:"90"}),react.createElement("span",null,"days"))))),this.errors?.default_expiry_period&&isSubmitted&&react.createElement("div",{className:"input"},!this.errors.default_expiry_period.required&&react.createElement("div",{className:"default-expiry-period-gte error-message"},react.createElement(es.x6,null,"The default password expiry period should be a number between 1 and 999 days.")),this.errors?.default_expiry_period.required&&react.createElement("div",{className:"default-expiry-period-required  error-message"},react.createElement(es.x6,null,"The default password expiry period should be a valid number.")))),react.createElement("div",{className:"togglelist-alt"},react.createElement("span",{className:"input toggle-switch form-element",id:"policy-override"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"policy_override",onChange:this.handleInputChange,checked:this.settings.policy_override,disabled:this.hasAllInputDisabled(),id:"policy-override-toggle"}),react.createElement("label",{htmlFor:"policy_override"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Policy Override")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Allow users to override the default policy."))))),react.createElement("h4",{className:"no-border",id:"automatic-workflow-subtitle"},react.createElement(es.x6,null,"Automatic workflows")),react.createElement("p",{id:"automatic-workflow-description"},react.createElement(es.x6,null,"In this section you can choose automatic behaviours.")),react.createElement("div",{className:"togglelist-alt"},react.createElement("span",{className:"input toggle-switch form-element",id:"automatic-expiry"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"automatic_expiry",onChange:this.handleInputChange,checked:this.settings.automatic_expiry,disabled:this.hasAllInputDisabled(),id:"automatic-expiry-toggle"}),react.createElement("label",{htmlFor:"automatic_expiry"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Automatic Expiry")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Password automatically expires when a user or group with a user who has accessed the password is removed from the permission list."))))),react.createElement("div",{className:"togglelist-alt"},react.createElement("span",{className:"input toggle-switch form-element",id:"automatic-update"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"automatic_update",onChange:this.handleInputChange,checked:this.settings.automatic_update,disabled:this.hasAllInputDisabled(),id:"automatic-update-toggle"}),react.createElement("label",{htmlFor:"automatic_update"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Automatic Update")),react.createElement("span",{className:"info"},isDefaultExpiryPeriodToggleChecked?react.createElement(es.x6,null,"Password expiry date is renewed based on the default password expiry period whenever a password is updated."):react.createElement(es.x6,null,"Password is no longer marked as expired whenever the password is updated.")))))))}}DisplayAdministrationPasswordExpiryAdvanced.propTypes={context:prop_types_default().object,adminPasswordExpiryContext:prop_types_default().object,actionFeedbackContext:prop_types_default().object,dialogContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationPasswordExpiryAdvanced_DisplayAdministrationPasswordExpiryAdvanced=(0,AppContext.L)(withAdminPasswordExpiry((0,ActionFeedbackContext.ot)((0,DialogContext.z9)((0,es.CI)("common")(DisplayAdministrationPasswordExpiryAdvanced)))));DisplayAdministrationPasswordExpiryAdvanced.__docgenInfo={description:"",methods:[{name:"bindCallbacks",docblock:"Bind callbacks methods",modifiers:[],params:[],returns:null,description:"Bind callbacks methods"},{name:"handleInputChange",docblock:"Handle form input changes.\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle form input changes."},{name:"handleExpiryPeriodToggleClick",docblock:"Handle the expiry period toggle click\n@params {ReactEvent} The react event\n@returns {void}",modifiers:[],params:[{name:"event",optional:!1}],returns:{type:{name:"void"}},description:"Handle the expiry period toggle click"},{name:"handleFormSubmit",docblock:"Handle form submission that can be trigger when hitting `enter`\n@param {Event} event",modifiers:["async"],params:[{name:"event",type:{name:"Event"},optional:!1}],returns:null,description:"Handle form submission that can be trigger when hitting `enter`"},{name:"handleSaveSuccess",docblock:"Handle save operation success.\n@returns {Promise<void>}",modifiers:["async"],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation success."},{name:"handleSaveError",docblock:"Handle save operation error.\n@param {object} error The returned error\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"error",description:"The returned error",type:{name:"object"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Handle save operation error."},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"},{name:"settings",docblock:"return the getSettings from context\n@returns {object}",modifiers:["get"],params:[],returns:{type:{name:"object"}},description:"return the getSettings from context"},{name:"errors",docblock:"return the errors from the validation\n@returns {object}",modifiers:["get"],params:[],returns:{type:{name:"object"}},description:"return the errors from the validation"}],displayName:"DisplayAdministrationPasswordExpiryAdvanced",props:{context:{description:"",type:{name:"object"},required:!1},adminPasswordExpiryContext:{description:"",type:{name:"object"},required:!1},actionFeedbackContext:{description:"",type:{name:"object"},required:!1},dialogContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};class DisplayAdministrationPasswordExpiry extends react.PureComponent{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{isReady:!1}}async componentDidMount(){this.props.administrationWorkspaceContext.setDisplayAdministrationWorkspaceAction(DisplayAdministrationPasswordExpiryActions_DisplayAdministrationPasswordExpiryActions),await this.props.adminPasswordExpiryContext.findSettings(),this.setState({isReady:!0})}componentWillUnmount(){this.props.administrationWorkspaceContext.resetDisplayAdministrationWorkspaceAction()}hasAllInputDisabled(){return this.props.adminPasswordExpiryContext.isProcessing()}get canUseAdvancedSettings(){return this.props.context.siteSettings.canIUse("passwordExpiryPolicies")}render(){if(!this.state.isReady)return null;const adminContext=this.props.adminPasswordExpiryContext,isEnabled=adminContext.isFeatureToggleEnabled();return react.createElement("div",{className:"row"},react.createElement("div",{className:"password-expiry-settings col8 main-column"},react.createElement("h3",{id:"password-expiry-settings-title"},react.createElement("span",{className:"input toggle-switch form-element"},react.createElement("input",{type:"checkbox",className:"toggle-switch-checkbox checkbox",name:"passwordExpirySettingsToggle",onChange:()=>adminContext.setFeatureToggle(!isEnabled),checked:isEnabled,disabled:this.hasAllInputDisabled(),id:"passwordExpirySettingsToggle"}),react.createElement("label",{htmlFor:"passwordExpirySettingsToggle"},react.createElement(es.x6,null,"Password Expiry")))),adminContext.hasSettingsChanges()&&react.createElement("div",{className:"warning message",id:"password-expiry-settings-save-banner"},react.createElement("p",null,react.createElement(es.x6,null,"Don't forget to save your settings to apply your modification."))),!isEnabled&&react.createElement("p",{className:"description"},react.createElement(es.x6,null,"No Password Expiry is configured. Enable it to activate automatic password expiration and automatic password expiration reset workflows.")),isEnabled&&react.createElement(react.Fragment,null,this.canUseAdvancedSettings?react.createElement(DisplayAdministrationPasswordExpiryAdvanced_DisplayAdministrationPasswordExpiryAdvanced,null):react.createElement("div",{id:"password-expiry-settings-form"},react.createElement("h4",{id:"password-expiry-settings-automatic-workflows",className:"title title--required no-border"},react.createElement(es.x6,null,"Automatic workflows")),react.createElement("div",{className:"radiolist-alt"},react.createElement("div",{className:"input radio"},react.createElement("label",{htmlFor:"passwordExpiryAutomaticExpiry"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Automatic expiry")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Password automatically expires when a user or group with a user who has accessed the password is removed from the permission list.")))),react.createElement("div",{className:"input radio"},react.createElement("label",{htmlFor:"passwordExpiryAutomatiUpdate"},react.createElement("span",{className:"name"},react.createElement(es.x6,null,"Automatic update")),react.createElement("span",{className:"info"},react.createElement(es.x6,null,"Password is no longer marked as expired whenever the password is updated.")))))))),react.createElement("div",{className:"col4 last"},react.createElement("div",{className:"sidebar-help"},react.createElement("h3",null,react.createElement(es.x6,null,"About password expiry")),react.createElement("p",null,react.createElement(es.x6,null,"For more information about the password expiry, checkout the dedicated page on the help website.")),react.createElement("a",{className:"button",href:"https://passbolt.com/docs/admin/password-configuration/password-expiry",target:"_blank",rel:"noopener noreferrer"},react.createElement(Icon.A,{name:"life-ring"}),react.createElement("span",null,react.createElement(es.x6,null,"Read the documentation"))))))}}DisplayAdministrationPasswordExpiry.propTypes={context:prop_types_default().object,administrationWorkspaceContext:prop_types_default().object,adminPasswordExpiryContext:prop_types_default().object,t:prop_types_default().func};const DisplayAdministrationPasswordExpiry_DisplayAdministrationPasswordExpiry=(0,AppContext.L)((0,AdministrationWorkspaceContext.Kk)(withAdminPasswordExpiry((0,es.CI)("common")(DisplayAdministrationPasswordExpiry))));DisplayAdministrationPasswordExpiry.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:"Get default state\n@returns {Object}",modifiers:["get"],params:[],returns:{type:{name:"Object"}},description:"Get default state"},{name:"hasAllInputDisabled",docblock:"Should input be disabled? True if state is loading or processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Should input be disabled? True if state is loading or processing"},{name:"canUseAdvancedSettings",docblock:"Check if the user can use the advanced expiry password\n@returns {boolean}",modifiers:["get"],params:[],returns:{type:{name:"boolean"}},description:"Check if the user can use the advanced expiry password"}],displayName:"DisplayAdministrationPasswordExpiry",props:{context:{description:"",type:{name:"object"},required:!1},administrationWorkspaceContext:{description:"",type:{name:"object"},required:!1},adminPasswordExpiryContext:{description:"",type:{name:"object"},required:!1},t:{description:"",type:{name:"func"},required:!1}}};const DisplayAdministrationPasswordExpiry_test_stories={title:"Components/Administration/DisplayAdministrationPasswordExpiry",component:DisplayAdministrationPasswordExpiry_DisplayAdministrationPasswordExpiry},Template=args=>react.createElement("div",{className:"panel middle"},react.createElement("div",{className:"grid grid-responsive-12"},react.createElement(AdministrationPaswordExpiryContext,args,react.createElement(DisplayAdministrationPasswordExpiry_DisplayAdministrationPasswordExpiry,args))));Template.propTypes={context:prop_types_default().object,adminPasswordExpirySettingsContext:prop_types_default().object};const ProVersion=Template.bind({});ProVersion.args=defaultPropsPro();const CeVersion=Template.bind({});CeVersion.args=function defaultPropsCE(props={}){const defaultProps=defaultPropsPro();return defaultProps.context.siteSettings.canIUse=()=>!1,Object.assign(defaultProps,props)}();const __namedExportsOrder=["ProVersion","CeVersion"];ProVersion.parameters={...ProVersion.parameters,docs:{...ProVersion.parameters?.docs,source:{originalSource:'args => <div className="panel middle">\n    <div className="grid grid-responsive-12">\n      <AdministrationPasswordExpiryContextProvider {...args}>\n        <DisplayAdministrationPasswordExpiry {...args} />\n      </AdministrationPasswordExpiryContextProvider>\n    </div>\n  </div>',...ProVersion.parameters?.docs?.source}}},CeVersion.parameters={...CeVersion.parameters,docs:{...CeVersion.parameters?.docs,source:{originalSource:'args => <div className="panel middle">\n    <div className="grid grid-responsive-12">\n      <AdministrationPasswordExpiryContextProvider {...args}>\n        <DisplayAdministrationPasswordExpiry {...args} />\n      </AdministrationPasswordExpiryContextProvider>\n    </div>\n  </div>',...CeVersion.parameters?.docs?.source}}}},"./src/react-extension/contexts/ActionFeedbackContext.test.data.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function defaultActionFeedbackContext(data={}){const defaultContext={displaySuccess:jest.fn(),displayError:jest.fn(),remove:jest.fn()};return Object.assign(defaultContext,data)}__webpack_require__.d(__webpack_exports__,{M:()=>defaultActionFeedbackContext})},"./src/react-extension/contexts/AdministrationWorkspaceContext.test.data.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function defaultAdministrationWorkspaceContext(context={}){const defaultContext={must:{editSubscriptionKey:!1,refreshSubscriptionKey:!1},onResetActionsSettings:jest.fn(),setDisplayAdministrationWorkspaceAction:jest.fn(),resetDisplayAdministrationWorkspaceAction:jest.fn()};return Object.assign(defaultContext,context)}__webpack_require__.d(__webpack_exports__,{M:()=>defaultAdministrationWorkspaceContext})},"./src/react-extension/contexts/DialogContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>DialogContextProvider,z9:()=>withDialog});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),uuid__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js");const DialogContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({dialogs:[],open:()=>{},close:()=>{}});class DialogContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{dialogs:[],open:(Dialog,DialogProps)=>{const dialogKey=(0,uuid__WEBPACK_IMPORTED_MODULE_1__.A)();return this.setState({dialogs:[...this.state.dialogs,{key:dialogKey,Dialog,DialogProps}]}),dialogKey},close:dialogKey=>this.setState({dialogs:this.state.dialogs.filter((dialog=>dialogKey!==dialog.key))}),closeAll:()=>this.setState({dialogs:[]})}}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DialogContext.Provider,{value:this.state},this.props.children)}}function withDialog(WrappedComponent){return class WithDialog extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DialogContext.Consumer,null,(dialogContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{dialogContext,...this.props})))}}}DialogContextProvider.displayName="DialogContextProvider",DialogContextProvider.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any},DialogContextProvider.__docgenInfo={description:"The related context provider",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"}],displayName:"DialogContextProvider",props:{children:{description:"",type:{name:"any"},required:!1}}}},"./src/react-extension/contexts/DialogContext.test.data.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function defaultDialogContext(context={}){const defaultContext={dialogs:[],open:jest.fn(),close:jest.fn(),closeAll:jest.fn()};return Object.assign(defaultContext,context)}__webpack_require__.d(__webpack_exports__,{L:()=>defaultDialogContext})},"./node_modules/uuid/dist/esm-browser/stringify.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});for(var _validate_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/uuid/dist/esm-browser/validate.js"),byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));const __WEBPACK_DEFAULT_EXPORT__=function stringify(arr){var offset=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,uuid=(byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]).toLowerCase();if(!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__.A)(uuid))throw TypeError("Stringified UUID is invalid");return uuid}},"./node_modules/uuid/dist/esm-browser/v4.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{var getRandomValues;__webpack_require__.d(__webpack_exports__,{A:()=>esm_browser_v4});var rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&!(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}var stringify=__webpack_require__("./node_modules/uuid/dist/esm-browser/stringify.js");const esm_browser_v4=function v4(options,buf,offset){var rnds=(options=options||{}).random||(options.rng||rng)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return(0,stringify.A)(rnds)}},"./node_modules/uuid/dist/esm-browser/v5.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>esm_browser_v5});var stringify=__webpack_require__("./node_modules/uuid/dist/esm-browser/stringify.js"),validate=__webpack_require__("./node_modules/uuid/dist/esm-browser/validate.js");const esm_browser_parse=function parse(uuid){if(!(0,validate.A)(uuid))throw TypeError("Invalid UUID");var v,arr=new Uint8Array(16);return arr[0]=(v=parseInt(uuid.slice(0,8),16))>>>24,arr[1]=v>>>16&255,arr[2]=v>>>8&255,arr[3]=255&v,arr[4]=(v=parseInt(uuid.slice(9,13),16))>>>8,arr[5]=255&v,arr[6]=(v=parseInt(uuid.slice(14,18),16))>>>8,arr[7]=255&v,arr[8]=(v=parseInt(uuid.slice(19,23),16))>>>8,arr[9]=255&v,arr[10]=(v=parseInt(uuid.slice(24,36),16))/1099511627776&255,arr[11]=v/4294967296&255,arr[12]=v>>>24&255,arr[13]=v>>>16&255,arr[14]=v>>>8&255,arr[15]=255&v,arr};function f(s,x,y,z){switch(s){case 0:return x&y^~x&z;case 1:case 3:return x^y^z;case 2:return x&y^x&z^y&z}}function ROTL(x,n){return x<<n|x>>>32-n}const esm_browser_v5=function v35(name,version,hashfunc){function generateUUID(value,namespace,buf,offset){if("string"==typeof value&&(value=function stringToBytes(str){str=unescape(encodeURIComponent(str));for(var bytes=[],i=0;i<str.length;++i)bytes.push(str.charCodeAt(i));return bytes}(value)),"string"==typeof namespace&&(namespace=esm_browser_parse(namespace)),16!==namespace.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var bytes=new Uint8Array(16+value.length);if(bytes.set(namespace),bytes.set(value,namespace.length),(bytes=hashfunc(bytes))[6]=15&bytes[6]|version,bytes[8]=63&bytes[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=bytes[i];return buf}return(0,stringify.A)(bytes)}try{generateUUID.name=name}catch(err){}return generateUUID.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",generateUUID.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",generateUUID}("v5",80,(function sha1(bytes){var K=[1518500249,1859775393,2400959708,3395469782],H=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof bytes){var msg=unescape(encodeURIComponent(bytes));bytes=[];for(var i=0;i<msg.length;++i)bytes.push(msg.charCodeAt(i))}else Array.isArray(bytes)||(bytes=Array.prototype.slice.call(bytes));bytes.push(128);for(var l=bytes.length/4+2,N=Math.ceil(l/16),M=new Array(N),_i=0;_i<N;++_i){for(var arr=new Uint32Array(16),j=0;j<16;++j)arr[j]=bytes[64*_i+4*j]<<24|bytes[64*_i+4*j+1]<<16|bytes[64*_i+4*j+2]<<8|bytes[64*_i+4*j+3];M[_i]=arr}M[N-1][14]=8*(bytes.length-1)/Math.pow(2,32),M[N-1][14]=Math.floor(M[N-1][14]),M[N-1][15]=8*(bytes.length-1)&4294967295;for(var _i2=0;_i2<N;++_i2){for(var W=new Uint32Array(80),t=0;t<16;++t)W[t]=M[_i2][t];for(var _t=16;_t<80;++_t)W[_t]=ROTL(W[_t-3]^W[_t-8]^W[_t-14]^W[_t-16],1);for(var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],_t2=0;_t2<80;++_t2){var s=Math.floor(_t2/20),T=ROTL(a,5)+f(s,b,c,d)+e+K[s]+W[_t2]>>>0;e=d,d=c,c=ROTL(b,30)>>>0,b=a,a=T}H[0]=H[0]+a>>>0,H[1]=H[1]+b>>>0,H[2]=H[2]+c>>>0,H[3]=H[3]+d>>>0,H[4]=H[4]+e>>>0}return[H[0]>>24&255,H[0]>>16&255,H[0]>>8&255,255&H[0],H[1]>>24&255,H[1]>>16&255,H[1]>>8&255,255&H[1],H[2]>>24&255,H[2]>>16&255,H[2]>>8&255,255&H[2],H[3]>>24&255,H[3]>>16&255,H[3]>>8&255,255&H[3],H[4]>>24&255,H[4]>>16&255,H[4]>>8&255,255&H[4]]}))},"./node_modules/uuid/dist/esm-browser/validate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>esm_browser_validate});const regex=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const esm_browser_validate=function validate(uuid){return"string"==typeof uuid&&regex.test(uuid)}}}]);