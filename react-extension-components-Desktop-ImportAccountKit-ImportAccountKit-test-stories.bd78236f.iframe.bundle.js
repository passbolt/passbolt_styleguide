/*! For license information please see react-extension-components-Desktop-ImportAccountKit-ImportAccountKit-test-stories.bd78236f.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpassbolt_styleguide=self.webpackChunkpassbolt_styleguide||[]).push([[8385],{"./src/react-extension/components/Desktop/ImportAccountKit/ImportAccountKit.test.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ImportAccountKit_test_stories});var react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-i18next/dist/es/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),AppContext=__webpack_require__("./src/shared/context/AppContext/AppContext.js"),ImportAccountKitContext=__webpack_require__("./src/react-extension/contexts/Desktop/ImportAccountKitContext.js");class ImportAccountKit extends react.Component{constructor(props){super(props),this.state=this.defaultState,this.bindHandlers(),this.createReferences()}get defaultState(){return{filename:null,accountKit:null,errors:{message:null},processing:!1,validation:{hasAlreadyBeenValidated:!1}}}createReferences(){this.fileUploaderRef=react.createRef()}bindHandlers(){this.handleSelectFile=this.handleSelectFile.bind(this),this.handleAccountKitSelected=this.handleAccountKitSelected.bind(this),this.handleUpload=this.handleUpload.bind(this),this.openDocumentation=this.openDocumentation.bind(this)}async handleAccountKitSelected(event){const[uploadedKit]=event.target.files,filename=uploadedKit?.name,accountKit=await this.readFileContent(uploadedKit);if(this.setState({filename,accountKit}),this.state.validation.hasAlreadyBeenValidated){const state=this.validateAccountKitInput();this.setState(state)}}handleSelectFile(){this.fileUploaderRef.current.click()}handleUpload(event){event.preventDefault(),this.upload()}get hasValidationError(){return null!==this.state.errors.message}async upload(){this.state.processing||(await this.setState({validation:{hasAlreadyBeenValidated:!0}}),await this.toggleProcessing(),await this.validateAccountKitInput(),this.hasValidationError?await this.toggleProcessing():await this.props.importAccountKitContext.verifyAccountKit(this.state.accountKit))}readFileContent(accountKit){const reader=new FileReader;return new Promise(((resolve,reject)=>{reader.onloadend=()=>{try{resolve(reader.result)}catch(e){reject(e)}},reader.readAsText(accountKit)}))}toggleProcessing(){this.setState({processing:!this.state.processing})}validateAccountKitInput(){let message=null;return this.state.accountKit?"passbolt"!==this.state.filename.split(".").pop()&&(message=this.props.t("Only passbolt format is allowed.")):message=this.props.t("A file is required."),this.setState({errors:{message}})}openDocumentation(){this.props.context.port.emit("passbolt.rendered.open-to-browser","https://www.passbolt.com/docs/user/quickstart/desktop/windows-app/")}render(){return react.createElement("div",{className:"import-account-kit"},react.createElement("div",{className:"big avatar"},react.createElement("svg",{width:"90",height:"90",viewBox:"0 0 90 90",fill:"none",xmlns:"http://www.w3.org/2000/svg"},react.createElement("rect",{width:"90",height:"90",rx:"45",fill:"#939598"}),react.createElement("path",{d:"M65.997 51.9822V61.316C66.0007 61.9294 65.883 62.5374 65.6509 63.1051C65.4187 63.6729 65.0766 64.1891 64.6442 64.6241C64.2117 65.0591 63.6976 65.4044 63.1312 65.64C62.5649 65.8755 61.9576 65.9968 61.3442 65.9968H28.634C27.3925 65.9968 26.2019 65.5036 25.3241 64.6258C24.4462 63.748 23.9531 62.5574 23.9531 61.316V51.9822",stroke:"white",strokeWidth:"2.58413",strokeLinecap:"round",strokeLinejoin:"round"}),react.createElement("path",{d:"M56.663 35.6409L44.9748 23.9527L33.2866 35.6409",stroke:"white",strokeWidth:"2.58413",strokeLinecap:"round",strokeLinejoin:"round"}),react.createElement("path",{d:"M44.9751 23.9527V51.982",stroke:"white",strokeWidth:"2.58413",strokeLinecap:"round",strokeLinejoin:"round"}))),react.createElement("form",{onSubmit:this.handleUpload,noValidate:!0},react.createElement("div",{className:"input file required "+(this.hasValidationError?"error":"")},react.createElement("input",{"aria-required":!0,id:"dialog-upload-account-kit-input",type:"file",ref:this.fileUploaderRef,onChange:this.handleAccountKitSelected,accept:"application/passbolt"}),react.createElement("label",{htmlFor:"dialog-upload-account-kit-input"},react.createElement(es.x6,null,"Account kit")),react.createElement("div",{className:"input-file-inline"},react.createElement("input",{type:"text",disabled:!0,id:"upload-account-kit-input",placeholder:this.props.t("Upload your account kit"),defaultValue:this.state.filename}),react.createElement("button",{type:"button",className:"primary",onClick:this.handleSelectFile},react.createElement("span",{className:"ellipsis"},react.createElement(es.x6,null,"Select a file")))),this.state.errors.message&&react.createElement("div",{className:"error-message"},this.state.errors.message)),react.createElement("div",{className:"form-actions"},react.createElement("button",{type:"submit",disabled:!this.state.accountKit||!this.state.filename,className:"button primary big full-width"},react.createElement(es.x6,null,"Import account")),react.createElement("button",{type:"button",className:"link",onClick:this.openDocumentation},react.createElement(es.x6,null,"Where can I find my account kit ?")))))}}ImportAccountKit.propTypes={context:prop_types_default().any,t:prop_types_default().func,importAccountKitContext:prop_types_default().any.isRequired};const ImportAccountKit_ImportAccountKit=(0,AppContext.L)((0,ImportAccountKitContext.a0)((0,es.CI)("common")(ImportAccountKit)));ImportAccountKit.__docgenInfo={description:"",methods:[{name:"defaultState",docblock:"Returns the component default state",modifiers:["get"],params:[],returns:null,description:"Returns the component default state"},{name:"createReferences",docblock:"Create elements references",modifiers:[],params:[],returns:null,description:"Create elements references"},{name:"bindHandlers",docblock:"Bind the components handlers",modifiers:[],params:[],returns:null,description:"Bind the components handlers"},{name:"handleAccountKitSelected",docblock:"Whenever the user selects a profile picture file\n@param event A dom event",modifiers:["async"],params:[{name:"event",description:"A dom event",optional:!1}],returns:null,description:"Whenever the user selects a profile picture file"},{name:"handleSelectFile",docblock:"Handle the selection of a file by file explorer",modifiers:[],params:[],returns:null,description:"Handle the selection of a file by file explorer"},{name:"handleUpload",docblock:"Whenever the user wants to upload a new account kit\n@param event A DOM event",modifiers:[],params:[{name:"event",description:"A DOM event",optional:!1}],returns:null,description:"Whenever the user wants to upload a new account kit"},{name:"hasValidationError",docblock:"Returns true if the an error message is set",modifiers:["get"],params:[],returns:null,description:"Returns true if the an error message is set"},{name:"upload",docblock:"Upload the account kit",modifiers:["async"],params:[],returns:null,description:"Upload the account kit"},{name:"readFileContent",docblock:"Read the content of file content\n@param accountKit the account kit file",modifiers:[],params:[{name:"accountKit",description:"the account kit file",optional:!1}],returns:null,description:"Read the content of file content"},{name:"toggleProcessing",docblock:"Toggle the processing mode",modifiers:[],params:[],returns:null,description:"Toggle the processing mode"},{name:"validateAccountKitInput",docblock:"Validate the account kit input.\n@returns {Promise<void>}",modifiers:[],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Validate the account kit input."},{name:"openDocumentation",docblock:"Request main process to open browser with link.\n@returns {Promise<void>}",modifiers:[],params:[],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"Request main process to open browser with link."}],displayName:"ImportAccountKit",props:{context:{description:"",type:{name:"any"},required:!1},t:{description:"",type:{name:"func"},required:!1},importAccountKitContext:{description:"",type:{name:"any"},required:!0}}};const ImportAccountKit_test_stories={title:"Components/Desktop/ImportAccountKit",component:ImportAccountKit_ImportAccountKit},Default=(()=>react.createElement("div",{id:"container",className:"container page login"},react.createElement("div",{className:"content"},react.createElement("div",{className:"login-form"},react.createElement(ImportAccountKit_ImportAccountKit,null))))).bind({});Default.parameters={css:"ext_authentication"};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => <div id="container" className="container page login">\n    <div className="content">\n      <div className="login-form">\n        <ImportAccountKit />\n      </div>\n    </div>\n  </div>',...Default.parameters?.docs?.source}}}},"./src/react-extension/contexts/Desktop/ImportAccountKitContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S3:()=>ImportAccountKitWorkflowStates,a0:()=>withImportAccountKitContext,iM:()=>ImportAccountKitContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/context/AppContext/AppContext.js");const ImportAccountKitWorkflowStates={GET_STARTED:"Get started",IMPORT_ACCOUNT_KIT:"Import account kit",VERIFY_PASSPHRASE:"Verify user passphrase",IMPORTING_ACCOUNT:"Importing account",SIGNING_IN:"Sign in",UNEXPECTED_ERROR_STATE:"Unexpected error state"},ImportAccountKitContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({accountKit:null,state:null,unexpectedError:null,navigate:()=>{},isProcessing:()=>{},setProcessing:()=>{},verifyAccountKit:()=>{},importAccountAndConnect:()=>{},flushAccountKit:()=>{}});class ImportAccountKitContextProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.state=this.defaultState}get defaultState(){return{accountKit:null,state:ImportAccountKitWorkflowStates.GET_STARTED,processing:!1,unexpectedError:null,isProcessing:this.isProcessing.bind(this),setProcessing:this.setProcessing.bind(this),navigate:this.navigate.bind(this),verifyAccountKit:this.verifyAccountKit.bind(this),verifyPassphrase:this.verifyPassphrase.bind(this),flushAccountKit:this.flushAccountKit.bind(this)}}isProcessing(){return this.state.processing}setProcessing(processing){this.setState({processing})}flushAccountKit(){this.setState({accountKit:null})}navigate(state){this.setState({state})}async verifyAccountKit(accountKit){try{this.setProcessing(!0);const accountKitValidated=await this.props.context.port.request("passbolt.background.verify-account-kit",accountKit);return this.setState({state:ImportAccountKitWorkflowStates.VERIFY_PASSPHRASE,accountKit:accountKitValidated})}catch(error){return console.error(error),this.setState({unexpectedError:error,state:ImportAccountKitWorkflowStates.UNEXPECTED_ERROR_STATE})}finally{this.setProcessing(!1)}}async verifyPassphrase(passphrase){try{await this.props.context.port.request("passbolt.auth-import.verify-passphrase",passphrase),this.navigate(ImportAccountKitWorkflowStates.IMPORTING_ACCOUNT),await this.importAccountAndConnect(passphrase)}catch(error){throw console.error(error),error}finally{this.setProcessing(!1)}}async importAccountAndConnect(passphrase){try{this.flushAccountKit(),await this.props.context.port.request("passbolt.auth-import.import-account"),this.navigate(ImportAccountKitWorkflowStates.SIGNING_IN),await this.props.context.port.request("passbolt.auth.login",passphrase)}catch(error){return console.error(error),this.setState({unexpectedError:error,state:ImportAccountKitWorkflowStates.UNEXPECTED_ERROR_STATE})}}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ImportAccountKitContext.Provider,{value:this.state},this.props.children)}}ImportAccountKitContextProvider.propTypes={context:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any,children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};(0,_shared_context_AppContext_AppContext__WEBPACK_IMPORTED_MODULE_1__.L)(ImportAccountKitContextProvider);function withImportAccountKitContext(WrappedComponent){return class WithImportAccountKitContext extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ImportAccountKitContext.Consumer,null,(importAccountKitContext=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent,{importAccountKitContext,...this.props})))}}}ImportAccountKitContextProvider.__docgenInfo={description:"The account kit context provider.\nHandle the business logic of the account kit importation and the manage the workflow.",methods:[{name:"defaultState",docblock:"Returns the default component state",modifiers:["get"],params:[],returns:null,description:"Returns the default component state"},{name:"isProcessing",docblock:"Returns true when the data is under processing\n@returns {boolean}",modifiers:[],params:[],returns:{type:{name:"boolean"}},description:"Returns true when the data is under processing"},{name:"setProcessing",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"processing",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"flushAccountKit",docblock:"Flush the account kit\n@returns {void}",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Flush the account kit"},{name:"navigate",docblock:"Handle processing change.\n@params {Boolean} processing value\n@returns {void}",modifiers:[],params:[{name:"state",optional:!1}],returns:{type:{name:"void"}},description:"Handle processing change."},{name:"verifyAccountKit",docblock:"When the user upload its account we request to the Background webview to verify it.\n@param   {object} the account kit to upload.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"accountKit",optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user upload its account we request to the Background webview to verify it."},{name:"verifyPassphrase",docblock:"When the user request to verify passphrase to the Background webview to verify it.\n@param   {string} passphrase the passphrase to verify.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"passphrase",description:"the passphrase to verify.",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user request to verify passphrase to the Background webview to verify it."},{name:"importAccountAndConnect",docblock:"When the user has validated the passphrase we request to import and sign the user\n@param   {string} passphrase the user's private key passphrase.\n@returns {Promise<void>}",modifiers:["async"],params:[{name:"passphrase",description:"the user's private key passphrase.",type:{name:"string"},optional:!1}],returns:{type:{name:"Promise",elements:[{name:"void"}]}},description:"When the user has validated the passphrase we request to import and sign the user"}],displayName:"ImportAccountKitContextProvider",props:{context:{description:"",type:{name:"any"},required:!1},children:{description:"",type:{name:"any"},required:!1}}}}}]);